REDEPLOY(1)                                                        REDEPLOY(1)

NAME
       redeploy - stellt die angegebene Komponente erneut bereit

ÜBERSICHT
           redeploy [--help]
           --name component_name
           [--upload={true|false}]
           [--retrieve local_dirpath]
           [--dbvendorname dbvendorname]
           [--createtables={true|false}|--dropandcreatetables={true|false}]
           [--uniquetablenames={true|false}]
           [--deploymentplan deployment_plan]
           [--enabled={true|false}]
           [--generatermistubs={false|true}]
           [--contextroot context_root]
           [--precompilejsp={true|false}]
           [--verify={false|true}]
           [--virtualservers virtual_servers]
           [--availabilityenabled={false|true}]
           [--asyncreplication={true|false}]
           [--lbenabled={true|false}]
           [--keepstate={false|true}]
           [--libraries jar_file[,jar_file]*]
           [--target target]
           [--type pkg-type]
           [--properties(name=value)[:name=value]*]
           [file_archive|filepath]

BESCHREIBUNG
       Der Unterbefehl redeploy stellt eine Unternehmensanwendung, eine
       Webanwendung, ein auf der EJB-(Enterprise JavaBeans-)Spezifikation
       basierendes Modul (EJB-Modul), ein Connector-Modul oder ein
       Anwendungsclientmodul bereit, das bereits bereitgestellt oder vorhanden
       ist. Der Unterbefehl redeploy behält die Einstellungen und andere
       Optionen bei, mit denen die Anwendung ursprünglich bereitgestellt
       wurde. Die Anwendung muss bereits bereitgestellt sein. Anderenfalls
       tritt ein Fehler auf.

       Dieser Unterbefehl wird nur im Remote-Modus unterstützt.

OPTIONEN
       --help, -?
           Zeigt den Hilfetext für den Unterbefehl an.

       --virtualservers
           Eine oder mehrere IDs von virtuellen Servern. Mehrere IDs werden
           durch Komma getrennt.

       --contextroot
           Nur gültig, wenn das Archiv ein Webmodul ist. Bei anderen
           Archivtypen wird der Wert ignoriert und wird standardmäßig auf
           einen Dateinamen ohne Erweiterung gesetzt.

       --precompilejsp
           Standardmäßig erlaubt diese Option nicht, dass die JSP während des
           Deployment vorkompiliert wird. Stattdessen werden JSPs während der
           Laufzeit kompiliert. Der Standardwert lautet false.

       --verify
           Ist der Wert auf "true" gesetzt und sind die erforderlichen
           Verifier-Packages vom Updatetool installiert, werden die Syntax und
           die Semantik des Deployment-Deskriptors verifiziert. Der
           Standardwert lautet false.

       --name
           Name der bereitstellbaren Komponente.

           Der Name kann eine optionale Versions-ID enthalten, die dem Namen
           folgt und von diesem durch einen Doppelpunkt (:) getrennt ist. Die
           Versions-ID muss mit einem Buchstaben oder einer Zahl beginnen. Sie
           kann alphanumerische Zeichen sowie Unterstriche (_), Bindestriche
           (-) und Punkte (.) enthalten. Weitere Informationen zu Modul- und
           Anwendungsversionen finden Sie unter "Module and Application
           Versions" im Oracle GlassFish Server Application Deployment Guide.

       --upload
           Gibt an, ob der Unterbefehl die Datei auf den DAS hochlädt. In den
           meisten Fällen kann diese Option ausgelassen werden.

           Folgende Werte sind gültig:

           false
               Der Unterbefehl lädt die Datei nicht hoch, sondern versucht,
               über den angegebenen Dateinamen darauf zuzugreifen. Wenn der
               DAS nicht auf die Datei zugreifen kann, ist der Unterbefehl
               nicht erfolgreich.

               Beispielsweise kann der DAS unter einem anderen Benutzer als
               dem Admin-Benutzer ausgeführt werden, der keinen Lesezugriff
               auf die Datei besitzt. In diesem Fall ist der Unterbefehl nicht
               erfolgreich, wenn die Option --upload auf false gesetzt ist.

           true
               Der Unterbefehl lädt die Datei über die Netzwerkverbindung auf
               den DAS hoch.

           Der Standardwert hängt davon ab, ob sich der DAS auf dem Host
           befindet, auf dem der Unterbefehl ausgeführt wird, oder ob er auf
           einem Remote-Host liegt.

           ·   Befindet sich der DAS auf dem Host, auf dem der Unterbefehl
               ausgeführt wird, ist die Standardeinstellung false.

           ·   Befindet sich der DAS auf einem Remote-Host, ist die
               Standardeinstellung true.

           Wenn das Verzeichnis filepath angegeben ist, wird diese Option
           ignoriert.

       --retrieve
           Ruft die .jar-Datei des Client-Stubs aus dem Serverrechner in das
           lokale Verzeichnis ab.

       --dbvendorname
           Gibt den Namen des Datenbankherstellers an, für den die Tabellen
           erstellt werden. Unterstützte Werte sind db2, mssql, oracle, derby,
           javadb, postgresql und sybase, unabhängig von Groß- und
           Kleinschreibung. Wird diese Option nicht angegeben, wird der Wert
           des Attributs database-vendor-name in glassfish-ejb-jar.xml
           verwendet. Ist kein Wert angegeben, wird eine Verbindung mit der
           Ressource hergestellt, die vom Unterelement jndi-name des Elements
           cmp-resource in der Datei glassfish-ejb-jar.xml angegeben ist, und
           der Name des Datenbankherstellers wird gelesen. Kann die Verbindung
           nicht hergestellt oder der Wert nicht erkannt werden, wird
           SQL-92-Konformität vorausgesetzt.

       --createtables
           Ist der Wert auf "true" gesetzt, werden beim Deployment einer
           Anwendung mit nicht zugeordneten CMP-Beans Tabellen erstellt. Ist
           der Wert auf "false" gesetzt, werden keine Tabellen erstellt. Ist
           der Wert nicht festgelegt, bestimmt der Wert des Eintrags
           create-tables-at-deploy im Element cmp-resource der Datei
           glassfish-ejb-jar.xml, ob Tabellen erstellt werden. Es werden keine
           eindeutigen Constraints für die Tabellen erstellt.

       --dropandcreatetables
           Ist der Wert zum Zeitpunkt des erneuten Deployment der Komponente
           auf "true" gesetzt, werden die während des vorhergehenden
           Deployment erstellten Tabellen verworfen, bevor neue Tabellen
           erstellt werden. Gilt für bereitgestellte Anwendungen mit nicht
           zugeordneten CMP-Beans. Ist der Wert auf "false" gesetzt, werden
           Tabellen weder verworfen noch erstellt. Ist kein Wert angegeben,
           werden die Tabellen verworfen, wenn der Eintrag
           drop-tables-at-undeploy im Element cmp-resource der Datei
           glassfish-ejb-jar.xml auf "true" gesetzt ist, und die neuen
           Tabellen werden erstellt, wenn der Eintrag create-tables-at-deploy
           im Element cmp-resource der Datei glassfish-ejb-jar.xml auf "true"
           gesetzt ist.

       --uniquetablenames
           Garantiert eindeutige Tabellennamen für alle Beans und bewirkt,
           dass ein Hash-Code zu den Tabellennamen hinzugefügt wird. Dies ist
           hilfreich, wenn Sie über eine Anwendung mit Bean-Namen verfügen,
           die von Groß- und Kleinschreibung abhängig sind. Gilt für
           Anwendungen mit nicht zugeordneten CMP-Beans.

       --deploymentplan
           Stellt den Deployment-Plan bereit. Dabei handelt es sich um eine
           .jar-Datei, die GlassFish Server-Deskriptoren enthält. Geben Sie
           diese Option an, wenn Sie eine reine .ear-Datei bereitstellen. Eine
           reine .ear-Datei ist eine .ear-Datei ohne GlassFish
           Server-Deskriptoren.

       --enabled
           Ermöglicht Benutzern, auf die Anwendung zuzugreifen. Ist der Wert
           auf false gesetzt, können Benutzer nicht auf die Anwendung
           zugreifen. Diese Option aktiviert die Anwendung auf der angegebenen
           Zielinstanz oder dem angegebenen Cluster. Wenn Sie das Deployment
           für das Ziel domain ausführen, wird diese Option ignoriert, da das
           Deployment für diese Domain kein Deployment für eine bestimmte
           Instanz oder ein bestimmtes Cluster ist. Der Standardwert ist true.

       --generatermistubs
           Ist der Wert auf true gesetzt, werden statische RMI-IIOP-Stubs
           generiert und in die Datei client.jar eingefügt. Ist der Wert auf
           false gesetzt, werden keine Stubs generiert. Der Standardwert
           lautet false.

       --availabilityenabled
           Diese Option steuert, ob High Availability für Websessions und für
           die Durchführung von SFSB-Checkpoints (Session Bean mit Status
           "Stateful") und möglicherweise für Passivierung aktiviert wird. Ist
           der Wert auf "false" (Standardwert) gesetzt, werden alle
           Websession-Speichervorgänge und SFSB-Checkpoints für die angegebene
           Anwendung, Webanwendung oder das EJB-Modul deaktiviert. Ist der
           Wert auf true gesetzt, wird die angegebene Anwendung oder das Modul
           für Hochverfügbarkeit aktiviert. Setzen Sie diese Option nur dann
           auf "true", wenn High Availability auf einer höheren Ebene
           konfiguriert und aktiviert ist, beispielsweise auf Server- und
           Containerebene.

       --asyncreplication
           Diese Option steuert, ob Websession- und SFSB-Status, für die High
           Availability aktiviert ist, zunächst gepuffert und dann repliziert
           werden, indem ein separater asynchroner Thread verwendet wird. Ist
           der Wert auf "true" (Standardwert) gesetzt, wird die Performance
           verbessert, aber die Verfügbarkeit verringert. Wenn die Instanz,
           bei der Status gepuffert, aber noch nicht repliziert sind, nicht
           erfolgreich ist, gehen die Status verloren. Ist der Wert auf
           "false" gesetzt, wird die Performance verringert, aber die
           Verfügbarkeit sichergestellt. Status werden nicht gepuffert,
           sondern unmittelbar an andere Instanzen im Cluster übertragen.

       --lbenabled
           Diese Option steuert, ob die bereitgestellte Anwendung für Load
           Balancing verfügbar ist. Der Standardwert ist "true".

       --keepstate
           Diese Option steuert, ob Websessions, SFSB-Instanzen und persistent
           erstellte EJB-Timer zwischen erneuten Deployments erhalten bleiben.

           Der Standardwert ist "false". Diese Option wird nur bei der
           standardmäßigen Serverinstanz (server) unterstützt. Bei anderen
           Zielen wird sie nicht unterstützt und ignoriert.

           Änderungen, die an einer Anwendung zwischen Deployments vorgenommen
           werden, verhindern, dass diese Funktion richtig funktioniert.
           Ändern Sie beispielsweise nicht die Instanzenvariablen in der
           SFSB-Bean-Klasse.

           Bei Webanwendungen ist dieses Feature nur dann anwendbar, wenn in
           der Datei glassfish-web-app.xml das Attribut persistence-type des
           Elements session-manager file lautet.

           Für Session Bean-Instanzen mit Status "Stateful" ist der
           Persistenztyp ohne High Availability im Server (Attribut
           sfsb-persistence-type) festgelegt und muss auf den empfohlenen
           Standardwert file gesetzt werden.

           Kann eine aktive Websession, SFSB-Instanz oder ein EJB-Timer nicht
           gespeichert oder wiederhergestellt werden, stehen diese nicht zur
           Verfügung, wenn das erneute Deployment abgeschlossen ist. Das
           erneute Deployment wird jedoch fortgesetzt, und eine Warnmeldung
           wird protokolliert.

           Damit die Daten aktiver Zustände erhalten bleiben, werden die Daten
           von GlassFish Server serialisiert und gespeichert. Zum
           Wiederherstellen der Daten entserialisiert der Class Loader der
           erneut bereitgestellten Anwendung die Daten, die zuvor gespeichert
           wurden.

       --libraries
           Eine durch Komma getrennte Liste mit .jar-Dateien für Librarys.
           Geben Sie die relativen oder absoluten Pfade der .jar-Dateien der
           Library an. Geben Sie relative Pfade relativ zu
           domain-dir/lib/applibs an. Die Librarys werden der Anwendung in der
           angegebenen Reihenfolge zugänglich gemacht.

       --target
           Gibt das Ziel an, für das Sie das Deployment durchführen. Gültige
           Werte sind:

           server
               Stellt die Komponente für die standardmäßige Serverinstanz
               server bereit und ist der Standardwert.

           domain
               Stellt die Komponente für die Domain bereit. Wenn domain das
               Ziel für ein ursprüngliches Deployment ist, wird die Anwendung
               für die Domain bereitgestellt. Es verweisen aber keine
               Serverinstanzen oder Cluster auf die Anwendung. Wenn domain das
               Ziel für ein erneutes Deployment ist und die dynamische
               Neukonfiguration für die Cluster oder Serverinstanzen aktiviert
               ist, die auf die Anwendung verweisen, erhalten diese Cluster
               oder Serverinstanzen automatisch die neue Version der
               Anwendung. Wird ein erneutes Deployment durchgeführt und die
               dynamische Konfiguration ist deaktiviert, erhalten die
               referenzierenden Cluster oder Serverinstanzen die neue Version
               der Anwendung erst dann, wenn die Cluster- oder
               Standalone-Serverinstanz neu gestartet wird.

           cluster_name
               Stellt die Komponente für jede Serverinstanz im Cluster bereit.

           instance_name
               Stellt die Komponente für eine bestimmte
               Standalone-Serverinstanz bereit.

       --type
           Der Packaging-Archivtyp der bereitgestellten Komponente. Mögliche
           Werte:

           osgi
               Die Komponente wird als OSGi Alliance-Bundle gepackt.

           Die Option --type ist optional. Wenn die Komponente als normales
           Archiv gepackt wird, lassen Sie diese Option aus.

       --properties oder --property
           Optionale Schlüsselwort-/Wert-Paare, die weitere Eigenschaften für
           das Deployment angeben. Die verfügbaren Eigenschaften werden durch
           die Implementierung der bereitgestellten oder erneut
           bereitgestellten Komponente festgelegt. Die Option --properties und
           die Option --property sind äquivalent. Sie können jede Option
           unabhängig von der Anzahl der von Ihnen angegebenen Eigenschaften
           verwenden.

           Sie können folgende Eigenschaften für ein Deployment festlegen:

           jar-signing-alias
               Gibt den Alias für das Sicherheitszertifikat an, mit dem die
               .jar-Datei des Anwendungsclientcontainers signiert wird. Java
               Web Start führt keinen Code aus, der höhere Berechtigungen
               erfordert, es sei denn, der Code befindet sich in einer
               .jar-Datei, die mit einem Zertifikat signiert ist, dem das
               System des Benutzers vertraut. Aus Gründen der
               Benutzerfreundlichkeit signiert GlassFish Server die .jar-Datei
               automatisch, wobei das Zertifikat zusammen mit diesem Alias aus
               dem Keystore der Domain verwendet wird. Anschließend fragt Java
               Web Start den Benutzer, ob dem Code vertraut werden kann, und
               zeigt die GlassFish Server-Zertifikatinformationen an. Um diese
               .jar-Datei mit einem anderen Zertifikat zu signieren, fügen Sie
               das Zertifikat zum Keystore der Domain hinzu. Danach verwenden
               Sie diese Eigenschaft. Sie können beispielsweise ein Zertifikat
               einer vertrauenswürdigen Quelle verwenden, wodurch vermieden
               wird, dass die Java Web Start-Eingabeaufforderung angezeigt
               wird, oder Sie können das Zertifikat Ihres eigenen Unternehmens
               verwenden, von dem Benutzer wissen, dass es vertrauenswürdig
               ist. Der Standardwert ist s1as, der Alias für das
               selbstsignierte Zertifikat, das für jede Domain erstellt wird.

           java-web-start-enabled
               Gibt an, ob der Zugriff auf Java Web Start für ein
               Anwendungsclientmodul erlaubt ist. Der Standardwert ist "true".

           compatibility
               Gibt die GlassFish Server-Version für die Abwärtskompatibilität
               in Bezug auf JAR-Sichtbarkeitsanforderungen für Anwendungen an.
               Der einzige zulässige Wert, v2, bezieht sich auf Sun Java
               System Application Server Version 2 oder Sun Java System
               Application Server Version 9.1 oder 9.1.1. Die Java EE
               6-Plattformspezifikation enthält striktere Anforderungen als
               Java EE 5, was die Sichtbarkeit bestimmter .jar-Dateien für
               verschiedene Module innerhalb einer .ear-Datei angeht.
               Insbesondere dürfen Anwendungsclients keinen Zugriff auf
               EJB-.jar-Dateien oder andere .jar-Dateien in der .ear-Datei
               haben, es sei denn, Referenzen verwenden den standardmäßigen
               Java SE-Mechanismus (beispielsweise Erweiterungen) oder den
               Java EE-Library-Verzeichnismechanismus. Wenn diese Eigenschaft
               auf v2 gesetzt wird, werden diese Java EE 6-Beschränkungen
               entfernt.

           keepSessions={false|true}
               Wurde durch die Option --keepstate ersetzt.

               Mit dieser Eigenschaft können Sie angeben, ob aktive Sessions
               der erneut bereitgestellten Anwendung beibehalten und
               wiederhergestellt werden, wenn das erneute Deployment
               abgeschlossen ist. Gilt für HTTP-Sessions in einem
               Webcontainer. Der Standardwert lautet false.

               false
                   Aktive Sessions der Anwendung werden nicht beibehalten und
                   wiederhergestellt (Standardeinstellung).

               true
                   Aktive Sessions der Anwendung werden beibehalten und
                   wiederhergestellt.

                   Kann eine aktive Session der Anwendung nicht gespeichert
                   oder wiederhergestellt werden, ist keine der Sessions
                   verfügbar, wenn das erneute Deployment abgeschlossen ist.
                   Das erneute Deployment wird jedoch fortgesetzt, und eine
                   Warnmeldung wird aufgezeichnet.

                   Zum Speichern von aktiven Sessions serialisiert GlassFish
                   Server die Sessions und speichert sie im Arbeitsspeicher.
                   Zum Wiederherstellen der Sessions entserialisiert der Class
                   Loader der erneut bereitgestellten Anwendung alle Sessions,
                   die zuvor gespeichert wurden.

           preserveAppScopedResources
               Ist der Wert auf true gesetzt, werden für bestimmte Anwendungen
               ausgelegte Ressourcen beibehalten und während des erneuten
               Deployment wiederhergestellt. Der Standardwert lautet false.

           Andere verfügbare Eigenschaften werden durch die Implementierung
           der erneut bereitgestellten Komponente festgelegt.

OPERANDEN
       file_archive|filepath
           Der Pfad zu dem Archiv, das die Anwendung enthält, die erneut
           bereitgestellt wird. Dieser Pfad kann ein relativer oder absoluter
           Pfad sein.

           Das Archiv kann eines der folgenden Formate haben:

           ·   Beispiel: eine Archivdatei /export/JEE_apps/hello.war.

               Ist die Option --upload auf true gesetzt, ist dies der Pfad zur
               bereitstellbaren Datei auf dem lokalen Clientrechner. Ist die
               Option --upload auf false gesetzt, ist dies der absolute Pfad
               zur Datei auf dem Serverrechner.

           ·   Ein Verzeichnis, das das entpackte Format des bereitstellbaren
               Archivs enthält. Dies ist der absolute Pfad zum Verzeichnis auf
               dem Serverrechner.

               Wenn Sie ein Verzeichnis angeben, wird die Option --upload
               ignoriert.

           Ob dieser Operand erforderlich ist, hängt davon ab, wie die
           Anwendung ursprünglich bereitgestellt wurde:

           ·   Wenn die Anwendung ursprünglich aus einer Datei bereitgestellt
               wurde, ist der Operand archive-path erforderlich. Der Operand
               muss eine Archivdatei angeben.

           ·   Wenn die Anwendung ursprünglich aus einem Verzeichnis
               bereitgestellt wurde, ist der Operand archive-path optional.

               Der Operand kann ein Verzeichnis oder eine Archivdatei angeben.

BEISPIELE
       Beispiel 1, Erneutes Bereitstellen einer Webanwendung aus einer Datei
           In diesem Beispiel wird die Webanwendung hello aus der Datei
           hello.war erneut im aktuellen Arbeitsverzeichnis bereitgestellt.
           Die Anwendung wurde ursprünglich aus einer Datei bereitgestellt.
           Aktive Sessions der Anwendung bleiben erhalten und werden nach
           Abschluss des erneuten Deployments wiederhergestellt.

               asadmin> redeploy --name hello --properties keepSessions=true hello.war
               Application deployed successfully with name hello.
               Command redeploy executed successfully

       Beispiel 2, Erneutes Bereitstellen einer Webanwendung aus einem
       Verzeichnis
           In diesem Beispiel wird die Webanwendung hellodir erneut
           bereitgestellt. Die Anwendung wurde ursprünglich aus einem
           Verzeichnis bereitgestellt.

               asadmin> redeploy --name hellodir
               Application deployed successfully with name hellodir.
               Command redeploy executed successfully

BEENDIGUNGSSTATUS
       0
           Unterbefehl erfolgreich ausgeführt

       1
           Fehler beim Ausführen des Unterbefehls

SIEHE AUCH
       deploy(1), undeploy(1), list-components(1)

       asadmin(1M)

       Oracle GlassFish Server Application Deployment Guide

                                 23. Dez. 2010                     REDEPLOY(1)
