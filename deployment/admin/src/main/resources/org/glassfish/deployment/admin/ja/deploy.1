DEPLOY(1)                                                            DEPLOY(1)

名前
       deploy - 指定したコンポーネントをデプロイします

概要
           deploy [--help]
           [--force={false|true}]
           [--virtualservers virtual_servers]
           [--contextroot context_root]
           [--precompilejsp={false|true}]
           [--verify={false|true}]
           [--name component_name]
           [--upload={true|false}]
           [--retrieve local_dirpath]
           [--dbvendorname dbvendorname]
           [--createtables={true|false}|--dropandcreatetables={true|false}]
           [--uniquetablenames={true|false}]
           [--deploymentplan deployment_plan]
           [--enabled={true|false}]
           [--generatermistubs={false|true}]
           [--availabilityenabled={false|true}]
           [--asyncreplication={true|false}]
           [--lbenabled={true|false}]
           [--keepstate={false|true}]
           [--libraries jar_file[,jar_file]*]
           [--target target]
           [--type pkg-type]
           [--properties(name=value)[:name=value]*]
           [file_archive|filepath]

説明
       deployサブコマンドは、サーバーにアプリケーションをデプロイします。アプリケーションは、エンタープライズ・アプリケーション、Webアプリケーション、Enterprise
       JavaBeans(EJB)モジュール、コネクタ・モジュール、およびアプリケーション・クライアント・モジュールです。コンポーネントがすでにデプロイ済であるか、すでに存在している場合、--forceオプションがtrueに設定されていれば(デフォルト設定はfalse)、強制的に再デプロイされます。

       --createtablesオプションおよび--dropandcreatetablesオプションはブール型フラグであるため、trueまたはfalseの値を設定できます。これらのオプションは、データベースにマップされていない(つまり、モジュールのMETA-INFディレクトリにsun-cmp-mappings.xml記述子がない)CMP
       Beanをデプロイメントするときのみ使用されます。それ以外の場合は、無視されます。

       --createtablesオプションと--dropandcreatetablesオプションを同時に指定できないため、いずれか1つを使用してください。テーブルのドロップや作成に問題が発生した場合、デプロイメントに問題は発生せず、ログ・ファイルに警告メッセージが表示されます。

       このサブコマンドは、リモート・モードでのみサポートされています。

オプション
       --help, -?
           サブコマンドに関するヘルプ・テキストが表示されます。

       --force
           trueに設定すると、指定したコンポーネントがすでにデプロイ済であるか、すでに存在している場合でも、そのコンポーネントを再デプロイできます。デフォルトはfalseです。

       --virtualservers
           1つ以上の仮想サーバーID。IDが複数の場合は、カンマで区切られます。

       --contextroot
           アーカイブがWebモジュールの場合にのみ有効です。アーカイブのタイプが異なる場合は無視されます。拡張子なしのファイル名がデフォルトで使用されます。

       --precompilejsp
           デフォルトでは、このオプションはデプロイメント時にJSPのプリコンパイルを許可しません。かわりに、JSPは実行時にコンパイルされます。デフォルトはfalseです。

       --verify
           trueに設定した状態で、更新ツールから必要なベリファイア・パッケージをインストールすると、デプロイメント記述子の構文とセマンティクスが検証されます。デフォルトはfalseです。

       --name
           デプロイ可能なコンポーネントの名前。

           名前には、オプションのバージョン識別子を含めることができます。このバージョン識別子は名前の後に続き、コロン(:)で名前と区切ります。バージョン識別子は、文字または数値で始まる必要があります。これには、英数字とアンダースコア(_)、ダッシュ(-)、およびピリオド(.)を含めることができます。モジュールとアプリケーションのバージョンについては、Oracle
           GlassFish
           Serverア

       --upload
           サブコマンドでファイルをDASにアップロードするかを指定します。ほとんどの場合、このオプションは省略できます。

           有効な値は次のとおりです:

           false
               サブコマンドは、ファイルのアップロードを行わず、指定されたファイル名を使用してファイルへのアクセスが試行されます。DASがファイルにアクセスできない場合、このサブコマンドは失敗します。

               たとえば、DASが管理ユーザーとは異なるユーザーとして稼働している可能性があり、DASにファイルに対する読取りアクセス権がない場合があります。この状況では、--uploadオプションをfalseに設定すると、サブコマンドは失敗します。

           true
               サブコマンドは、ネットワーク接続経由でファイルをDASにアップロードします。

           デフォルト値は、サブコマンドを実行するホスト上のDASであるかリモート・ホスト上のDASであるかによって異なります。

           ·   サブコマンドを実行するホスト上のDASの場合、デフォルトはfalseです。

           ·   リモート・ホスト上のDASの場合、デフォルトはtrueです。

           ディレクトリfilepathが指定されている場合は、このオプションが無視されます。

       --retrieve
           クライアント・スタブJARファイルをサーバー・マシンから取得してローカル・ディレクトリに配置します。

       --dbvendorname
           作成するテーブルのデータベース・ベンダーの名前を指定します。サポートされている値は、db2、mssql、mysql、oracle、derby、javadb、postgresql、およびsybaseです。これらの値は大文字と小文字を区別しません。指定されない場合、glassfish-ejb-jar.xmlのdatabase-vendor-name属性の値が使用されます。値が指定されない場合は、glassfish-ejb-jar.xmlファイルにあるcmp-resource要素のjndi-nameサブ要素によって指定されたリソースへの接続が確立され、データベース・ベンダーの名前が読み取られます。接続を確立できない場合、または値が認識されない場合は、SQL-92に準拠します。

       --createtables
           trueに指定すると、マップされていないCMP
           Beanが含まれたアプリケーションのデプロイメント時に、テーブルが作成されます。falseに指定すると、テーブルは作成されません。指定されない場合は、glassfish-ejb-jar.xmlファイルのcmp-resource要素にあるcreate-tables-at-deployエントリの値によって、テーブルを作成するかを判断します。テーブルに対する一意の制約は作成されません。

       --dropandcreatetables
           コンポーネントの再デプロイ時にtrueに指定すると、新しいテーブルを作成する前に、前のデプロイメントで作成されたテーブルがドロップします。マップされていないCMP
           Beanが含まれたデプロイ済のアプリケーションに適用されます。アプリケーションの初回デプロイメント時、または、明示的なアンデプロイ後のデプロイメントでは、すでに存在するテーブルはドロップしません。falseに指定すると、テーブルのドロップおよび作成は行われません。指定されない場合、glassfish-ejb-jar.xmlファイルのcmp-resource要素のdrop-tables-at-undeployエントリをtrueに設定するとテーブルがドロップされ、glassfish-ejb-jar.xmlファイルのcmp-resource要素のcreate-tables-at-deployエントリをtrueに設定すると新しいテーブルが作成されます。

       --uniquetablenames
           すべてのBeanと結果に対し、テーブル名にハッシュ・コードを追加した一意のテーブル名を保証します。これは、大文字と小文字を区別するBean名が含まれたアプリケーションの場合に便利です。マップされていないCMP
           Beanが含まれたアプリケーションに適用されます。

       --deploymentplan
           GlassFish
           Server記述子が含まれたJARファイルであるデプロイメント・プランをデプロイします。このオプションは、純粋なEARファイルをデプロイするときに指定します。純粋なEARファイルとは、GlassFish
           Server記述子なしのEARを意味します。

       --enabled
           アプリケーションへのユーザー・アクセスを許可します。falseに設定すると、ユーザーはアプリケーションにアクセスできなくなります。このオプションは、指定されたターゲット・インスタンスまたはクラスタでアプリケーションを有効にします。ターゲットdomainにデプロイする場合、ドメインへのデプロイは、特定のインスタンスまたはクラスタへのデプロイにはならないため、このオプションは無視されます。デフォルトはtrueです。

       --generatermistubs
           trueに設定すると、静的RMI-IIOPスタブが生成され、client.jarに配置されます。falseに設定すると、スタブは生成されません。デフォルトはfalseです。

       --availabilityenabled
           このオプションは、Webセッション、およびステートフル・セッションBean(SFSB)のチェックポイント設定と潜在的なパッシベーションに対して、高可用性を有効にするかを制御します。false(デフォルト)に設定すると、すべてのWebセッションの保存とSFSBのチェックポイント設定が、指定されたアプリケーション、Webアプリケーション、またはEJBモジュールで無効になります。trueに設定すると、指定されたアプリケーションまたはモジュールで高可用性が有効になります。このオプションは、高可用性がサーバー・レベルやコンテナ・レベルなどのより高いレベルで構成および有効化されている場合のみ、trueに設定します。

       --asyncreplication
           このオプションは、高可用性が有効化されたWebセッションとSFSBの状態をまずバッファに格納し、次に個別の非同期スレッドを使用して複製するかを制御します。true(デフォルト)に設定すると、パフォーマンスは向上しますが、可用性は低下します。状態がバッファに格納されていてもまだ複製が行われていないインスタンスに問題が発生すると、その状態は失われます。falseに設定すると、パフォーマンスは低下しますが、可用性は保証付きです。状態はバッファに格納されませんが、すぐにクラスタ内の別のインスタンスに転送されます。

       --lbenabled
           このオプションは、デプロイされたアプリケーションでロード・バランシングを使用できるかどうかを制御します。デフォルトはtrueです。

       --keepstate
           このオプションは、Webセッション、SFSBインスタンス、および永続的に作成されたEJBタイマーを、次の再デプロイメントでも保持するかを制御します。

           デフォルトはfalseです。このオプションがサポートされるのは、serverという名前が付いたデフォルトのサーバー・インスタンス上のみです。他のターゲットではサポートされず、無視されます。

           再デプロイメントまでの間に行われるアプリケーションの変更によっては、この機能が正常に動作しなくなることがあります。たとえば、SFSB
           Beanクラスでインスタンス変数セットを変更しないでください。

           Webアプリケーションの場合、この機能を適用できるのはglassfish-web-app.xmlファイルでsession-manager要素のpersistence-type属性がfileのときのみです。

           ステートフル・セッションBeanインスタンスの場合、高可用性なしの永続性タイプがサーバー(sfsb-persistence-type属性)で設定されます。このタイプは、デフォルトおよび推奨値のfileに設定する必要があります。

           アクティブなWebセッション、SFSBインスタンス、またはEJBタイマーの保持または復元に失敗した場合、再デプロイメントが完了したときにこ

           アクティブな状態データを保持するために、GlassFish
           Serverはデータをシリアライズし、メモリーに保存します。データを復元するために、新たに再デプロイされたアプリケーションのクラス・ローダーは以前に保存されたデータを直列化復元します。

       --libraries
           ライブラリJARファイルのカンマ区切りリストです。ライブラリJARファイルを相対パスまたは絶対パスで指定します。domain-dir/lib/applibsに対する相対パスを指定します。ライブラリは、指定された順でアプリケーションに対して使用可能になります。

       --target
           デプロイ先のターゲットを指定します。有効な値は次のとおりです:

           server
               デフォルトのサーバー・インスタンスserverにコンポーネントをデプロイします。これはデフォルト値です。

           domain
               ドメインにコンポーネントをデプロイします。domainが初回デプロイメントのターゲットである場合、アプリケーションはドメインにデプロイされますが、サーバー・インスタンスまたはクラスタはアプリケーションを参照しません。domainが再デプロイメントのターゲットである場合(--forceオプションがtrueに設定されている状態)、およびアプリケーションを参照するクラスタまたはサーバー・インスタンスで動的再構成が有効である場合、参照しているクラスタまたはサーバー・インスタンスは、アプリケーションの新しいバージョンを自動的に取得します。動的構成が無効な状態で再デプロイする場合、参照しているクラスタまたはサーバー・インスタンスは、クラスタ化されるか、あるいはスタンドアロンのサーバー・インスタンスが再起動するまで、アプリケーションの新しいバージョンを取得できません。

           cluster_name
               クラスタ内のすべてのサーバー・インスタンスにコンポーネントをデプロイします。

           instance_name
               特定のスタンドアロン・サーバー・インスタンスにコンポーネントをデプロイします。

       --type
           デプロイされているコンポーネントがパッケージ化されているアーカイブのタイプ。使用可能な値は次のとおりです:

           osgi
               コンポーネントは、OSGi
               Allianceバンドルとしてパッケージ化されます。

           --typeオプションはオプションです。コンポーネントが通常のアーカイブとしてパッケージ化されている場合、このオプションは省略します。

       --propertiesまたは--property
           デプロイメントの追加のプロパティを指定するキーワードと値のペア(オプション)。使用可能なプロパティは、デプロイまたは再デプロイされているコンポーネントの実装で決まります。--propertiesオプションと--propertyオプションは同等のものです。指定するプロパティの数に関係なく、どちらのオプションも使用できます。

           デプロイメントには次のプロパティを指定できます。

           jar-signing-alias
               アプリケーション・クライアント・コンテナJARファイルの署名に使用されるセキュリティ証明書の別名を指定します。ユーザーのシステムが信頼する証明書を使用して署名されたJARファイルにJava
               Web Startがない場合、Java Web
               Startは格上げした権限を必要とするコードを実行しません。利便性を考慮し、GlassFish
               Serverはドメインのキーストアから取得したこの別名の証明書を使用して、自動的にJARファイルに署名します。その後Java
               Web Startは、コードを信頼してGlassFish
               Server証明書情報を表示するかをユーザーに尋ねます。異なる証明書を使用してこのJARファイルに署名するには、ドメインのキーストアにその証明書を追加してからこのプロパティを使用します。たとえば、Java
               Web
               Startのプロンプトを必要としない認証機関から取得した証明書や、ユーザーが信頼できる社内の証明書などを使用できます。デフォルトはs1asであり、自己署名付き証明書用の別名はドメインごとに作成されます。

           java-web-start-enabled
               アプリケーション・クライアント・モジュールで、Java Web
               Startのアクセスを許可するかを指定します。デフォルトはtrueです。

           compatibility
               アプリケーションでのJAR表示要件について、下位互換性のあるGlassFish
               Serverリリースを指定します。唯一の許可値はv2であり、Sun
               GlassFish Enterprise Serverバージョン2、またはSun Java System
               Application Serverバージョン9.1または9.1.1を参照します。Java EE
               6プラットフォームの仕様は、EARファイル内の様々なモジュールでJARファイルを表示できるJava
               EE
               5の仕様に比べて要件が厳しくなっています。特に、アプリケーション・クライアントは、標準Java
               SEメカニズム(拡張子など)またはJava EE
               library-directoryメカニズムを使用した参照が行われない限り、EJB
               JARファイルまたはEARファイル内の他のJARファイルにアクセスできません。このプロパティをv2に設定すると、これらのJava
               EE 6制限が解除されます。

           keepSessions={false|true}
               --keepstateオプションに置き換えられます。

               --forceオプションをtrueに設定すると、このプロパティを使用して、再デプロイされているアプリケーションのアクティブなセッションを保持し、再デプロイメントが完了したときに復元するかを指定できます。WebコンテナのHTTPセッションに適用されます。デフォルトはfalseです。

               false
                   アプリケーションのアクティブなセッションは、保持および復元さ

               true
                   アプリケーションのアクティブなセッションは、保持および復元されます。

                   アプリケーションのアクティブなセッションの保持または復元に失敗した場合、再デプロイメントが完了したときにど

                   アクティブなセッションを保持するために、GlassFish
                   Serverはセッションを直列化し、メモリーに保存します。セッションを復元するために、新たに再デプロイされたアプリケーションのクラス・ローダーは以前に保存されたセッションを直列化復元します。

            preserveAppScopedResources
               trueに設定すると、アプリケーション・スコープのリソースが保持され、再デプロイメント中に復元されます。デフォルトはfalseです。

           使用可能なその他のプロパティは、再デプロイされているコンポーネントの実装で決まります。

オペランド
       file_archive|filepath
           デプロイするアプリケーションが含まれているアーカイブへのパス。このパスは、相対パスでも絶対パスでもかまいません。

           アーカイブは、次のいずれかの形式にできます:

           ·   アーカイブ・ファイル(例: /export/JEE_apps/hello.war)。

               --uploadオプションをtrueに設定すると、これはローカル・クライアント・マシンでデプロイ可能なファイルのパスになります。--uploadオプションをfalseに設定すると、これはサーバー・マシン上のファイルのパスになります。

           ·   展開形式のデプロイ可能なアーカイブが格納されているディレクトリ。これは、サーバー・マシン上のディレクトリのパスになります。

               ディレクトリを指定した場合は、--uploadオプションが無視されます。

例
       例 1, エンタープライズ・アプリケーションのデプロイ
           この例では、Cart.earファイルにパッケージ化されたエンタープライズ・アプリケーションを、デフォルトのサーバー・インスタンスserverにデプロイします。異なるサーバー・インスタンスまたはクラスタにデプロイする場合は、--targetオプションを使用できます。

               asadmin> deploy Cart.ear
               Application deployed successfully with name Cart.
               Command deploy executed successfully

       例 2,
       デフォルトのコンテキスト・ルートを使用したWebアプリケーションのデプロイ
           この例では、hello.warファイルのWebアプリケーションを、デフォルトのサーバー・インスタンスserverにデプロイします。異なるサーバー・インスタンスまたはクラスタにデプロイする場合は、--targetオプションを使用できます。

               asadmin> deploy hello.war
               Application deployed successfully with name hello.
               Command deploy executed successfully

       例 3,
       特定のコンテキスト・ルートを使用したWebアプリケーションの強制的デプロイ
           この例では、hello.warファイルのWebアプリケーションを強制的にデプロイします。デプロイされたWebアプリケーションのコンテキスト・ルートは、greetingsです。アプリケーションがすでにデプロイ済の場合は、再デプロイされます。

               asadmin> deploy --force=true --contextroot greetings hello.war
               Application deployed successfully with name hello.
               Command deploy executed successfully

       例 4, エンタープライズBeanのデプロイ
           この例では、CMPを使用するEJB仕様(エンタープライズBean)に基づいてコンポーネントをデプロイし、Beanが使用するデータベース・テーブルを作成します。

           この例は--targetオプションを使用しています。この例のターゲットは、既存のクラスタであるcluster1です。

               asadmin> deploy --createtables=true --target cluster1 EmployeeEJB.jar
               Application deployed successfully with name EmployeeEJB.
               Command deploy executed successfully

       例 5, コネクタ・モジュールのデプロイ
           この例では、RARファイルにパッケージ化されたコネクタ・モジュールをデプロイします。

           この例は--targetオプションを使用しています。この例のターゲットは、クラスタに属さない既存のスタンドアロン・サーバー・インスタンスです。

               asadmin> deploy --target myinstance jdbcra.rar
               Application deployed successfully with name jdbcra.
               Command deploy executed successfully

終了ステータス
       0
           サブコマンドは正常に実行されました

       1
           サブコマンドの実行時にエラーが発生しました

関連項目
       redeploy(1), list-components(1), undeploy(1)

       asadmin(1M)

       Oracle GlassFish Serverア

                                2010年12月23日                       DEPLOY(1)
