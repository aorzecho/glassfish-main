CREATE-LIFECYCLE-M(1)                                    CREATE-LIFECYCLE-M(1)

名前
       create-lifecycle-module - ライフサイクル・モジュールを作成します

概要
           create-lifecycle-module [--help] --classname classname
            [--enabled={true|false}] [--target target]
            [--classpath classpath] [--loadorder loadorder]
            [--failurefatal={false|true} ] [--description description]
            [--property (name=value)[:name=value]*]
            module_name

説明
       create-lifecycle-moduleサブコマンドは、ライフサイクル・モジュールを作成します。ライフサイクル・モジュールによって、サーバーのライフサイクルの特定のステージで短期または長期のJavaベースのタスクを実行する手段が提供されます。このサブコマンドは、リモート・モードでのみサポートされています。

オプション
       --help, -?
           サブコマンドに関するヘルプ・テキストが表示されます。

       --classname
           起動クラスの完全修飾名です。

       --target
           ライフサイクル・モジュールが作成される場所を示します。有効な値は次のとおりです:

           ·   server-
               ライフサイクル・モジュールを作成するターゲットとしてデフォルトのサーバー・インスタンスを指定します。serverは、デフォルトのサーバー・インスタンスの名前で、このオプションのデフォルト値です。

           ·   cluster_name-
               ライフサイクル・モジュールを作成するターゲットとして特定のクラスタを指定します。

           ·   instance_name-
               ライフサイクル・モジュールを作成するターゲットとして特定のスタンドアロン・サーバー・インスタンスを指定します。

       --classpath
           このオプションでは、ライフサイクル・モジュールの位置を指定します。標準のクラスパスの形式を使用して、コロン(Unix)またはセミコロン(Windows)で区切ってJARファイルとディレクトリを指定します。参照されたJARファイルとディレクトリは、サーバー・インスタンスにアップロードされません。

       --loadorder
           このオプションに整数値を設定すると、デプロイされたライフサイクル・モジュールがサーバーの起動時にロードされる順序を強制的に指定できます。値の小さいモジュールが先にロードされます。複数のライフサイクル・モジュールのロード順序に同じ値を指定した場合、順序は指定されません。デフォルトはInteger.MAX_VALUEで、ライフサイクル・モジュールが最後にロードされます。

       --failurefatal
           このオプションは、ライフサイクル・モジュールが正常にロードされなかった場合のシステムの動作を指定します。このオプションがtrueに設定されている場合、このモジュールが正常にロードされないとサーバーの起動は中止されます。デフォルト値はfalseです。

       --enabled
           このオプションは、ライフサイクル・モジュールが実行時に使用可能かどうかを指定します。デフォルト値はtrueです。

       --description
           ライフサイクル・モジュールの説明のテキストです。

       --property
           ライフサイクル・モジュールの構成に使用される名前と値のペアが格納されるオプションの属性です。

オペランド
       module_name
           このオペランドは、デプロイされたサーバー・ライフサイクル・イベント・リスナー・モジュールの一意の識別子です。

例
       例 1, ライフサイクル・モジュールの作成
           次の例では、customSetupという名前のライフサイクル・モジュールを作成します。

               asadmin> create-lifecycle-module --classname "com.acme.CustomSetup"
               --classpath "/export/customSetup" --loadorder 1 --failurefatal=true
               --description "this is a sample customSetup"
               --property rmi="Server\=acme1\:7070":timeout=30 customSetup
               Command create-lifecycle-module executed successfully
           propertyオプションにあるエスケープ文字\は、等号(=)とコロン(:)がrmiプロパティの値の一部であることを示すために使用されています。

終了ステータス
       0
           コマンドは正常に実行されました

       1
           コマンドの実行時にエラーが発生しました

関連項目
       delete-lifecycle-module(1), list-lifecycle-modules(1)

       asadmin(1M)

       Oracle GlassFish
       Serverア

                                2010年11月18日           CREATE-LIFECYCLE-M(1)
