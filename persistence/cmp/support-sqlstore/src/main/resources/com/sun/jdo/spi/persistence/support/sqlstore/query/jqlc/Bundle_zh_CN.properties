#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

# resource bundle for runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 79.
# 
# This file is divided into following sections. 
# 1. main compiler class
# 2. error message helper class
# 3. syntax error messages
# 4. semantic error messages
# 5. optimizer
# 6. code generation
# 7. Miscellaneous
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of appropriate section.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered 
#    message in a section + 1.
# 4. Please do not change the message ID for existing messages. These 
#    numbers are potentially mapped to more explanation about the message for 
#    the end user.
#

##############################################################################
#<main compiler class>
# Message ID Range: JDO79000 - JDO79099
#############################################################################

jqlc.jqlc.generic.nocandidateclass=JDO79000: \u7f3a\u5c11\u5019\u9009\u7c7b\u89c4\u8303\u3002
jqlc.jqlc.checkcandidates.memorycollection=JDO79001: \u4e0d\u652f\u6301\u5bf9\u975e extent \u96c6\u5408\u7684\u67e5\u8be2\u3002
jqlc.jqlc.checkcandidates.mismatch=JDO79002: \u5019\u9009\u96c6\u5408\u4e0e\u5019\u9009\u7c7b\u201c{0}\u201d\u4e0d\u5339\u914d\u3002
# {0} - name of the compiler pass
LOG_JQLCStartPass=JDO79003: JQLC \u542f\u52a8 {0}
# {0} - name of the compiler pass
LOG_JQLCDumpTree=JDO79004: JQLC \u8f6c\u50a8\u6811 {0}
LOG_JQLCReuseRetrieveDesc=JDO79005: JQLC \u91cd\u590d\u4f7f\u7528\u7f13\u5b58\u7684 RetrieveDesc

#############################################################################
#<error message helper class>
#                  it is the last arg for each of them that contains the 
#                  actual message.
#############################################################################
jqlc.errormsg.generic.msg={0}\uff1a{1}
jqlc.errormsg.generic.msgcolumn={0} \u5217({1})\uff1a{2}
jqlc.errormsg.generic.msglinecolumn={0} \u884c({1}) \u5217({2})\uff1a{3}

#############################################################################
#<syntax error messages>
# Message ID Range: JDO79100 - JDO79199
#############################################################################

jqlc.parser.syntaxerror=JDO79100: \u8bed\u6cd5\u9519\u8bef\u3002
jqlc.parser.syntaxerrorattoken=JDO79101: \u5728\u201c{0}\u201d\u5904\u6709\u8bed\u6cd5\u9519\u8bef\u3002
jqlc.parser.unexpectedtoken=JDO79102: \u8bed\u6cd5\u9519\u8bef: \u610f\u5916\u4ee4\u724c\u201c{0}\u201d\u3002
jqlc.parser.unexpectedchar=JDO76103: \u8bed\u6cd5\u9519\u8bef: \u610f\u5916\u5b57\u7b26\u201c{0}\u201d\u3002
jqlc.parser.expectedfoundchar=JDO79104: \u8bed\u6cd5\u9519\u8bef: \u9700\u8981\u5b57\u7b26\u201c{0}\u201d, \u5374\u627e\u5230\u201c{1}\u201d\u3002
jqlc.parser.unexpectedEOF=JDO79105: \u8bed\u6cd5\u9519\u8bef\u5bfc\u81f4\u6587\u672c\u610f\u5916\u7ed3\u675f\u3002

#############################################################################
#<semantic error messages>
# Message ID Range: JDO7109200 - JDO79399
#############################################################################

# semantic error messages (unsupported operations)

jqlc.semantic.analysebitwiseexpr.exclusiveorop=JDO79200: \u4e0d\u652f\u6301\u4e92\u65a5\u6216\u8fd0\u7b97\u7b26 ^\u3002
jqlc.semantic.analysebitwiseexpr.integerbitwiseop=JDO79201: \u4e0d\u652f\u6301\u6574\u6570\u6309\u4f4d\u8fd0\u7b97\u7b26 {0}\u3002
jqlc.semantic.analysecollectioncall.unsupportedcollectionexpr=JDO79202: \u4e0d\u652f\u6301\u96c6\u5408\u8868\u8fbe\u5f0f\u201c{0}\u201d\u3002
jqlc.semantic.analysecollectioncall.nonvariable=JDO79203: \u9700\u8981\u53d8\u91cf - \u4e0d\u652f\u6301\u975e\u53d8\u91cf\uff08\u5305\u542b\u53c2\u6570\uff09\u3002
jqlc.semantic.generic.unsupportedconstraintop=JDO79204: \u53d8\u91cf\u7ea6\u675f\u5b50\u53e5\u4e0d\u652f\u6301\u64cd\u4f5c\u201c{0}\u201d\u3002
jqlc.semantic.candidateclass.nonpc=JDO79205: \u7c7b\u201c{0}\u201d\u4e0d\u5177\u6709\u6301\u4e45\u6027\u3002\u67e5\u8be2\u4e0d\u652f\u6301\u4e0d\u5177\u6709\u6301\u4e45\u6027\u7684\u5019\u9009\u7c7b\u3002
jqlc.semantic.checkvalidorderingexpr.invalidordering=JDO79206: \u6392\u5e8f\u89c4\u8303\u4e2d\u4e0d\u652f\u6301\u8868\u8fbe\u5f0f\u201c{0}\u201d\u3002
jqlc.semantic.checkvalidresultexpr.invalidresult=JDO79207: \u7ed3\u679c\u89c4\u8303\u4e2d\u4e0d\u652f\u6301\u8868\u8fbe\u5f0f\u201c{0}\u201d\u3002

# semantic error messages (user errors)

jqlc.semantic.analysecollectioncall.typemismatch=JDO79208: \u96c6\u5408\u5143\u7d20\u7c7b\u578b\u201c{0}\u201d\u4e0e\u53d8\u91cf\u7c7b\u578b\u201c{1}\u201d\u4e0d\u517c\u5bb9\u3002
jqlc.semantic.analysecollectioncall.relationshipexpected=JDO79209: \u5173\u7cfb\u5b57\u6bb5\u9700\u8981\u201c{0}\u201d\u3002
jqlc.semantic.analysedotexpr.classexprexpected=JDO79210: \u9700\u8981\u7c7b\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u3002
jqlc.semantic.analysefieldaccess.nonperistentfield=JDO79211: \u65e0\u6cd5\u8bbf\u95ee\u5177\u6709\u6301\u4e45\u6027\u7684\u7c7b\u201c{1}\u201d\u7684\u975e\u6301\u4e45\u6027\u5b57\u6bb5\u201c{0}\u201d\u3002
jqlc.semantic.analysefieldaccess.nonpublicfield=JDO79212: \u65e0\u6cd5\u8bbf\u95ee\u4e0d\u5177\u6709\u6301\u4e45\u6027\u7684\u7c7b\u201c{1}\u201d\u7684\u975e\u516c\u7528\u5b57\u6bb5\u201c{0}\u201d\u3002
jqlc.semantic.analysestaticfieldaccess.staticreference=JDO79213: \u65e0\u6cd5\u5bf9\u7c7b\u201c{1}\u201d\u7684\u975e\u9759\u6001\u53d8\u91cf\u201c{0}\u201d\u8fdb\u884c\u9759\u6001\u5f15\u7528\u3002
jqlc.semantic.analysestaticfieldaccess.nonpublicfield=JDO79214: \u65e0\u6cd5\u8bbf\u95ee\u7c7b\u201c{1}\u201d\u7684\u975e\u516c\u7528\u9759\u6001\u5b57\u6bb5\u201c{0}\u201d\u3002
jqlc.semantic.analyserelationalexpr.notorderable=JDO79215: {1} \u7684\u64cd\u4f5c\u6570\u7c7b\u578b\u201c{0}\u201d\u4e0d\u5408\u9002\u3002
jqlc.semantic.expression.undefined=JDO79216: \u672a\u5b9a\u4e49\u8868\u8fbe\u5f0f\u201c{0}\u201d\u3002
jqlc.semantic.filter.booleanexpected=JDO79217: \u9700\u8981\u5e03\u5c14\u8868\u8fbe\u5f0f, \u8fc7\u6ee4\u5668\u8868\u8fbe\u5f0f\u5177\u6709\u7c7b\u578b\u201c{0}\u201d\u3002
jqlc.semantic.generic.alreadydeclared=JDO79218: \u201c{0}\u201d\u5df2\u58f0\u660e\u4e3a {1}\u3002
jqlc.semantic.generic.arguments.numbermismatch=JDO79219: \u53d8\u91cf\u6570\u76ee\u9519\u8bef\u3002
jqlc.semantic.generic.arguments.typemismatch=JDO79220: \u5b9e\u9645\u53c2\u6570\u7c7b\u578b\u4e0d\u517c\u5bb9\u3002\u65e0\u6cd5\u5c06\u201c{0}\u201d\u8f6c\u6362\u4e3a\u201c{1}\u201d\u3002
jqlc.semantic.generic.arguments.invalid=JDO79221: \u201c{0}\u201d\u7684\u53d8\u91cf\u65e0\u6548\u3002
jqlc.semantic.generic.invalidmethodcall=JDO79222: \u65b9\u6cd5\u8c03\u7528\u65e0\u6548\u3002
jqlc.semantic.generic.unknownfield=JDO79223: \u672a\u5b9a\u4e49\u7c7b\u201c{1}\u201d\u7684\u5b57\u6bb5\u201c{0}\u201d\u3002
jqlc.semantic.generic.unknowntype=JDO79224: \u672a\u77e5\u7c7b\u578b\u201c{0}\u201d\u3002
jqlc.semantic.identifier.undefined=JDO79225: \u672a\u5b9a\u4e49\u6807\u8bc6\u7b26\u201c{0}\u201d\u3002
jqlc.semantic.primary.invalidcast=JDO79226: \u65e0\u6cd5\u5c06\u8868\u8fbe\u5f0f\u4ece\u7c7b\u578b\u201c{0}\u201d\u5f3a\u5236\u8f6c\u6362\u4e3a\u7c7b\u578b\u201c{1}\u201d\u3002
jqlc.semantic.type.notype=JDO79227: \u9700\u8981\u7c7b\u578b, \u201c{0}\u201d\u88ab\u5b9a\u4e49\u4e3a {1}\u3002
jqlc.semantic.analyseorderingexpression.notorderable=JDO79228: \u6392\u5e8f\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u201c{0}\u201d\u4e0d\u5408\u9002\u3002
jqlc.semantic.checkvalidresultexpr.invalidavgsumexpr=JDO79229: \u201c{1}\u201d\u805a\u96c6\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u201c{0}\u201d\u4e0d\u662f\u6570\u5b57\u6216\u5b57\u7b26\u7c7b\u578b\u3002
jqlc.semantic.checkvalidresultexpr.invalidminmaxexpr=JDO79230: \u201c{1}\u201d\u805a\u96c6\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u201c{0}\u201d\u4e0d\u5408\u9002\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresultfield=JDO79231: distinct \u7ed3\u679c\u5b57\u6bb5\u8868\u8fbe\u5f0f\u201c{0}\u201d\u4e0e\u6392\u5e8f\u8868\u8fbe\u5f0f\u201c{1}\u201d\u4e0d\u517c\u5bb9\u3002\u5b83\u4eec\u5fc5\u987b\u4e3a\u76f8\u540c\u5b57\u6bb5\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresult=JDO79232: \u7ed3\u679c\u8868\u8fbe\u5f0f\u201cdistinct {0}\u201d\u4e0e\u6392\u5e8f\u8868\u8fbe\u5f0f\u201c{1}\u201d\u4e0d\u517c\u5bb9\u3002\u5b83\u4eec\u5fc5\u987b\u4e3a\u540c\u4e00\u7c7b\u4e2d\u7684\u5b57\u6bb5, \u5bf9\u8be5\u7c7b\u4f7f\u7528\u76f8\u540c\u7684\u5bfc\u822a\u8868\u8fbe\u5f0f\u3002

# query parameter table

jqlc.parametertable.checkunboundparams.unboundparam=JDO79233: \u67e5\u8be2\u53c2\u6570\u201c{0}\u201d\u65e0\u754c\u9650\u3002
jqlc.parametertable.definevaluebyname.undefinedparam=JDO79234: \u672a\u5b9a\u4e49\u67e5\u8be2\u53c2\u6570\u201c{0}\u201d\u3002
jqlc.parametertable.definevaluebyindex.wrongnumberofargs=JDO79235: \u53d8\u91cf\u6570\u76ee\u9519\u8bef\u3002
jqlc.parametertable.definevaluebyindex.typemismatch=JDO79236: \u5b9e\u9645\u53c2\u6570\u7c7b\u578b\u4e0d\u517c\u5bb9\u3002\u65e0\u6cd5\u5c06\u201c{0}\u201d\u8f6c\u6362\u4e3a\u201c{1}\u201d\u3002

#############################################################################
#<optimizer>
# Message ID Range: JDO79400 - JDO79499
#############################################################################

jqlc.optimizer.staticfieldaccess.illegal=JDO79400: \u65e0\u6cd5\u8bbf\u95ee\u7c7b\u201c{1}\u201d\u7684\u9759\u6001\u5b57\u6bb5\u201c{0}\u201d\u3002
jqlc.optimizer.literal.invalid=JDO79401: {0} \u7684\u5b57\u9762\u503c\u201c{1}\u201d\u65e0\u6548\u3002

#############################################################################
#<code generation>
# Message ID Range: JDO79500 - JDO79599
#############################################################################

jqlc.codegeneration.fieldaccess.illegal=JDO79500: \u65e0\u6cd5\u8bbf\u95ee\u5bf9\u8c61\u201c{1}\u201d\u7684\u5b57\u6bb5\u201c{0}\u201d\u3002
jqlc.codegeneration.collectioncomparison.nonnull=JDO79501: \u4e0d\u652f\u6301\u96c6\u5408\u4e0e\u975e\u7a7a\u503c\u8fdb\u884c\u6bd4\u8f83\u3002
jqlc.codegeneration.generic.unsupportedop=JDO79502: \u4e0d\u652f\u6301\u64cd\u4f5c\u201c{0}\u201d
jqlc.codegeneration.substring.beginnegative=JDO79503: substring \u65b9\u6cd5\u7684\u5f00\u59cb\u7d22\u5f15\u201c{0}\u201d\u4e3a\u8d1f\u503c\u3002
jqlc.codegeneration.substring.beginlargerend=JDO79504: substring \u65b9\u6cd5\u7684\u5f00\u59cb\u7d22\u5f15\u201c{0}\u201d\u5927\u4e8e\u7ed3\u675f\u7d22\u5f15\u201c{1}\u201d\u3002
jqlc.codegeneration.resultExpr.missingpkfields=JDO79505: \u4e0d\u652f\u6301\u7684 COUNT \u8868\u8fbe\u5f0f\u3002\u8868\u8fbe\u5f0f\u7c7b\u578b\u201c{0}\u201d\u4e3a\u5177\u6709\u6301\u4e45\u6027\u7684\u4e0d\u5e26\u4e3b\u952e\u5b57\u6bb5\u7684\u7c7b\u3002

#############################################################################
#<Miscellaneous>
# Message ID Range: JDO79600 - JDO79699
#############################################################################
# {0} - RetrieveDesc info
LOG_JQLCDumpRD=JDO79600: JQLC \u8f6c\u50a8 RetrieveDesc {0}

# variable table

jqlc.variabletable.markconstraint.multiple=JDO79601: \u591a\u4e2a\u53d8\u91cf\u201c{0}\u201d\u7684\u7ea6\u675f\u3002
jqlc.variabletable.checkconstraint.unused=JDO79602: \u53d8\u91cf\u201c{0}\u201d\u5df2\u5b9a\u4e49, \u4f46\u672a\u4f7f\u7528\u3002
jqlc.variabletable.checkconstraint.cycle=JDO79603: \u4e0d\u652f\u6301\u7528\u4e8e\u53d8\u91cf\u201c{0}\u201d\u7684\u5faa\u73af\u7ea6\u675f\u5b9a\u4e49\u3002
jqlc.variabletable.merge.different=JDO79604: \u4e0d\u540c\u7ea6\u675f\u7528\u4e8e\u540c\u4e00\u53d8\u91cf\u201c{0}\u201d\u3002


###############################################################################
# <NOI18N: These messages are used for JDOFatalInternalException. These are not
# for end user. There is no message ID.>
###############################################################################
#
# <NOI18N>
#
jqlc.jqlc.checkcandidates.nullpc=Persistence capable class of extent collection is null.

jqlc.parser.invalidunicodestr=JQLLexer.UNICODE_STR 

jqlc.parametertable.getvaluebyname.undefined=ParameterTable.getValueByName: undefined parameter {0}.
jqlc.parametertable.getvaluebyindex.wrongindex=ParameterTable.getValueByIndex: wrong index {0}.
jqlc.parametertable.definevaluebyindex.wrongindex=ParameterTable.defineValueByIndex: wrong index {0}.

jqlc.semantic.checkcandidateclass.unknowntype=Semantic.checkCandidateClass: unknown type {0}.
jqlc.semantic.analysedefinedidentifier.illegalident=Semantic.analyseDefinedIdentifier: illegal identifier definition {0}.
jqlc.semantic.getcollectionfield.missingchildren=Semantic.getCollectionField: invalid node structure children missing.

jqlc.optimizer.checkbinaryplusop.invalidtype=Optimizer.checkBinaryPlusOp: invalid type {0}.
jqlc.optimizer.checkbinaryminusop.invalidtype=Optimizer.checkBinaryMinusOp: invalid type {0}.
jqlc.optimizer.checkmultiplicationop.invalidtype=Optimizer.checkMultiplicationOp: invalid type {0}.
jqlc.optimizer.checkdivisionop.invalidtype=Optimizer.checkDivisionOp: invalid type {0}.
jqlc.optimizer.checkmodop.invalidtype=Optimizer.checkModOp: invalid type {0}.
jqlc.optimizer.checkunaryminusop.invalidtype=Optimizer.checkUnaryMinusOp: invalid type {0}.
jqlc.optimizer.getbigdecimalvalue.notnumber=Optimizer.getBigDecimalValue: expected number value {0}.
jqlc.optimizer.getbigintegervalue.notnumber=Optimizer.getBigIntegerValue: expected number value {0}.
jqlc.optimizer.isempty.requirecollection=Optimizer.isEmpty: requires collection value.

jqlc.codegeneration.generatesimplefieldvaluecomparison.invalidvalue=CodeGeneration.generateSimpleFieldValueComparison: invalid null value in relational operation.
jqlc.codegeneration.generateparametervaluecomparison.invalidvalue=CodeGeneration.generateParameterValueComparison: invalid null value in relational operation.
jqlc.codegeneration.getkeyfieldscomparisonbooleanop.invalidobj=CodeGeneration.getKeyFieldsComparisonBooleanOp: invalid object comparison operation {0}.
jqlc.codegeneration.filter.nonbooleanvalue=CodeGeneration.filter: invalid non boolean value {0}.
jqlc.codegeneration.primary.null=CodeGeneration.primary: invalid null value.

jqlc.variabletable.markused.varnotfound=VariableTable.markUsed variable {0} not found.
jqlc.variabletable.markused.multidep=VariableTable.markUsed multiple dependencies for variable {0} old: {1}, new: {2}.
jqlc.variabletable.markconstraint.varnotfound=VariableTable.markConstraint variable {0} not found.

jqlc.jdoqlparameterdeclarationparser.next.wrongtoken=ParameterDeclarationHelper.ParameterTypeIterator.next: wrong token type {0} expected PARAMETER_DEF node.

jqlc.queryvaluefetcher.getvalue.invalidparam=Invalid parameter index {0} parameter array has length {1}.
