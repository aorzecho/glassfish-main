#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

# resource bundle for runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 79.
# 
# This file is divided into following sections. 
# 1. main compiler class
# 2. error message helper class
# 3. syntax error messages
# 4. semantic error messages
# 5. optimizer
# 6. code generation
# 7. Miscellaneous
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of appropriate section.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered 
#    message in a section + 1.
# 4. Please do not change the message ID for existing messages. These 
#    numbers are potentially mapped to more explanation about the message for 
#    the end user.
#

##############################################################################
#<main compiler class>
# Message ID Range: JDO79000 - JDO79099
#############################################################################

jqlc.jqlc.generic.nocandidateclass=JDO79000: \u5019\u88dc\u30af\u30e9\u30b9\u306e\u4ed5\u69d8\u304c\u3042\u308a\u307e\u305b\u3093\u3002
jqlc.jqlc.checkcandidates.memorycollection=JDO79001: \u7bc4\u56f2\u306e\u306a\u3044\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3078\u306e\u30af\u30a8\u30ea\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
jqlc.jqlc.checkcandidates.mismatch=JDO79002: \u5019\u88dc\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u5019\u88dc\u30af\u30e9\u30b9 ''{0}'' \u3068\u4e00\u81f4\u3057\u307e\u305b\u3093\u3002
# {0} - name of the compiler pass
LOG_JQLCStartPass=JDO79003: JQLC \u306f {0} \u3092\u958b\u59cb\u3057\u307e\u3059
# {0} - name of the compiler pass
LOG_JQLCDumpTree=JDO79004: JQLC \u306f\u30c4\u30ea\u30fc {0} \u3092\u30c0\u30f3\u30d7\u3057\u307e\u3059
LOG_JQLCReuseRetrieveDesc=JDO79005: JQLC \u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u305f RetrieveDesc \u3092\u518d\u5229\u7528\u3057\u307e\u3059

#############################################################################
#<error message helper class>
#                  it is the last arg for each of them that contains the 
#                  actual message.
#############################################################################
jqlc.errormsg.generic.msg={0}: {1}
jqlc.errormsg.generic.msgcolumn={0} \u30ab\u30e9\u30e0({1}): {2}
jqlc.errormsg.generic.msglinecolumn={0} \u884c({1}) \u30ab\u30e9\u30e0({2}): {3}

#############################################################################
#<syntax error messages>
# Message ID Range: JDO79100 - JDO79199
#############################################################################

jqlc.parser.syntaxerror=JDO79100: \u69cb\u6587\u30a8\u30e9\u30fc\u304c\u3042\u308a\u307e\u3059\u3002
jqlc.parser.syntaxerrorattoken=JDO79101: ''{0}'' \u306b\u69cb\u6587\u30a8\u30e9\u30fc\u304c\u3042\u308a\u307e\u3059\u3002
jqlc.parser.unexpectedtoken=JDO79102: \u69cb\u6587\u30a8\u30e9\u30fc\u3002\u4e88\u671f\u305b\u306c\u30c8\u30fc\u30af\u30f3 {0} \u304c\u3042\u308a\u307e\u3059\u3002
jqlc.parser.unexpectedchar=JDO79103: \u69cb\u6587\u30a8\u30e9\u30fc\u3002\u4e88\u671f\u305b\u306c char ''{0}'' \u304c\u3042\u308a\u307e\u3059\u3002
jqlc.parser.expectedfoundchar=JDO79104: \u69cb\u6587\u30a8\u30e9\u30fc\u3002''{1}'' \u3067\u4e88\u671f\u305b\u306c char ''{0}'' \u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002
jqlc.parser.unexpectedEOF=JDO79105: \u69cb\u6587\u30a8\u30e9\u30fc\u3002\u30c6\u30ad\u30b9\u30c8\u306e\u4e88\u671f\u305b\u306c\u7d42\u4e86\u3067\u3059\u3002

#############################################################################
#<semantic error messages>
# Message ID Range: JDO7109200 - JDO79399
#############################################################################

# semantic error messages (unsupported operations)

jqlc.semantic.analysebitwiseexpr.exclusiveorop=JDO79200: \u6392\u4ed6\u7684\u3067\u3059\u3001\u307e\u305f\u306f\u6f14\u7b97\u5b50 ^ \u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
jqlc.semantic.analysebitwiseexpr.integerbitwiseop=JDO79201: \u6574\u6570\u30d3\u30c3\u30c8\u5358\u4f4d\u6f14\u7b97\u5b50 {0} \u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
jqlc.semantic.analysecollectioncall.unsupportedcollectionexpr=JDO79202: \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u5f0f ''{0}'' \u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
jqlc.semantic.analysecollectioncall.nonvariable=JDO79203: \u5909\u6570\u304c\u60f3\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5909\u6570\u4ee5\u5916\u304c\u3001\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u306a\u3044\u5f15\u6570\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002
jqlc.semantic.generic.unsupportedconstraintop=JDO79204: \u5909\u6570\u5236\u7d04\u53e5\u3067\u306f\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 ''{0}'' \u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
jqlc.semantic.candidateclass.nonpc=JDO79205: \u30af\u30e9\u30b9 ''{0}'' \u306f\u6301\u7d9a\u53ef\u80fd\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30af\u30a8\u30ea\u3067\u306f\u3001\u6301\u7d9a\u4e0d\u53ef\u5019\u88dc\u30af\u30e9\u30b9\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
jqlc.semantic.checkvalidorderingexpr.invalidordering=JDO79206: \u9806\u5e8f\u306e\u4ed5\u69d8\u306b\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u306a\u3044\u5f0f ''{0}'' \u304c\u3042\u308a\u307e\u3059\u3002
jqlc.semantic.checkvalidresultexpr.invalidresult=JDO79207: \u7d50\u679c\u306e\u4ed5\u69d8\u306b\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u306a\u3044\u5f0f ''{0}'' \u304c\u3042\u308a\u307e\u3059\u3002

# semantic error messages (user errors)

jqlc.semantic.analysecollectioncall.typemismatch=JDO79208: \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u8981\u7d20\u578b ''{0}'' \u3068\u5909\u6570\u578b ''{1}'' \u306e\u9593\u306b\u306f\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002
jqlc.semantic.analysecollectioncall.relationshipexpected=JDO79209: \u60f3\u5b9a\u3055\u308c\u308b\u74b0\u5883\u30d5\u30a3\u30fc\u30eb\u30c9\u306f ''{0}'' \u3067\u3059\u3002
jqlc.semantic.analysedotexpr.classexprexpected=JDO79210: \u60f3\u5b9a\u3055\u308c\u308b\u30af\u30e9\u30b9\u578b\u306e\u5f0f\u3002
jqlc.semantic.analysefieldaccess.nonperistentfield=JDO79211: \u6301\u7d9a\u53ef\u80fd\u30af\u30e9\u30b9 ''{1}'' \u306e\u975e\u6301\u7d9a\u30d5\u30a3\u30fc\u30eb\u30c9 ''{0}'' \u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u305b\u3093\u3002
jqlc.semantic.analysefieldaccess.nonpublicfield=JDO79212: \u975e\u6301\u7d9a\u53ef\u80fd\u30af\u30e9\u30b9 ''{1}'' \u306e public \u4ee5\u5916\u306e\u30d5\u30a3\u30fc\u30eb\u30c9 ''{0}'' \u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u305b\u3093\u3002
jqlc.semantic.analysestaticfieldaccess.staticreference=JDO79213: \u30af\u30e9\u30b9 ''{1}'' \u306e\u9759\u7684\u3067\u306a\u3044\u5909\u6570 ''{0}'' \u306b\u5bfe\u3057\u3066\u9759\u7684\u306a\u53c2\u7167\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
jqlc.semantic.analysestaticfieldaccess.nonpublicfield=JDO79214: \u30af\u30e9\u30b9 ''{1}'' \u306e public \u4ee5\u5916\u306e\u9759\u7684\u306a\u30d5\u30a3\u30fc\u30eb\u30c9 ''{0}'' \u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u305b\u3093\u3002
jqlc.semantic.analyserelationalexpr.notorderable=JDO79215: {1} \u306e\u30aa\u30da\u30e9\u30f3\u30c9\u578b ''{0}'' \u3092\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
jqlc.semantic.expression.undefined=JDO79216: \u5f0f ''{0}'' \u306f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
jqlc.semantic.filter.booleanexpected=JDO79217: \u30d6\u30fc\u30eb\u5f0f\u304c\u60f3\u5b9a\u3055\u308c\u307e\u3059\u3002\u30d5\u30a3\u30eb\u30bf\u5f0f\u306e\u578b\u306f ''{0}'' \u3067\u3059\u3002
jqlc.semantic.generic.alreadydeclared=JDO79218: ''{0}'' \u306f\u3059\u3067\u306b {1} \u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002
jqlc.semantic.generic.arguments.numbermismatch=JDO79219: \u5f15\u6570\u306e\u6570\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002
jqlc.semantic.generic.arguments.typemismatch=JDO79220: \u5b9f\u969b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u578b\u306b\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002''{0}'' \u3092 {1} \u306b\u5909\u63db\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
jqlc.semantic.generic.arguments.invalid=JDO79221: ''{0}'' \u3067\u306f\u7121\u52b9\u306a\u5f15\u6570\u3067\u3059\u3002
jqlc.semantic.generic.invalidmethodcall=JDO79222: \u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u304c\u7121\u52b9\u3067\u3059\u3002
jqlc.semantic.generic.unknownfield=JDO79223: \u30af\u30e9\u30b9 ''{1}'' \u306b\u306f\u30d5\u30a3\u30fc\u30eb\u30c9 ''{0}'' \u306f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
jqlc.semantic.generic.unknowntype=JDO79224: \u4e0d\u660e\u306a\u578b ''{0}''\u3002
jqlc.semantic.identifier.undefined=JDO79225: \u672a\u5b9a\u7fa9\u306e\u8b58\u5225\u5b50 ''{0}''\u3002
jqlc.semantic.primary.invalidcast=JDO79226: \u578b ''{0}'' \u306e\u5f0f\u3092\u578b ''{1}'' \u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
jqlc.semantic.type.notype=JDO79227: \u578b\u304c\u60f3\u5b9a\u3055\u308c\u307e\u3059\u3002''{0}'' \u306f {1} \u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002
jqlc.semantic.analyseorderingexpression.notorderable=JDO79228: \u9806\u5e8f\u5f0f\u306e\u578b ''{0}'' \u3092\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
jqlc.semantic.checkvalidresultexpr.invalidavgsumexpr=JDO79229: ''{1}'' \u53ce\u96c6\u5f0f\u306e\u578b ''{0}'' \u304c number \u578b\u307e\u305f\u306f char \u578b\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002
jqlc.semantic.checkvalidresultexpr.invalidminmaxexpr=JDO79230: \u53ce\u96c6\u5f0f ''{1}'' \u306e\u578b ''{0}'' \u3092\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresultfield=JDO79231: distinct \u7d50\u679c\u30d5\u30a3\u30fc\u30eb\u30c9\u5f0f ''{0}'' \u3068 \u9806\u5e8f\u5f0f ''{1}'' \u306b\u306f\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u4e21\u8005\u306f\u540c\u3058\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresult=JDO79232: \u7d50\u679c\u5f0f\u300cdistinct {0}\u300d\u3068\u9806\u5e8f\u5f0f\u300c{1}\u300d\u306b\u306f\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u4e21\u8005\u306f\u3001\u30af\u30e9\u30b9\u3078\u306e\u540c\u3058\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u5f0f\u3092\u4f7f\u7528\u3059\u308b\u540c\u3058\u30af\u30e9\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002

# query parameter table

jqlc.parametertable.checkunboundparams.unboundparam=JDO79233: \u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf ''{0}'' \u306f\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
jqlc.parametertable.definevaluebyname.undefinedparam=JDO79234: \u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf ''{0}'' \u306f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
jqlc.parametertable.definevaluebyindex.wrongnumberofargs=JDO79235: \u5f15\u6570\u306e\u6570\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002
jqlc.parametertable.definevaluebyindex.typemismatch=JDO79236: \u5b9f\u969b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002''{0}'' \u3092 ''{1}'' \u306b\u5909\u63db\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002

#############################################################################
#<optimizer>
# Message ID Range: JDO79400 - JDO79499
#############################################################################

jqlc.optimizer.staticfieldaccess.illegal=JDO79400: \u30af\u30e9\u30b9 ''{1}'' \u306e\u9759\u7684\u306a\u30d5\u30a3\u30fc\u30eb\u30c9 ''{0}'' \u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u305b\u3093\u3002
jqlc.optimizer.literal.invalid=JDO79401: \u7121\u52b9\u306a ''{0}'' \u30ea\u30c6\u30e9\u30eb ''{1}''\u3002

#############################################################################
#<code generation>
# Message ID Range: JDO79500 - JDO79599
#############################################################################

jqlc.codegeneration.fieldaccess.illegal=JDO79500: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ''{1}'' \u306e\u30d5\u30a3\u30fc\u30eb\u30c9 ''{0}'' \u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u305b\u3093\u3002
jqlc.codegeneration.collectioncomparison.nonnull=JDO79501: \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068 Null \u4ee5\u5916\u306e\u5024\u306e\u6bd4\u8f03\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
jqlc.codegeneration.generic.unsupportedop=JDO79502: \u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 ''{0}'' \u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093
jqlc.codegeneration.substring.beginnegative=JDO79503: substring \u30e1\u30bd\u30c3\u30c9\u306e\u958b\u59cb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 ''{0}'' \u304c\u8ca0\u3067\u3059\u3002
jqlc.codegeneration.substring.beginlargerend=JDO79504: substring \u30e1\u30bd\u30c3\u30c9\u306e\u958b\u59cb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 ''{0}'' \u304c\u7d42\u4e86\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 ''{1}'' \u3088\u308a\u5927\u304d\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002
jqlc.codegeneration.resultExpr.missingpkfields=JDO79505: \u30b5\u30dd\u30fc\u30c8\u3055\u308c\u306a\u3044 COUNT \u5f0f\u3067\u3059\u3002\u5f0f\u306e\u578b ''{0}'' \u306f\u4e3b\u30ad\u30fc\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u305f\u306a\u3044\u6301\u7d9a\u53ef\u80fd\u30af\u30e9\u30b9\u3067\u3059\u3002

#############################################################################
#<Miscellaneous>
# Message ID Range: JDO79600 - JDO79699
#############################################################################
# {0} - RetrieveDesc info
LOG_JQLCDumpRD=JDO79600: JQLC dump RetrieveDesc {0}

# variable table

jqlc.variabletable.markconstraint.multiple=JDO79601: \u5909\u6570 ''{0}'' \u306b\u8907\u6570\u306e\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002
jqlc.variabletable.checkconstraint.unused=JDO79602: \u5909\u6570 ''{0}'' \u306f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
jqlc.variabletable.checkconstraint.cycle=JDO79603: \u5909\u6570 ''{0}'' \u306e\u5faa\u74b0\u5236\u7d04\u5b9a\u7fa9\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
jqlc.variabletable.merge.different=JDO79604: \u540c\u3058\u5909\u6570 ''{0}'' \u306e\u5236\u7d04\u304c\u7570\u306a\u308a\u307e\u3059\u3002


###############################################################################
# <NOI18N: These messages are used for JDOFatalInternalException. These are not
# for end user. There is no message ID.>
###############################################################################
#
# <NOI18N>
#
jqlc.jqlc.checkcandidates.nullpc=Persistence capable class of extent collection is null.

jqlc.parser.invalidunicodestr=JQLLexer.UNICODE_STR 

jqlc.parametertable.getvaluebyname.undefined=ParameterTable.getValueByName: undefined parameter {0}.
jqlc.parametertable.getvaluebyindex.wrongindex=ParameterTable.getValueByIndex: wrong index {0}.
jqlc.parametertable.definevaluebyindex.wrongindex=ParameterTable.defineValueByIndex: wrong index {0}.

jqlc.semantic.checkcandidateclass.unknowntype=Semantic.checkCandidateClass: unknown type {0}.
jqlc.semantic.analysedefinedidentifier.illegalident=Semantic.analyseDefinedIdentifier: illegal identifier definition {0}.
jqlc.semantic.getcollectionfield.missingchildren=Semantic.getCollectionField: invalid node structure children missing.

jqlc.optimizer.checkbinaryplusop.invalidtype=Optimizer.checkBinaryPlusOp: invalid type {0}.
jqlc.optimizer.checkbinaryminusop.invalidtype=Optimizer.checkBinaryMinusOp: invalid type {0}.
jqlc.optimizer.checkmultiplicationop.invalidtype=Optimizer.checkMultiplicationOp: invalid type {0}.
jqlc.optimizer.checkdivisionop.invalidtype=Optimizer.checkDivisionOp: invalid type {0}.
jqlc.optimizer.checkmodop.invalidtype=Optimizer.checkModOp: invalid type {0}.
jqlc.optimizer.checkunaryminusop.invalidtype=Optimizer.checkUnaryMinusOp: invalid type {0}.
jqlc.optimizer.getbigdecimalvalue.notnumber=Optimizer.getBigDecimalValue: expected number value {0}.
jqlc.optimizer.getbigintegervalue.notnumber=Optimizer.getBigIntegerValue: expected number value {0}.
jqlc.optimizer.isempty.requirecollection=Optimizer.isEmpty: requires collection value.

jqlc.codegeneration.generatesimplefieldvaluecomparison.invalidvalue=CodeGeneration.generateSimpleFieldValueComparison: invalid null value in relational operation.
jqlc.codegeneration.generateparametervaluecomparison.invalidvalue=CodeGeneration.generateParameterValueComparison: invalid null value in relational operation.
jqlc.codegeneration.getkeyfieldscomparisonbooleanop.invalidobj=CodeGeneration.getKeyFieldsComparisonBooleanOp: invalid object comparison operation {0}.
jqlc.codegeneration.filter.nonbooleanvalue=CodeGeneration.filter: invalid non boolean value {0}.
jqlc.codegeneration.primary.null=CodeGeneration.primary: invalid null value.

jqlc.variabletable.markused.varnotfound=VariableTable.markUsed variable {0} not found.
jqlc.variabletable.markused.multidep=VariableTable.markUsed multiple dependencies for variable {0} old: {1}, new: {2}.
jqlc.variabletable.markconstraint.varnotfound=VariableTable.markConstraint variable {0} not found.

jqlc.jdoqlparameterdeclarationparser.next.wrongtoken=ParameterDeclarationHelper.ParameterTypeIterator.next: wrong token type {0} expected PARAMETER_DEF node.

jqlc.queryvaluefetcher.getvalue.invalidparam=Invalid parameter index {0} parameter array has length {1}.
