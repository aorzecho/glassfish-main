#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

# Resource bundle for sqlstore runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# Please note that many package names and classnames have changed over time.
# Unfortunately, this file was not maintained to follow above convention.
# Please ignore if the package/class name does not match actual names as today.
#
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 76.
#
# This file is divided into the following sections:
# Under each section, messages that need not be I18Ned are separated under NOI18N. All other messages
# need to be numbered.
# 1. JDO:  PersistenceManagerFactory/PersistenceManager/ExtentCollection/LifeCycle
# 2. Model
# 3. StateManager
# 4. sql generator components: RetrieveDesc, ResultDesc plus all the files under generator subdir
# 5. SQLStoreManager
# 6. Connection/Connectionpool/Transaction/DBVendorType
# 7. EJB integration.
# 8. Generic messages.
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of appropriate section.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered
#    message in a section + 1.
# 4. Please do not change the message ID for existing messages. These
#    numbers are potentially mapped to more explanation about the message for
#    the end user.
#

####################################################################################################
# <All the source files under subdir impl (PersistenceManagerFactory/PersistenceManager etc.) >
# Message ID Range: JDO76000 - JDO76099
####################################################################################################
jdo.persistencemanagerfactoryimpl.getpersistencemanager.error=JDO76000: \u540c\u3058\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u8907\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
jdo.persistencemanagerfactoryimpl.getpersistencemanager.notconfigured=JDO76001: PersistenceManagerFactory \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
jdo.persistencemanagerfactoryimpl.notsupported=JDO76002: \u5185\u90e8 PersistenceManagerFactoryImpl \u306b\u5bfe\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
jdo.persistencemanagerimpl.acquireexclusivelock.interrupted=JDO76003: InterruptedException \u306b\u3088\u308a\u3001\u6392\u4ed6\u7684\u30ed\u30c3\u30af\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f
jdo.persistencemanagerimpl.acquiresharelock.failed=JDO76004: _readWriteCount \u304c\u30bc\u30ed\u672a\u6e80\u3067\u3042\u308b\u305f\u3081\u3001\u5171\u6709\u30ed\u30c3\u30af\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f
jdo.persistencemanagerimpl.acquiresharelock.interrupted=JDO76005: InterruptedException \u306b\u3088\u308a\u3001\u5171\u6709\u30ed\u30c3\u30af\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f
jdo.persistencemanagerimpl.another_pm=JDO76006: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u5225\u306e PersistenceManager \u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002
jdo.persistencemanagerimpl.assertactivetransaction.error=JDO76007: \u3053\u306e\u6301\u7d9a\u30de\u30cd\u30fc\u30b8\u30e3\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306f\u6709\u52b9\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002
jdo.persistencemanagerimpl.assertclosed.closed=JDO76008: PersistenceManager \u306f\u9589\u3058\u3089\u308c\u3066\u3044\u307e\u3059\u3002
jdo.persistencemanagerimpl.assertpersistencecapable.error=JDO76009: \u30af\u30e9\u30b9 {0} \u306f\u900f\u904e\u7684\u6301\u7d9a\u6027\u7528\u306b\u62e1\u5f35\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u5b9f\u884c\u524d\u306b IDE \u306e JAR \u307e\u305f\u306f WAR \u30d1\u30c3\u30b1\u30fc\u30b8\u30e3\u3092\u4f7f\u7528\u3057\u3066\u3001\u6301\u7d9a\u53ef\u80fd\u30af\u30e9\u30b9\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u306f\u3001\u30e1\u30a4\u30f3\u30af\u30e9\u30b9\u306e Executor \u30d7\u30ed\u30d1\u30c6\u30a3\u3092 Persistence Executor \u306b\u8a2d\u5b9a\u3057\u3001IDE \u304b\u3089\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002
jdo.persistencemanagerimpl.close.activetransaction=JDO76010: \u3053\u306e\u6301\u7d9a\u30de\u30cd\u30fc\u30b8\u30e3\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u30aa\u30fc\u30d7\u30f3\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002
jdo.persistencemanagerimpl.fetchinstance.none=JDO76012: \u3053\u306e ObjectId \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002
jdo.persistencemanagerimpl.internaldeletepersistent.transient=JDO76014: \u6301\u7d9a\u7684\u3067\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u524a\u9664\u3067\u304d\u307e\u305b\u3093\u3002
jdo.persistencemanagerimpl.internalmakepersistent.dups=JDO76015: \u540c\u3058\u4e3b\u30ad\u30fc\u3092\u6301\u3064\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u3001\u3059\u3067\u306b\u3053\u306e PersistenceManager \u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u5b58\u5728\u3057\u307e\u3059\u3002
jdo.persistencemanagerimpl.loadclassforoid.wrongoidclass=JDO76016: OID \u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 Class \u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002
jdo.persistencemanagerimpl.newscoinstance.wrongclass=JDO76017: \u578b\u304c\u6709\u52b9\u3067\u306a\u3044\u305f\u3081\u3001\u30af\u30e9\u30b9 {0} \u306e SCO \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3002
jdo.persistencemanagerimpl.notprocessed=JDO76018: \u5faa\u74b0\u4f9d\u5b58\u306b\u3088\u308a\u3001\u6301\u7d9a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30d5\u30e9\u30c3\u30b7\u30e5\u3067\u304d\u307e\u305b\u3093\u3002
jdo.persistencemanagerimpl.releaseexclusivelock.failed=JDO76019: _readWriteCount \u304c\u30bc\u30ed\u3088\u308a\u5927\u304d\u3044\u305f\u3081\u3001\u6392\u4ed6\u7684\u30ed\u30c3\u30af\u306e\u89e3\u653e\u306b\u5931\u6557\u3057\u307e\u3057\u305f
jdo.persistencemanagerimpl.releasesharelock.failed=JDO76020: _readWriteCount \u304c\u30bc\u30ed\u3067\u3042\u308b\u305f\u3081\u3001\u5171\u6709\u30ed\u30c3\u30af\u306e\u89e3\u653e\u306b\u5931\u6557\u3057\u307e\u3057\u305f
jdo.persistencemanagerwrapper.invalidpm=JDO76021: PersistenceManagerWrapper \u306f\u9589\u3058\u3066\u3044\u307e\u3059\u3002
jdo.extentcollection.constructor.invalidclass=JDO76022: extent \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306f {0} \u306f\u7121\u52b9\u306a\u30af\u30e9\u30b9\u3067\u3059\u3002
jdo.extentcollection.constructor.nonpc=JDO76023: \u30af\u30e9\u30b9 {0} \u306f\u6301\u7d9a\u53ef\u80fd\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002
jdo.extentcollection.constructor.subclasses=JDO76024: extent \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u30b5\u30d6\u30af\u30e9\u30b9 true \u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
jdo.extentcollection.illegalmodification=JDO76025: \u30af\u30e9\u30b9 {0} \u306e extent \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u5909\u66f4\u304c\u7121\u52b9\u3067\u3059\u3002
jdo.extentcollection.methodnotsupported=JDO76026: extent \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30e1\u30bd\u30c3\u30c9 {0} \u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
jdo.lifecycle.xactnotactive=JDO76027: \u3053\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f\u3001\u30a2\u30af\u30c6\u30a3\u30d6\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u3067\u3059\u3002
jdo.persistencemanagerimpl.newinstance.badsm=JDO76028: StateManager \u306e\u8a2d\u5b9a\u304c\u4e0d\u5b8c\u5168\u3067\u3059\u3002
jdo.persistencemanagerimpl.setjtatransaction.notnulljta=JDO76029: Null \u4ee5\u5916\u306e javax.transaction.Transaction {0} \u3092 {1} \u306b\u7f6e\u63db\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u3002
jdo.persistencemanagerfactoryimpl.getpersistencemgr.closed=JDO76030: \u3053\u306e javax.transaction.Transaction \u306e PersistenceManager {0} \u306f\u3001\u3059\u3067\u306b\u9589\u3058\u3089\u308c\u3066\u3044\u308b\u3001\u307e\u305f\u306f\u30b3\u30df\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002
jdo.persistencemanagerfactoryimpl.registerpm.registered=JDO76031: \u3053\u306e javax.transaction.Transaction \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 {0} \u306f\u3001\u3059\u3067\u306b\u5225\u306e PersistenceManager {1} \u3067\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u3002
jdo.persistencemanagerimpl.verificationfailed=JDO76032: \u30d0\u30fc\u30b8\u30e7\u30f3\u6574\u5408\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u3001\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3068\u306e\u691c\u8a3c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002
jdo.persistencemanagerfactoryimpl.getversionconsistencycache.nullstore=JDO76033: StoreManager \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002

#
# <NOI18N: LifeCycle>
#
sqlstore.state.lifecyclestate.changestate=LifeCycleState.changeState(), old state = {0}, new state = {1}.
sqlstore.state.lifecyclestate.initial=LifeCycleState.getLifeCycleState(), initial state = {0}.

#
# <NOI18N: PersistenceManager>
#
sqlstore.persistencemgr.acquireexclusivelock.count=acquireExclusiveLock(), thread {0} with _readWriteCount = {1}.
sqlstore.persistencemgr.acquireexclusivelock=acquireExclusiveock(), thread {0} going to wait.
sqlstore.persistencemgr.acquiresharedlock.rdwrcount=acquireShareLock(), thread {0} acquired shared lock with _readWriteCount ={1}.
sqlstore.persistencemgr.acquiresharedlock=acquireShareLock(), thread {0} going to wait.
sqlstore.persistencemgr.aftercompletion.process=---PersistenceManagerImpl.afterCompletion() process: {0}.
sqlstore.persistencemgr.aftercompletion=---PersistenceManagerImpl.afterCompletion() abort: {0}.
sqlstore.persistencemgr.assertactivetx.closed=--- PersistenceManagerImpl.assertActiveTransaction: Closed for  {0}.
sqlstore.persistencemgr.assertactivetx=--- PersistenceManagerImpl.assertActiveTransaction:  {0}.
sqlstore.persistencemgr.assertisopen=--- PersistenceManagerImpl.assertIsOpen: CLOSED for {0}.
sqlstore.persistencemgr.beforecompletion=---PersistenceManagerImpl.beforeCompletion().
sqlstore.persistencemgr.cacheproperties=PersistenceManagerImpl cache properties: _txCacheInitialCapacity={0}, _flushedCacheInitialCapacity={1}, _flushedCacheLoadFactor={2}, _weakCacheInitialCapacity={3}, _weakCacheLoadFactor={4}.
sqlstore.persistencemgr.deregisterinstance.verified=---PersistenceManagerImpl.deregisterInstance() -- deregistered with verify.
sqlstore.persistencemgr.deregisterinstance.verify=---PersistenceManagerImpl.deregisterInstance() with verify SM -- oid: {0}  for PersistenceManager: {1}  and JTA: {2}.
sqlstore.persistencemgr.deregisterinstance=---PersistenceManagerImpl.deregisterInstance() oid: {0}  for PersistenceManager: {1}  and JTA: {2}.
sqlstore.persistencemgr.getbyobjid=---PersistenceManagerImpl.getObjectById() OID:{0}  for PersistenceManager: {1} and JTA: {2}.
sqlstore.persistencemgr.getcurrentwrapper=---PersistenceManagerImpl.getCurrentWrapper() > current: {0}.
sqlstore.persistencemgr.getobjid.notpc=---PersistenceManagerImpl.getObjectId() NOT PC: {0}  for PersistenceManager: {1}.
sqlstore.persistencemgr.getobjid.notpm=---PersistenceManagerImpl.getObjectId() NOT PM: {0} for PersistenceManager: {1}  and JTA: {2}.
sqlstore.persistencemgr.getobjid= :{0} ---PersistenceManagerImpl.getObjectId() PC: {1} for PersistenceManager: {2} and JTA: {3}.
sqlstore.persistencemgr.internalcloneoid.old=---PersistenceManagerImpl.internalCloneOid(): old: {0}  new: {1} same: {2}.
sqlstore.persistencemgr.internalcloneoid=---PersistenceManagerImpl.internalCloneOid() ERROR: {0}.
sqlstore.persistencemgr.isactivetx=---PersistenceManagerImpl.isActiveTransaction() : {0}.
sqlstore.persistencemgr.isnontxread=---PersistenceManagerImpl.isNontransactionalRead() : {0}.
sqlstore.persistencemgr.isoptimistic=---PersistenceManagerImpl.isOptimisticTransaction() : {0}.
sqlstore.persistencemgr.loadingclass=Loading ... ClassName: {0}.
sqlstore.persistencemgr.loadingfile=Loading ... FileName: {0} {1} {2}.
sqlstore.persistencemgr.makepersistent.done=---PersistenceManagerImpl.makePersistent() {0}  finished for: {1}  and JTA: {2}.
sqlstore.persistencemgr.makepersistent= {0} ---PersistenceManagerImpl.makePersistent() PC: {1} for PersistenceManager: {2} and JTA: {3}.
sqlstore.persistencemgr.newcollection=---PersistenceManagerImpl.newCollectionInstanceInternal() type: {0}.
sqlstore.persistencemgr.popcurrentwrapper=---PersistenceManagerImpl.popCurrentWrapper() > current: {0}  prev: {1}.
sqlstore.persistencemgr.pushcurrentwrapper=---PersistenceManagerImpl.pushCurrentWrapper() > current: {0}  new: {1}.
sqlstore.persistencemgr.registerinstance= {0} ---PersistenceManagerImpl.registerInstance() oid/sm: {1}/{2}  for PersistenceManager: {3}  and JTA: {4}.
sqlstore.persistencemgr.registerinstancein_txc=registerInstance in TXC :{0} / {1} for PersistenceManager: {2} and JTA: {3}.
sqlstore.persistencemgr.registerinstancein_wkc=registerInstance in WKC.
sqlstore.persistencemgr.releaseexclusivelock=releaseExclusiveock(), thread {0} with _readWriteCount = {1}.
sqlstore.persistencemgr.releasesharedlock=releaseShareLock(), thread {0} with _readWriteCount = {1}.
sqlstore.persistencemgr.replacingdeletedinstance=Replacing deleted instance with new for Object Id: {0}.
sqlstore.persistencemgr.setkeyfields=---PersistenceManagerImpl.setKeyFields() ERROR: {0}.
#
# <NOI18N: PersistenceManagerFactory>
#
sqlstore.sqlpersistencemgrfactory.getfrompool.pmt=<--SQLPersistenceManagerFactory.getFromPool() PM: {0} for JTA {1}.
sqlstore.sqlpersistencemgrfactory.getfrompool=<--SQLPersistenceManagerFactory.getFromPool().
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.found= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() FOUND javax.transaction.Transaction: {1}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.jdotx.notfound=<->SQLPersistenceManagerFactory.getPersistenceManager() NOT FOUND JDO Transaction:.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.jdotx=<->SQLPersistenceManagerFactory.getPersistenceManager() JDO Transaction: {0}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.pmclosedfor= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() PM is CLOSED FOR: {1}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.pmt= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() : {1} for JTA: {2}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr=:{0} -->SQLPersistenceManagerFactory.getPersistenceManager().
sqlstore.sqlpersistencemgrfactory.init=---SQLPersistenceManagerFactory.initialize().
sqlstore.sqlpersistencemgrfactory.pmCacheBucketSize=---SQLPersistenceManagerFactory pmCacheBucketSize = {0}.
sqlstore.sqlpersistencemgrfactory.pmCacheInitialCapacity=---SQLPersistenceManagerFactory pmCacheInitialCapacity = {0}.
sqlstore.sqlpersistencemgrfactory.registerpersistencemgr.pmt=<->SQLPersistenceManagerFactory.registerPersistenceManager() PM: {0} for JTA Tx: {1}.
sqlstore.sqlpersistencemgrfactory.releasepm.pmt=---SQLPersistenceManagerFactory.releasePersistenceManager() PM:{0} for JTA Tx: {1}.
sqlstore.sqlpersistencemgrfactory.returnToPool=<--SQLPersistenceManagerFactory.returnToPool().


###############################################################################
# <Model>
# Message ID Range: JDO76100 - JDO76199
###############################################################################
core.configuration.columnnotable=JDO76100: \u5217\u8a18\u8ff0\u5b50\u306b\u6709\u52b9\u306a\u8868\u8a18\u8ff0\u5b50\u304c\u3042\u308a\u307e\u305b\u3093\u3002
core.configuration.fieldnotable=JDO76101: \u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u306f\u3069\u306e\u8868\u3068\u3082\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u305b\u3093\u3002
core.configuration.fieldnotmapped=JDO76102: \u30af\u30e9\u30b9 {1} \u306e\u6301\u7d9a\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u306f\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
core.configuration.iddescnofield=JDO76103: SqlIDDesc \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6b63\u3057\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u30d5\u30a3\u30fc\u30eb\u30c9\u8a18\u8ff0\u5b50\u304c\u3042\u308a\u307e\u305b\u3093\u3002
core.configuration.loadfailed.class=JDO76104: \u30af\u30e9\u30b9 {0} \u306e\u8a2d\u5b9a\u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3067\u3057\u305f\u3002
core.configuration.noneexistentpkfield=JDO76105: ObjectId \u30af\u30e9\u30b9 {1} \u306e\u30d5\u30a3\u30fc\u30eb\u30c9 {0} PersistenceCapable \u30af\u30e9\u30b9 {2} \u306b\u5b58\u5728\u3057\u307e\u305b\u3093\u3002
core.configuration.unsupportedconsistencylevel=JDO76106: \u30af\u30e9\u30b9 {0} \u306b\u306f\u3001\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u306a\u3044\u6574\u5408\u6027\u30ec\u30d9\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\u73fe\u5728\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u6574\u5408\u6027\u30ec\u30d9\u30eb\u306f\u3001\u300cnone\u300d\u3001\u300ccheck-modified-at-commit\u300d\u3001\u300clock-when-loaded\u300d\u3001\u300ccheck-version-of-accessed-instances\u300d\u3067\u3059\u3002
core.configuration.validationfailed=JDO76107: \u30af\u30e9\u30b9 {0} \u306b\u5bfe\u3059\u308b\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u7121\u52b9\u3067\u3059:\n{1}\u3002
core.configuration.validationproblem=JDO76108: \u30af\u30e9\u30b9 {0} \u3067\u691c\u8a3c\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f : {1}
#
# <FieldDesc validation at runtime>
#
core.fielddesc.minvalue=JDO76109: \u5024 {0} \u306f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u578b {2} \u306e\u8a31\u53ef\u3055\u308c\u308b\u6700\u5c0f\u5024 {1} \u3092\u4e0b\u56de\u3063\u3066\u3044\u307e\u3059\u3002
core.fielddesc.maxvalue=JDO76110: \u5024 {0} \u306f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u578b {2} \u306e\u8a31\u53ef\u3055\u308c\u308b\u6700\u5927\u5024 {1} \u3092\u4e0a\u56de\u3063\u3066\u3044\u307e\u3059\u3002
core.configuration.noneexistentvcfield=JDO76111: \u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u306f\u30d0\u30fc\u30b8\u30e7\u30f3\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u3057\u3066\u306e\u30de\u30fc\u30af\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u6301\u7d9a\u53ef\u80fd\u30af\u30e9\u30b9 {1} \u306b\u5b58\u5728\u3057\u307e\u305b\u3093\u3002
core.configuration.loadfailed.field=JDO76112: \u30af\u30e9\u30b9 {1} \u5185\u306e\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u306e\u8a2d\u5b9a\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002

#
# <NOI18N: model>
#
sqlstore.model.classdesc.assocrelatedfield=associated relationship field = {0}.
sqlstore.model.classdesc.createsqldesc=creating SqlIDDesc from {0}.
sqlstore.model.classdesc.fieldinfo=field name = {0}, id= {1}.
sqlstore.model.classdesc.general={0}.{1} =>{2}
sqlstore.model.classdesc.getlocalfielddesc=<-> SqlPersistenceDesc.getLocalFieldDesc(), class ={0} added hidden field {1}  for column {2}.
sqlstore.model.classdesc.loadedclass=Successfully loaded oid class= {0}.
sqlstore.model.classdesc.persistconfiginit.exit=<-- SqlPersistenceConfig.initialize().
sqlstore.model.classdesc.persistconfiginit=--> SqlPersistenceConfig.initialize(), class = {0}.
sqlstore.model.classdesc.pkfield=PK field = {0}.
sqlstore.model.classdesc.primarytrackedfield=field {0} is the primary tracked field .
sqlstore.model.classdesc.unsetconcurrencychk=unsetting IN_CONCURRENCY_CHECK property for lf  {0}.
sqlstore.model.classdesc.unsetrefintegrityupdate=unsetting REF_INTEGRITY_UPDATES property for ff {0}.
sqlstore.model.classdesc.vcfield=Version consistency field = {0}.
sqlstore.model.fielddesc.addingfield=adding field {0} to be tracked by field {1}.
sqlstore.model.fielddesc.convertvalue.from_to=convertValue: {0} From: {1} To: {2}.
sqlstore.model.fielddesc.convertvalue.hidden=convertValue: hidden {0} ... return.
sqlstore.model.fielddesc.convertvalue=convertValue: NULL ... return.
sqlstore.model.fielddesc.fieldname={0} = {1}.
sqlstore.model.fielddesc.setupdesc=setupDesc(): fieldName {0} fieldType {1}.
sqlstore.model.configcacheimpl.size_before={0} size before cleanup: {1}.
sqlstore.model.configcacheimpl.size_after={0} size after cleanup: {1}.


###############################################################################
# <StateManager>
# Message ID Range: JDO76200 - JDO76299
###############################################################################
core.statemanager.anotherowner=JDO76200: \u5225\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6240\u6709\u3059\u308b SCO \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
core.statemanager.cantnewoid=JDO76201: \u30af\u30e9\u30b9 {0} \u306e\u65b0\u3057\u3044\u4e3b\u30ad\u30fc\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002
core.statemanager.cantschedulejointable=JDO76202: \u95a2\u4fc2\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u8aac\u660e\u304c Null \u3067\u3042\u308b\u305f\u3081\u3001\u30af\u30e9\u30b9 {0} \u3068 {1} \u306e\u9593\u306e\u7d50\u5408\u8868\u30a8\u30f3\u30c8\u30ea\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002
core.statemanager.cantsetkeyfield=JDO76203: \u4e3b\u30ad\u30fc\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u306e\u5024\u306e\u8a2d\u5b9a\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002
core.statemanager.conflictingvalues=JDO76204: \u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u3068\u30d5\u30a3\u30fc\u30eb\u30c9 {1} \u306e\u9593\u3067\u885d\u7a81\u3057\u3066\u3044\u308b\u5024\u304c\u540c\u3058\u5217\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u3059
core.statemanager.getfieldfailed=JDO76205: \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002
core.statemanager.invalidpk=JDO76206: \u6301\u7d9a\u53ef\u80fd\u30af\u30e9\u30b9 {1} \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u518d\u8aad\u307f\u8fbc\u307f\u3059\u308b\u3068\u304d\u306b\u3001\u4e3b\u30ad\u30fc\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u304c\u7121\u52b9\u306a Null \u3067\u3057\u305f\u3002\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e ObjectId \u306f {2} \u3067\u3059\u3002
core.statemanager.nopkupdate=JDO76207: \u4e3b\u30ad\u30fc\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u66f4\u65b0\u306f\u8a31\u53ef\u3055\u308c\u307e\u305b\u3093\u3002
core.statemanager.nopm=JDO76208: \u72b6\u614b\u30de\u30cd\u30fc\u30b8\u30e3\u306b\u6301\u7d9a\u30de\u30cd\u30fc\u30b8\u30e3\u3078\u306e\u53c2\u7167\u304c\u542b\u307e\u308c\u307e\u305b\u3093\u3002
core.statemanager.notnavigable=JDO76209: \u30af\u30e9\u30b9 {1} \u306e\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u30a3\u30fc\u30eb\u30c9\u306f\u3053\u308c\u307e\u3067\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u3053\u306e\u30af\u30e9\u30b9\u306f\u52d5\u7684\u306a\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u3092\u8a31\u53ef\u3057\u307e\u305b\u3093\u3002\u30af\u30e9\u30b9\u306e\u53d6\u5f97\u6642\u306b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8981\u6c42\u3059\u308b\u304b\u3001\u30a2\u30af\u30bb\u30b9\u6642\u306b\u81ea\u52d5\u7684\u306b\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u52d5\u7684\u306a\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u3092\u8a31\u53ef\u3057\u3066\u304f\u3060\u3055\u3044\u3002
core.statemanager.objectnotfound=JDO76210: \u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5b58\u5728\u3057\u307e\u305b\u3093\u3002
core.statemanager.poshiddenindex=JDO76211: \u96a0\u3057\u30d5\u30a3\u30fc\u30eb\u30c9\u3078\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u8ca0\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001{0} \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u691c\u51fa\u3055\u308c\u307e\u3057\u305f\u3002
core.statemanager.readonly=JDO76212: \u30af\u30e9\u30b9 {1} \u306e\u8aad\u307f\u53d6\u308a\u5c02\u7528\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u3092\u5909\u66f4\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u3002
core.statemanager.releaselock.wrongthread=JDO76213: \u3053\u306e\u30b9\u30ec\u30c3\u30c9 {0} \u306f StateManager \u30ed\u30c3\u30af\u3092\u4fdd\u6301\u3057\u307e\u305b\u3093\u3002
core.statemanager.setfieldfailed=JDO76214: \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u8a2d\u5b9a\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002
core.statemanager.wrongusageforoverlappingpkfkdelete=JDO76215: \u7ba1\u7406\u5bfe\u8c61\u95a2\u4fc2\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u524a\u9664\u3057\u3088\u3046\u3068\u3059\u308b\u7121\u52b9\u306a\u8a66\u307f\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u95a2\u4fc2\u306f\u3001\u3082\u3046\u4e00\u65b9\u306e\u5074\u306e\u4e3b\u30ad\u30fc\u5217\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5bfe\u3059\u308b\u6d88\u53bb\u64cd\u4f5c\u3067\u306f\u3001\u3082\u3046\u4e00\u65b9\u306e\u5074\u306e\u5217\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u4e3b\u30ad\u30fc\u306e\u66f4\u65b0\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u306e\u305f\u3081\u3001\u4e3b\u30ad\u30fc\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u7ba1\u7406\u5bfe\u8c61\u95a2\u4fc2\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u6d88\u53bb\u306f\u3001\u660e\u793a\u7684\u306a\u3001\u307e\u305f\u306f\u30ab\u30b9\u30b1\u30fc\u30c9\u524a\u9664\u306b\u3088\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u524a\u9664\u306b\u3088\u3063\u3066\u306e\u307f\u884c\u308f\u308c\u307e\u3059\u3002
core.statemanager.toomanyrows=JDO76215: \u30af\u30e9\u30b9 {0} \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u3044\u305a\u308c\u304b\u306e\u8868\u306e\u8907\u6570\u306e\u884c\u304c\u8fd4\u3055\u308c\u307e\u3057\u305f\u3002\u30af\u30e9\u30b9\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u308b\u5404\u8868\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068\u306b 1 \u3064\u306e\u884c\u3060\u3051\u3092\u6301\u3064\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
core.statemanager.copyFields.mismatch=JDO76216: 1 \u3064\u306e StateManager \u304b\u3089\u3001{0} \u3068 {1} \u306e\u7570\u306a\u308b\u30bf\u30a4\u30d7\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7ba1\u7406\u3059\u308b\u5225\u306e StateManager \u306b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30b3\u30d4\u30fc\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u3002

#
# <NOI18N: StateManager>
#
sqlstore.sqlstatemanager.adddependency=<-> SQLStateManager.addDependency(), this StateManager: {0}, other StateManager: {1}.
sqlstore.sqlstatemanager.addupdate=<-> SQLStateManager.addUpdatedForeignReference(), lobj={0}, f={1}, fobj={2}, refCount={3}.
sqlstore.sqlstatemanager.applyupdates.exit=<-- SqlStateManager.applyUpdates().
sqlstore.sqlstatemanager.applyupdates=--> SqlStateManager.applyUpdates(), field = {0}.
sqlstore.sqlstatemanager.clearpersistencefields.exit=<--- SqlStateManager.clearPersistenceFields().
sqlstore.sqlstatemanager.clearpersistencefields=--> SqlStateManager.clearPersistenceFields().
sqlstore.sqlstatemanager.copychanges.exit=<-- SQLStateManager.copyChanges().
sqlstore.sqlstatemanager.copychanges=--> SQLStateManager.copyChanges(), state manager = {0}.
sqlstore.sqlstatemanager.deletepersistence=<-> SqlStateManager.deletePersistence(), type = {0}.
sqlstore.sqlstatemanager.getbeforeimage.exit=<-- SqlStateManager.getBeforeImage().
sqlstore.sqlstatemanager.getbeforeimage=--> SqlStateManager.getBeforeImage(), type = {0}.
sqlstore.sqlstatemanager.isbeforeimagerequired=isBeforeImageRequired is : {0}.
sqlstore.sqlstatemanager.loadforread.exit=<-- SQLStateManager.loadForRead().
sqlstore.sqlstatemanager.loadforread=--> SQLStateManager.loadForRead().
sqlstore.sqlstatemanager.loadforupdate.exit=<-- SQLStateManager.loadForUpdate().
sqlstore.sqlstatemanager.loadforupdate=--> SQLStateManager.loadForUpdate().
sqlstore.sqlstatemanager.loggingfield=logging field = {0} with value = {1}.
sqlstore.sqlstatemanager.makedirty.fixscocollection=--- SqlStateManager.makeDirty(), fix SCOCollection.
sqlstore.sqlstatemanager.makedirty.fixscodate=--- SqlStateManager.makeDirty(), fix SCODate.
sqlstore.sqlstatemanager.makedirty=--> SqlStateManager.makeDirty(), field = {0}.
sqlstore.sqlstatemanager.makedirtyfield=marked dirty field = {0}.
sqlstore.sqlstatemanager.makepersistence=<-> SqlStateManager.makePersistence(), type = {0}.
sqlstore.sqlstatemanager.makepresent=--> SqlStateManager.makePresent(), field = {0}.
sqlstore.sqlstatemanager.marking=marking: {0} as present.
sqlstore.sqlstatemanager.newtype=New Type: {0}.
sqlstore.sqlstatemanager.nosuchmethodexcep.clone=Exception : {0}  clone ... for type {1}.
sqlstore.sqlstatemanager.preparegetfield.exit=<-- SqlStateManager.prepareGetField().
sqlstore.sqlstatemanager.preparegetfield=--> SqlStateManager.prepareGetField(), name = {0}.
sqlstore.sqlstatemanager.preparesetfield.exit=<-- SQLStateManager.prepareSetField().
sqlstore.sqlstatemanager.preparesetfield=--> SQLStateManager.prepareSetField(), name = {0}.
sqlstore.sqlstatemanager.preparetoupdateph1.exit=<-- SqlStateManager.prepareToUpdateI().
sqlstore.sqlstatemanager.preparetoupdateph1=--> SqlStateManager.prepareToUpdatePhaseI(), type = {0}.
sqlstore.sqlstatemanager.preparetoupdateph2.exit=<-- SqlStateManager.prepareToUpdateII().
sqlstore.sqlstatemanager.preparetoupdateph2=--> SqlStateManager.prepareToUpdatePhaseII(), type = {0}.
sqlstore.sqlstatemanager.preparetoupdateph3.exit=<-- SqlStateManager.prepareToUpdateIII().
sqlstore.sqlstatemanager.preparetoupdateph3=--> SqlStateManager.prepareToUpdatePhaseIII(), type = {0}.
sqlstore.sqlstatemanager.prepareupdatefield.exit=<-- SQLStateManager.prepareUpdateField().
sqlstore.sqlstatemanager.prepareupdatefield=--> SQLStateManager.prepareUpdateField(), name = {0} for state: {1}.
sqlstore.sqlstatemanager.prepareupdatefieldspl.exit=<-- SQLStateManager.prepareUpdateFieldSpecial().
sqlstore.sqlstatemanager.prepareupdatefieldspl=--> SQLStateManager.prepareUpdateFieldSpecial, name = {0} for state: {1}.
sqlstore.sqlstatemanager.processcollectionupdate.exit=<-- SQLStateManager.processCollectionUpdates().
sqlstore.sqlstatemanager.processcollectionupdate=--> SQLStateManager.processCollectionUpdates(), beforeList={0}, afterlist={1}.
sqlstore.sqlstatemanager.processforeign=process foreign field ={0}.
sqlstore.sqlstatemanager.processforeignfield.remove=-- SQLStateManager.processForeignField(): was Collection - remove.
sqlstore.sqlstatemanager.processforeignfield.remove_from_bi=-- SQLStateManager.processForeignField(): is SCOCollection - remove from BI.
sqlstore.sqlstatemanager.processforeignfield.reset=-- SQLStateManager.processForeignField(): was SCOCollection - reset.
sqlstore.sqlstatemanager.processforeignfield=-- SQLStateManager.processForeignField(): value: {0} type: {1}.
sqlstore.sqlstatemanager.realizefield.exit=<-- SqlStateManager.realizeField().
sqlstore.sqlstatemanager.realizefield=--> SqlStateManager.realizeField(), name = {0}.
sqlstore.sqlstatemanager.realizeforeignfield.exit=<-- SqlStateManager.realizeField(), field realized = {0}.
sqlstore.sqlstatemanager.realizeforeignfield=--> SqlStateManager.realizeField(), name = {0}.
sqlstore.sqlstatemanager.recordingfield=recording field = {0}.
sqlstore.sqlstatemanager.refreshpersistent.exit=<-- SqlStateManager.refreshPersistent().
sqlstore.sqlstatemanager.refreshpersistent=--> SqlStateManager.refreshPersistence(), type = {0}.
sqlstore.sqlstatemanager.reload.exit=<-- SqlStateManager.reload(FieldDesc)\u3002
sqlstore.sqlstatemanager.reload=--> SqlStateManager.reload(FieldDesc)\u3001\u30bf\u30a4\u30d7 = {0}\u3001\u30d5\u30a3\u30fc\u30eb\u30c9 = {1}\u3002
sqlstore.sqlstatemanager.removeupdate=<-> SQLStateManager.removeUpdatedForeignReference(), lobj={0}, f={1}, fobj={2}, refCount={3}.
sqlstore.sqlstatemanager.replaceobjectfield.unsetsco=-- SqlStateManager.replaceObjectField(), unset SCO.
sqlstore.sqlstatemanager.replaceobjectfield=-- SqlStateManager.replaceObjectField(), field = {0}, type= {1}.
sqlstore.sqlstatemanager.reset=--> SqlStateManager.reset(), retValues = {0}, wasNew: {1}, keepState: {2}.
sqlstore.sqlstatemanager.resettingcollection=Resetting Collection.
sqlstore.sqlstatemanager.resettingdate=Resetting Date.
sqlstore.sqlstatemanager.resolvedependencies=<-> SQLStateManager.resolveDependencies(), obj={0}.
sqlstore.sqlstatemanager.resolvedependency=<-> SQLStateManager.resolveDependency(), dependency resolved: lobj={0}, f={1}, fobj={2}.
sqlstore.sqlstatemanager.retrieve.exit=<-- SqlStateManager.retrieve()\u3002
sqlstore.sqlstatemanager.retrieve=--> SqlStateManager.retrieve(), name = {0}.
sqlstore.sqlstatemanager.retrieveforeign.exit=<-- SqlStateManager.retrieveForeign()\u3002
sqlstore.sqlstatemanager.retrieveforeign=--> SqlStateManager.retrieveForeign(), name = {0}.
sqlstore.sqlstatemanager.unsetmask=unsetting masks for field = {0}.
sqlstore.sqlstatemanager.unconditionalreload.exit=<-- SqlStateManager.reload().
sqlstore.sqlstatemanager.unconditionalreload=--> SqlStateManager.reload(), type = {0}.
sqlstore.sqlstatemanager.updatebeforeimage=<-> SQLStateManager.updateBeforeImage(), name = {0}, value = {1}.
sqlstore.sqlstatemanager.updateobjfield.exit=<-- SQLStateManager.updateObjectField().
sqlstore.sqlstatemanager.updateobjfield=--> SQLStateManager.updateObjectField(), name = {0}, type = {1}.
sqlstore.sqlstatemanager.updatepersistent.exit=<-- SqlStateManager.updatePersistent().
sqlstore.sqlstatemanager.updatepersistent.immediateflush=<--> SqlStateManager.updatePersistent(), immediate flush required: obj={0}, next={1}.
sqlstore.sqlstatemanager.updatepersistent.skipped=<--> SqlStateManager.updatePersistent() skipped, type ={0}, obj= {1}.
sqlstore.sqlstatemanager.updatepersistent=--> SqlStateManager.updatePersistent(), type = {0}.
sqlstore.sqlstatemanager.updatetrackedfields.exit=<-- updateTrackedFields().
sqlstore.sqlstatemanager.updatetrackedfields=--> updateTrackedFields(), f = {0} value = {1}  fieldToIgnore = {2}.


###############################################################################
# <sql generator components: All the source files under sql.>
# Message ID Range: JDO76300 - JDO76399
###############################################################################
core.constraint.duporderby=JDO76300: \u5236\u7d04\u306f\u3001\u300corder by\u300d\u5236\u7d04\u306b\u3059\u3067\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u3001\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u306e\u300corder by\u300d\u3067\u3059\u3002
core.constraint.fielddisallowed=JDO76301: fieldName \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 {0} \u3067\u306f\u8a31\u53ef\u3055\u308c\u307e\u305b\u3093\u3002
core.constraint.fieldrequired=JDO76302: fieldName \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 {0} \u3067\u306f\u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002
core.constraint.illegalParameterInfo=JDO76303: OP_PARAMETER \u306e addConstraint() \u306f\u3001ParameterInfo \u578b\u306e\u5024\u3067\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
core.constraint.illegalnode=JDO76304: SqlConstraint \u30b9\u30bf\u30c3\u30af\u5185\u306e\u5236\u7d04\u30ce\u30fc\u30c9 {0} \u304c\u7121\u52b9\u3067\u3059\u3002
core.constraint.illegalop=JDO76305: \u3053\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u7121\u52b9\u306a\u5024 {0} \u304c\u542b\u307e\u308c\u307e\u3059\u3002
core.constraint.needfieldnamenode=JDO76306: \u5236\u7d04\u30b9\u30bf\u30c3\u30af\u306b\u30a8\u30e9\u30fc\u304c\u3042\u308a\u307e\u3059\u3002\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306f\u60f3\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002
core.constraint.needfieldnode=JDO76307: \u5236\u7d04\u30b9\u30bf\u30c3\u30af\u306b\u30a8\u30e9\u30fc\u304c\u3042\u308a\u307e\u3059\u3002\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u8aac\u660e\u306f\u60f3\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002
core.constraint.needvalnode=JDO76308: \u5236\u7d04\u30b9\u30bf\u30c3\u30af\u306b\u30a8\u30e9\u30fc\u304c\u3042\u308a\u307e\u3059\u3002\u5024\u306f\u60f3\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002
core.constraint.stackempty=JDO76309: \u5236\u7d04\u30b9\u30bf\u30c3\u30af\u304c\u7a7a\u3067\u3059\u3002\u6f14\u7b97\u5b50\u6570\u306b\u5fc5\u8981\u306a\u5024\u306b\u306f\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\u3002
core.constraint.unknownfield=JDO76310: retrieve \u8a18\u8ff0\u5b50\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d5\u30a3\u30fc\u30eb\u30c9 {0} \u306f\u30af\u30e9\u30b9 {1} \u306e\u30e1\u30f3\u30d0\u30fc\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002
core.constraint.valdisallowed=JDO76311: value \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 {0} \u3067\u306f\u8a31\u53ef\u3055\u308c\u307e\u305b\u3093\u3002
core.constraint.valrequired=JDO76312: \u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 {0} \u3067\u306f\u5024\u304c\u5fc5\u8981\u3067\u3059\u3002
sqlstore.resultdesc.errorgettingvalefromresulset=JDO76313: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 {0} \u3067\u3001\u7d50\u679c\u30bb\u30c3\u30c8\u304b\u3089\u306e resultType {1}\u3001columnSqlType {2} \u3068\u3057\u3066\u306e\u5024\u306e\u53d6\u5f97\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u4f8b\u5916: {3}\u5f93\u5352 Exception: {3} \u5f93\u5352
sqlstore.resultdesc.foreignfieldprojection=JDO76314: {0} \u306e\u30af\u30a8\u30ea\u306f\u95a2\u4fc2\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5c55\u958b\u3092\u6301\u3064\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
sqlstore.resultdesc.unknownfieldtype=JDO76317: \u672a\u77e5\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u578b {0} \u304c\u691c\u51fa\u3055\u308c\u307e\u3057\u305f\u3002
sqlstore.retrievedesc.toomanyprojections=JDO76318: RetrieveDesc \u306b\u8907\u6570\u306e\u5c55\u958b\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
sqlstore.retrievedesc.toomanyresulttypes=JDO76319: RetrieveDesc \u306b\u8907\u6570\u306e\u7d50\u679c\u578b\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
sqlstore.selectstatement.noupdatelocksupport=JDO76320: \u3053\u306e\u30af\u30a8\u30ea\u306b\u95a2\u9023\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u306e 1 \u3064\u306b\u300clock-when-loaded\u300d\u306e\u6574\u5408\u6027\u30ec\u30d9\u30eb\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u6574\u5408\u6027\u30ec\u30d9\u30eb\u3092\u9069\u7528\u3059\u308b\u306b\u306f\u3001\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u304c\u66f4\u65b0\u306e\u305f\u3081\u306e\u30ed\u30c3\u30af\u3092\u884c\u30ec\u30d9\u30eb\u3067\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306f\u3001\u66f4\u65b0\u306e\u305f\u3081\u306e\u30ed\u30c3\u30af\u3092\u884c\u30ec\u30d9\u30eb\u3067\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u305b\u3093\u3002
sqlstore.sql.generator.statement.likeescapenotsupported=JDO76321: \u3053\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3067\u306f\u3001LIKE ESCAPE \u53e5\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002
sqlstore.sql.generator.statement.positionthreeargsnotsupported=JDO76322: POSITION \u53e5\u306e 3 \u756a\u76ee\u306e arg \u306f 1 \u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
core.configuration.classnotmapped=JDO76323: \u30af\u30e9\u30b9 {0} \u306f\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
core.configuration.classnotmappedtotable=JDO76324: \u30af\u30e9\u30b9 {0} \u306f\u8868 {1} \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
sqlstore.sql.generator.statement.unexpectedconstraint=JDO76325: \u64cd\u4f5c {0} \u306e\u5236\u7d04\u304c\u3001where \u53e5\u306e\u30eb\u30fc\u30c8\u3067\u3042\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002

# <I18N: sql generator>
# Following messages are used within other messages. They need to be i18ned but need not be numbered.
#
sqlstore.sql.generator.statement.sqlStatement=SQL \u6587
sqlstore.sql.generator.statement.withinputvalues= \u5165\u529b\u5024\u3042\u308a :
sqlstore.sql.generator.statement.withnoinputvalues= \u5165\u529b\u5024\u306a\u3057\u3002


#
# <ResultDesc NOI18N>
#
sqlstore.resultdesc.deserializing=deserializing = {0}.
sqlstore.resultdesc.marking_field=marking local field {0} as present.
sqlstore.resultdesc.marking_foreign_field=marking foreign field {0} as present.
sqlstore.resultdesc.marking_key_field=marking key field {0} as present.
sqlstore.resultdesc.returning_field=returning field {0} as projection.
#
# <Misc. SQLStore NOI18N >
#
sqlstore.sql.concurrency.concurrencychkdirty.exit=--> ConcurrencyCheckDirty.update().
sqlstore.sql.concurrency.concurrencychkdirty=--> ConcurrencyCheckDirty.update(), beforeImage = {0}.
sqlstore.sql.concurrencyoptverify.resumetx=<--> ConcurrencyOptVerify.resume(), resumed transaction = {0}.
sqlstore.sql.concurrencyoptverify.suspendtx=<--> ConcurrencyOptVerify.suspend(), suspended transaction = {0}.
sqlstore.sql.concurrencyoptverify.update.exit=<-- ConcurrencyOptVerify.update().
sqlstore.sql.concurrencyoptverify.update=--> ConcurrencyOptVerify.update(), beforeImage = {0}.
sqlstore.sql.generator.dbstatement.addbatch=addbatch ({0})
sqlstore.sql.generator.dbstatement.bindinputcolumn=bindInputColumn index: {0} value: {1} sqlType: {2}.
sqlstore.sql.generator.dbstatement.executebatch=executeBatch executing {0} command(s)
sqlstore.sql.generator.selectqueryplan.processforeignfield.exit=<-- SelectQueryPlan.processForeignFields().
sqlstore.sql.generator.selectqueryplan.processforeignfield=--> SelectQueryPlan.processForeignFields(), class = {0}.
sqlstore.sql.generator.selectqueryplan.processlocalfield.exit=<-- SelectQueryPlan.processLocalFields().
sqlstore.sql.generator.selectqueryplan.processlocalfield=--> SelectQueryPlan.processLocalFields(), class = {0}.
sqlstore.sql.generator.selectqueryplan.processstmts.exit=<-- SelectQueryPlan.processStatements().
sqlstore.sql.generator.selectqueryplan.processstmts=--> SelectQueryPlan.processStatements(), class = {0}, statements = {1}.
sqlstore.sql.updateobjdescimpl.afterimagenull=AfterImage is not set.
sqlstore.sql.updateobjdescimpl.beforeimagenull=BeforeImage is not set.
sqlstore.sql.updateobjdescimpl.markrelationshipchange=<--> UpdateDesc.markRelationshipChange().
sqlstore.sql.updateobjdescimpl.updated={0} is updated.


###############################################################################
# <SQLStoreManager>
# Message ID Range: JDO76400 - JDO76499
###############################################################################
#
# <SQLStoreManager>
#
core.persistencestore.jdbcerror=JDO76400: SQL \u6587\u306e\u5b9f\u884c\u6642\u306b JDBC SQLException \u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\n{0}\u3002\n\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f SQLException \u3092\u8abf\u3079\u3066\u304f\u3060\u3055\u3044\u3002
sqlstore.retrievedesc.stmntsnotjoined=JDO76401: 1 \u3064\u306e RetrieveDesc \u306b\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u306a\u3044\u8907\u6570\u306e SQL \u6587\u304c\u3042\u308a\u307e\u3059\u3002
core.persistencestore.toofewrows=JDO76402: \u30af\u30e9\u30b9 {0} \u306e\u95a2\u9023\u4ed8\u3051 {1} \u306e\u5024\u3092\u53d6\u5f97\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u304d\u306b\u3001\u3053\u306e\u95a2\u9023\u4ed8\u3051\u306b\u8a31\u53ef\u3055\u308c\u308b\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u30fc\u3088\u308a\u3082\u5c11\u306a\u3044\u884c\u304c\u8fd4\u3055\u308c\u307e\u3057\u305f\u3002\u8a31\u5bb9\u3055\u308c\u308b\u6700\u5c0f\u884c\u6570\u306f {2} \u3067\u3059\u3002
core.persistencestore.toomanyobjforcard1=JDO76403: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u6301\u7d9a\u30e2\u30c7\u30eb\u306e\u9593\u306b\u6574\u5408\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u30af\u30e9\u30b9 {0} \u306e\u95a2\u9023\u4ed8\u3051 {1} \u304c\u53c2\u7167\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u3053\u308d\u3001{2} \u30a2\u30a4\u30c6\u30e0\u304c\u53d6\u5f97\u3055\u308c\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u95a2\u9023\u4ed8\u3051\u306e\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u30fc\u4e0a\u9650\u304c 1 \u3067\u3042\u308b\u305f\u3081\u3001\u5bfe\u5fdc\u53ef\u80fd\u306a\u30a2\u30a4\u30c6\u30e0\u6570\u306f 1 \u3064\u3060\u3051\u3067\u3059\u3002
core.persistencestore.toomanyrows=JDO76405: \u30af\u30e9\u30b9 {0} \u306e\u95a2\u9023\u4ed8\u3051 {1} \u306e\u5024\u3092\u53d6\u5f97\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u304d\u306b\u3001\u3053\u306e\u95a2\u9023\u4ed8\u3051\u306b\u8a31\u53ef\u3055\u308c\u308b\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u30fc\u3088\u308a\u3082\u591a\u3044\u884c\u304c\u8fd4\u3055\u308c\u307e\u3057\u305f\u3002\u8a31\u5bb9\u3055\u308c\u308b\u6700\u5927\u884c\u6570\u306f {2} \u3067\u3059\u3002
core.store.concurrentaccess=JDO76406: \u4e26\u884c\u30a2\u30af\u30bb\u30b9\u4f8b\u5916 : {0} \u3078\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u5225\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u66f4\u65b0\u307e\u305f\u306f\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002
sqlstore.sqlstoremanager.errorcloseresultset=JDO76407: SQL \u7d50\u679c\u30bb\u30c3\u30c8\u3092\u9589\u3058\u308b\u3068\u304d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u4f8b\u5916 : {0}
sqlstore.sqlstoremanager.errorclosestatement=JDO76408: SQL \u6587\u3092\u9589\u3058\u308b\u3068\u304d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u4f8b\u5916 : {0}
sqlstore.sql.generator.selectqueryplan.plansnotjoined=JDO76409: 1 \u3064\u306e RetrieveDesc \u306b\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u306a\u3044\u8907\u6570\u306e\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u304c\u3042\u308a\u307e\u3059\u3002

#
# <NOI18N: SQLStoreManager>
#
sqlstore.sqlstoremanager.executeQuery.exit=<-- SQLStoreManager.executeQuery().
sqlstore.sqlstoremanager.executeQuery=--> SQLStoreManager.executeQuery().
sqlstore.sqlstoremanager.executeupdate.exit=<-- SQLStoreManager.executeUpdate(), rows affected = {0}.
sqlstore.sqlstoremanager.executeupdate=--> SQLStoreManager.executeUpdate().
sqlstore.sqlstoremanager.executeupdatebatch.addbatch={0}; add batch.
sqlstore.sqlstoremanager.executeupdatebatch.exit=<-- SQLStoreManager.executeUpdateBatch().
sqlstore.sqlstoremanager.executeupdatebatch.exit.flush=<-- SQLStoreManager.executeUpdateBatch(), rows affected = {0}.
sqlstore.sqlstoremanager.executeupdatebatch.flushbatch={0}; flush batch.
sqlstore.sqlstoremanager.executeupdatebatch=--> SQLStoreManager.executeUpdateBatch().
sqlstore.sqlstoremanager.getpersistenceconfig=<--> SQLStoreManager.getPersistenceConfig(), classType = {0}.
sqlstore.sqlstoremanager.selectnoncorrelated.exit=<-- SQLStoreManager.selectNonCorrelated().
sqlstore.sqlstoremanager.selectnoncorrelated=--> SQLStoreManager.selectNonCorrelated().
sqlstore.sqlstoremanager.vendortype=<--> SQLStoreManager: vendor type = {0}.


###############################################################################
# <Connection/Connectionpool/DBVendorType/TransactionImpl/OracleSpecialDBOperation>
# Message ID Range: JDO76500 - JDO76599
###############################################################################
#
# <Connection/Connection Pool> - database
#
connection.connectionmanager.badnew=JDO76500: \u65b0\u3057\u3044 ''{0}'' \u306f\u3001\u73fe\u5728\u306e ''{1}'' \u4ee5\u4e0a\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
connection.connectionmanager.badvalue=JDO76501: ''{0}'' \u306e\u5024\u304c\u7121\u52b9\u3067\u3059\u3002
connection.connectionmanager.conntimeout=JDO76502: \u63a5\u7d9a\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u671f\u9650\u304c\u5207\u308c\u307e\u3057\u305f\u3002
connection.connectionmanager.getconnection.mismatch=JDO76503: \u30d7\u30fc\u30eb\u3055\u308c\u305f\u63a5\u7d9a\u304c\u540c\u3058\u30e6\u30fc\u30b6\u30fc\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u6301\u3061\u307e\u305b\u3093\u3002
connection.connectionmanager.isdown=JDO76504: \u63a5\u7d9a\u30de\u30cd\u30fc\u30b8\u30e3\u304c\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u3055\u308c\u3066\u3044\u307e\u3059\u3002
connection.connectionmanager.maxpool=JDO76505: \u63a5\u7d9a\u30d7\u30fc\u30eb\u304c\u6700\u5927\u3067\u3059\u3002
connection.connectionmanager.msintervalvalue=JDO76506: MsInterval \u306f\u30bc\u30ed\u3088\u308a\u5927\u304d\u304f\u3001MsWait \u4ee5\u4e0b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
connection.connectionmanager.mswaitvalue=JDO76507: MsWait \u306f\u30bc\u30ed\u4ee5\u4e0a\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
connection.connectionmanager.nulldriver=JDO76508: \u30c9\u30e9\u30a4\u30d0\u540d\u304c Null \u5024\u3002
connection.connectionmanager.nullurl=JDO76509: URL \u304c Null \u5024\u3002
connection.connectionmanager.poolsize=JDO76510: maxPool \u306f minPool \u4ee5\u4e0a\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
connection.connectionmanager.threaditerupted=JDO76511: \u30b9\u30ec\u30c3\u30c9\u306f\u4e2d\u65ad\u3055\u308c\u307e\u3057\u305f\u3002
connection.connectionmanager.zero=JDO76512: {0} \u306f\u30bc\u30ed\u4ee5\u4e0a\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
#
# <DBVendorType>
#
sqlstore.database.dbvendor.cantloadDefaultProperties=JDO76513: \u30c7\u30d5\u30a9\u30eb\u30c8\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u30fc\u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3002
sqlstore.database.dbvendor.init.default=JDO76514: -->\u30d9\u30f3\u30c0\u30fc\u30bf\u30a4\u30d7 {0} \u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002
sqlstore.database.dbvendor.cantinstantiateclass=JDO76515: \u30af\u30e9\u30b9 {0} \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002
#
# <OracleSpecialDBOperation>
#
sqlstore.database.oracle.defineCol=JDO76516: \u6587\u306e\u5217\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002
sqlstore.database.oracle.nooracleavailable=JDO76517: Oracle \u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30af\u30c8\u30ea {0} \u3092\u521d\u671f\u5316\u3059\u308b\u3068\u304d\u306b\u3001oracle.jdbc.OraclePreparedStatement \u307e\u305f\u306f oracle.jdbc.driver.OraclePreparedStatement \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002Oracle \u5c02\u7528\u306e\u6700\u9069\u5316\u306f\u7121\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u4f7f\u7528\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c Fixed Char \u5217\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u305f\u5217\u306e\u30d0\u30a4\u30f3\u30c9\u5024\u3092\u5fc5\u8981\u3068\u3059\u308b\u5834\u5408\u3001\u5bfe\u5fdc\u3059\u308b dbschema \u30d5\u30a1\u30a4\u30eb\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u9577\u3055\u3060\u3051\u7a7a\u767d\u6587\u5b57\u304c\u633f\u5165\u3055\u308c\u307e\u3059\u3002
sqlstore.database.oracle.fixedcharpadded=JDO76518: \u5024 {0} \u306f CHAR \u5217\u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u3001Oracle \u3067\u306f\u7279\u5225\u306a\u51e6\u7406\u304c\u5fc5\u8981\u3067\u3059\u3002\u30c9\u30e9\u30a4\u30d0\u304b\u3089 OraclePreparedStatement \u30af\u30e9\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u5024\u306b\u306f\u3001\u53d6\u308a\u8fbc\u307e\u308c\u305f dbschema \u30d5\u30a1\u30a4\u30eb\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u9577\u3055 {1} \u3060\u3051\u7a7a\u767d\u6587\u5b57\u304c\u633f\u5165\u3055\u308c\u307e\u3059\u3002
#
# <Misc.>
#
core.configuration.getvendortypefailed=JDO76519: \u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306e\u30d9\u30f3\u30c0\u30fc\u30bf\u30a4\u30d7\u3092\u8b58\u5225\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002
jdo.sqlpersistencemanagerfactory.errorgettingDatabaseInfo=JDO76520: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u6b21\u306e\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u307e\u3057\u305f :

#
# <NOI18N: Connection>
#
sqlstore.connection.conncectiomgr.found=<--> ConnectionManager.getConnection: found {0}.
sqlstore.connection.conncectiomgr.getnewconn=<--> ConnectionManager.getConnection: new {0}.
sqlstore.connection.conncectiomgr.replacefreeconn=<--> ConnectionManager.replaceFreeConnection: free {0}.
sqlstore.connectionimpl.clearxact.close=--- ConnectionImpl.clearXact: connection closed .
sqlstore.connectionimpl.clearxact.disassocxact=--- ConnectionImpl.clearXact: disassociateXact .
sqlstore.connectionimpl.clearxact=--- ConnectionImpl.clearXact: .
sqlstore.connectionimpl.close.connrelease=<--- ConnectionImpl.close: connection released.
sqlstore.connectionimpl.close.exit=<--- ConnectionImpl.close: connection closed.
sqlstore.connectionimpl.close.freepending=<--- ConnectionImpl.close: set FreePending.
sqlstore.connectionimpl.close.putfreelist=<--- ConnectionImpl.close: put in freeList.
sqlstore.connectionimpl.close.replaced=<--- ConnectionImpl.close: connection replaced.
sqlstore.connectionimpl.close=---> ConnectionImpl.close.
sqlstore.connectionimpl.close_arg=---> ConnectionImpl.close: {0}.
sqlstore.connectionimpl.commit=--- ConnectionImpl.commit: connection closed.
sqlstore.connectionimpl.finalize=--- ConnectionImpl.finalize: connection closed.
sqlstore.connectionimpl.internalcommit=--- ConnectionImpl.internalCommit: .
sqlstore.connectionimpl.pendingdisassocxact=--- ConnectionImpl.clearXact: Pending disassociateXact.
sqlstore.connectionimpl.rollback.close=--- ConnectionImpl.rollback: connection closed.
sqlstore.connectionimpl.rollback=--- ConnectionImpl.rollback:.
#
# <NOI18N: DBVendorType>
#
sqlstore.database.dbvendor.castRequiredForNumericValues=<-> DBVendorType.isCastRequiredForNumericValues(): {0}.
sqlstore.database.dbvendor.getModFunctionName=<-> DBVendorType.getModFunctionName(): {0}.
sqlstore.database.dbvendor.getNullComparisonFunctionName=<-> DBVendorType.getNullComparisonFunctionName(): {0}.
sqlstore.database.dbvendor.getConcatCast=<-> DBVendorType.getConcatCast(): {0}.
sqlstore.database.dbvendor.getSpecialDBOperation=<-> DBVendorType.getSpecialDBOperation(): {0}.
sqlstore.database.dbvendor.getabs=<-> DBVendorType.getAbs(): {0}.
sqlstore.database.dbvendor.getcharlength=<-> DBVendorType.getCharLength(): {0}.
sqlstore.database.dbvendor.getforupdate=<-> DBVendorType.getForUpdate(): {0}.
sqlstore.database.dbvendor.getholdlock=<-> DBVendorType.getHoldlock(): {0}.
sqlstore.database.dbvendor.getisnotnull=<-> DBVendorType.getIsNotNull(): {0}.
sqlstore.database.dbvendor.getisnull=<-> DBVendorType.getIsNull(): {0}.
sqlstore.database.dbvendor.getleftjoin=<-> DBVendorType.getLeftJoin(): {0}.
sqlstore.database.dbvendor.getleftjoinpost=<-> DBVendorType.getLeftJoinPost(): {0}.
sqlstore.database.dbvendor.getleftlikeescape=<-> DBVendorType.getLeftLikeEscape(): {0}.
sqlstore.database.dbvendor.getnotequal=<-> DBVendorType.getNotEqual(): {0}.
sqlstore.database.dbvendor.getposition3args=<-> DBVendorType.getPositionThreeArrgs(): {0}.
sqlstore.database.dbvendor.getposition=<-> DBVendorType.getPosition(): {0}.
sqlstore.database.dbvendor.getpositionin=<-> DBVendorType.getPositionIn(): {0}.
sqlstore.database.dbvendor.getpositionsrchsrc=<-> DBVendorType.getPositionSearchSource(): {0}.
sqlstore.database.dbvendor.getquotecharstart=<-> DBVendorType.getQuoteCharStart(): {0}.
sqlstore.database.dbvendor.getrightjoinipre=<-> DBVendorType.getRightJoin(): {0}.
sqlstore.database.dbvendor.getrightlikeescape=<-> DBVendorType.getRightLikeEscape(): {0}.
sqlstore.database.dbvendor.getrtrim=<-> DBVendorType.getRtrim(): {0}.
sqlstore.database.dbvendor.getrtrimpost=<-> DBVendorType.getRtrimPost(): {0}.
sqlstore.database.dbvendor.getsqrt=<-> DBVendorType.getSqrt(): {0}.
sqlstore.database.dbvendor.getstringconcat=<-> DBVendorType.getStringConcat(): {0}.
sqlstore.database.dbvendor.getsubstring=<-> DBVendorType.getSubstring(): {0}.
sqlstore.database.dbvendor.getsubstringfor=<-> DBVendorType.getSubstringFor(): {0}.
sqlstore.database.dbvendor.getsubstringfrom=<-> DBVendorType.getSubstringFrom(): {0}.
sqlstore.database.dbvendor.gettablelistend=<-> DBVendorType.getTableListEnd(): {0}.
sqlstore.database.dbvendor.gettableliststart=<-> DBVendorType.getTableListStart(): {0}.
sqlstore.database.dbvendor.isAnsiTrim=<-> DBVendorType.isAnsiTrim(): {0}.
sqlstore.database.dbvendor.isInlineNumeric=<-> DBVendorType.isInlineNumeric(): {0}.
sqlstore.database.dbvendor.isNativeOuterJoin=<-> DBVendorType.isNativeOuterJoin(): {0}.
sqlstore.database.dbvendor.isParameterCast=<-> DBVendorType.isParameterCast(): {0}.
sqlstore.database.dbvendor.isdistinctupdatelocksupported=<-> DBVendorType.isDistinctSupportedWithUpdateLock(): {0}.
sqlstore.database.dbvendor.islockcolumnlistsupported=<-> DBVendorType.isLockColumnListSupported(): {0}.
sqlstore.database.dbvendor.isupdatelocksupported=<-> DBVendorType.isUpdateLockSupported(): {0}.
sqlstore.database.dbvendor.mapemptystrtonull=<-> DBVendorType.mapEmptyStringToNull(): {0}.
sqlstore.database.dbvendor.overrideproperties.with=<-> DBVendorType.overrideProperties() : {0} with: {1}.
sqlstore.database.dbvendor.overrideproperties=<-> DBVendorType.overrideProperties() - NONE.
sqlstore.database.dbvendor.supportslikeescape=<-> DBVendorType.supportsLikeEscape(): {0}.
sqlstore.database.dbvendor.vendorname=<-> DBVendorType(), vendorName: [{0}]  vendorType: {1}.
#
# <NOI18N: TransactionImpl>
#
sqlstore.transactionimpl.call.info={0} Tran[ {1} ].{2}: {3} for  {4}.
sqlstore.transactionimpl.call={0} Tran[ {1} ].{2}:status = {3}, txType: {4} for  {5}.
sqlstore.transactionimpl.closeconnection=--- TransactionImpl.closeConnection() {0} for {1}.
sqlstore.transactionimpl.general={0}.
sqlstore.transactionimpl.getconnection=--- TransactionImpl.getConnection(): {0} TX optimistic: {1} referenceCount = {2} for {3}.
sqlstore.transactionimpl.releaseconnection=--- TransactionImpl.releaseConnection(): TX optimistic: {0} Inside Commit: {1} referenceCount: {2} for {3}.
sqlstore.transactionimpl.rollbackconnection=--- TransactionImpl.rollbackConnection(): {0} for {1}.
sqlstore.transactionimpl.status={0} Tran[ {1} ].setStatus: {2} => {3} for {4}.


###############################################################################
# All the source files under subdir ejb.
# Message ID Range: JDO76600 - JDO76699
###############################################################################
#
#EJBHelper messages
#
# {0} - method name
ejb.ejbhelper.nonmanaged=JDO76600: \u975e\u7ba1\u7406\u5bfe\u8c61\u74b0\u5883\u3067\u306f\u30e1\u30bd\u30c3\u30c9 {0} \u3092\u547c\u3073\u51fa\u305b\u307e\u305b\u3093\u3002

#
# Common messages between SunContainerHelper and DeploymentHelper
# so they have a neutral key, that still starts with "ejb".
#
# {0} - jndi name.
ejb.jndi.lookupfailed=JDO76604: cmp-resource ''{0}'' \u306e JNDI \u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002
JDO76604.diag.cause.1=\u3053\u306e JNDI \u540d\u3092\u6301\u3064 CMP \u30ea\u30bd\u30fc\u30b9\u3068\u3001\u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u306e\u767b\u9332\u306f\u3042\u308a\u307e\u305b\u3093\u3002
JDO76604.diag.cause.1=\u3053\u306e JNDI \u540d\u3092\u6301\u3064 CMP \u30ea\u30bd\u30fc\u30b9\u3068\u3001\u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u306e\u767b\u9332\u306f\u3042\u308a\u307e\u305b\u3093\u3002
JDO76604.diag.check.1=\u4f7f\u7528\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u306e JNDI \u540d\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002
JDO76604.diag.check.2=\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b CMP \u30ea\u30bd\u30fc\u30b9\u306e JNDI \u540d\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002

# {0} - jndi name.
# {1} - returned class name.
ejb.jndi.unexpectedinstance=JDO76605: cmp-resource ''{0}'' \u306e JNDI \u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u3067\u3001\u4e88\u671f\u305b\u306c\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 {1} \u304c\u8fd4\u3055\u308c\u307e\u3057\u305f\u3002
JDO76605.diag.cause.1=\u3053\u306e JNDI \u540d\u3092\u6301\u3064 CMP \u30ea\u30bd\u30fc\u30b9\u306f\u3001jdbc-resource \u307e\u305f\u306f persistence-manager-factory-resource \u3092\u53c2\u7167\u3057\u307e\u305b\u3093\u3002
JDO76604.diag.cause.1=\u3053\u306e JNDI \u540d\u3092\u6301\u3064 CMP \u30ea\u30bd\u30fc\u30b9\u3068\u3001\u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u306e\u767b\u9332\u306f\u3042\u308a\u307e\u305b\u3093\u3002
JDO76604.diag.check.1=\u4f7f\u7528\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u306e JNDI \u540d\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002
JDO76604.diag.check.2=\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b CMP \u30ea\u30bd\u30fc\u30b9\u306e JNDI \u540d\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002

#
# DeploymentHelper messages - ejb
#
#
#<NOI18N: DeploymentHelper>
#
ejb.DeploymentHelper.getconnection=Getting connection for JNDI name ''{0}''.

# The messages JDO76606 through JDO76615 that were originally here 
# have been moved to 
# cmp/support/ejb/src/com/sun/jdo/spi/persistence/support/ejb/ejbc/Bundle.properties
# As part of INF#
# So do not use these messages. 


#
#CMPHelper messages
#
ejb.cmphelper.nonmanaged=JDO76613: CMPHelper \u306e\u30a2\u30af\u30bb\u30b9\u306f\u7121\u52b9\u3067\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306f CMP \u306e\u30b5\u30dd\u30fc\u30c8\u306e\u307f\u306b\u4f7f\u7528\u3055\u308c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u30fc\u306e\u5916\u3067\u547c\u3073\u51fa\u3059\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002

#
#SunTransactionHelper messages
#

# {0} class name
ejb.SunTransactionHelper.wrongdatasourcetype=JDO76616: \u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u30bf\u30a4\u30d7\u304c\u3001\u5fc5\u8981\u30bf\u30a4\u30d7\u3068\u7570\u306a\u308a\u307e\u3059\u3002\u5fc5\u8981\u30bf\u30a4\u30d7: com.sun.appserv.jdbc.DataSource got: {0}\u3002


###############################################################################
# <Generic messages. Add new messages to this section only if none of the above categories can be used.>
###############################################################################
#
# <NOI18N: generic>
#
vendor=Sun Microsystems
# majorVersion (minorVersion) buildDate
fullVersion={0} ({1}) {2}
#
# <NOI18N: This messages are used for JDOFatalInternalException from multiple places. No need to I18N>
#
core.generic.unknownfield=The field {0} is not a member of the class {1}.
core.generic.unknownexception=Got an unknown exception.
core.generic.nullparam=The {0} parameter is null.
core.generic.notinstanceof=The object of class {0} is not an instance of {1}.


###############################################################################
# <These messages are used from multiple places in code.It is absolutely necessary to cleanup code
# to use different messages >
###############################################################################
core.configuration.cantloadclass=\u30af\u30e9\u30b9 {0} \u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3067\u3057\u305f\u3002
sqlstore.exception.log=Exception.
jdo.lifecycle.deleted.accessField=\u524a\u9664\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u305b\u3093\u3002
