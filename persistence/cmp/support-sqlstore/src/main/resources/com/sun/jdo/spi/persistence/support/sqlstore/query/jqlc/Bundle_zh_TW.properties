#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

# resource bundle for runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 79.
# 
# This file is divided into following sections. 
# 1. main compiler class
# 2. error message helper class
# 3. syntax error messages
# 4. semantic error messages
# 5. optimizer
# 6. code generation
# 7. Miscellaneous
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of appropriate section.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered 
#    message in a section + 1.
# 4. Please do not change the message ID for existing messages. These 
#    numbers are potentially mapped to more explanation about the message for 
#    the end user.
#

##############################################################################
#<main compiler class>
# Message ID Range: JDO79000 - JDO79099
#############################################################################

jqlc.jqlc.generic.nocandidateclass=JDO79000\uff1a\u7f3a\u5c11\u5019\u9078\u985e\u5225\u898f\u683c\u3002
jqlc.jqlc.checkcandidates.memorycollection=JDO79001\uff1a\u4e0d\u652f\u63f4\u67e5\u8a62\u975e\u5ef6\u4f38\u96c6\u5408\u3002
jqlc.jqlc.checkcandidates.mismatch=JDO79002\uff1a\u5019\u9078\u96c6\u5408\u8207\u5019\u9078\u985e\u5225 ''{0}'' \u4e0d\u76f8\u7b26\u3002
# {0} - name of the compiler pass
LOG_JQLCStartPass=JDO79003\uff1aJQLC \u555f\u52d5 {0}
# {0} - name of the compiler pass
LOG_JQLCDumpTree=JDO79004\uff1aJQLC \u50be\u5370\u6a39 {0}
LOG_JQLCReuseRetrieveDesc=JDO79005\uff1aJQLC \u91cd\u8907\u4f7f\u7528\u5feb\u53d6\u7684 RetrieveDesc

#############################################################################
#<error message helper class>
#                  it is the last arg for each of them that contains the 
#                  actual message.
#############################################################################
jqlc.errormsg.generic.msg={0}\uff1a{1}
jqlc.errormsg.generic.msgcolumn={0} \u6b04({1})\uff1a{2}
jqlc.errormsg.generic.msglinecolumn={0} \u884c({1}) \u6b04({2})\uff1a{3}

#############################################################################
#<syntax error messages>
# Message ID Range: JDO79100 - JDO79199
#############################################################################

jqlc.parser.syntaxerror=JDO79100\uff1a\u8a9e\u6cd5\u932f\u8aa4\u3002
jqlc.parser.syntaxerrorattoken=JDO79101\uff1a\u5728 "{0}" \u8655\u767c\u751f\u8a9e\u6cd5\u932f\u8aa4\u3002
jqlc.parser.unexpectedtoken=JDO79102\uff1a\u672a\u9810\u671f\u7684\u8a9e\u6cd5\u932f\u8aa4\u8a18\u865f "{0}"\u3002
jqlc.parser.unexpectedchar=JDO79103\uff1a\u672a\u9810\u671f\u7684\u8a9e\u6cd5\u932f\u8aa4\u5b57\u5143 "{0}"\u3002
jqlc.parser.expectedfoundchar=JDO79104\uff1a\u9810\u671f\u7684\u8a9e\u6cd5\u932f\u8aa4\u5b57\u5143 "{0}"\uff0c\u627e\u5230 "{1}"\u3002
jqlc.parser.unexpectedEOF=JDO79105\uff1a\u672a\u9810\u671f\u7d50\u675f\u6587\u672c\u6642\u767c\u751f\u8a9e\u6cd5\u932f\u8aa4\u3002

#############################################################################
#<semantic error messages>
# Message ID Range: JDO7109200 - JDO79399
#############################################################################

# semantic error messages (unsupported operations)

jqlc.semantic.analysebitwiseexpr.exclusiveorop=JDO79200\uff1a\u4e0d\u652f\u63f4\u5c08\u7528\u6216\u904b\u7b97\u5b50 ^\u3002
jqlc.semantic.analysebitwiseexpr.integerbitwiseop=JDO79201\uff1a\u4e0d\u652f\u63f4\u6574\u6578\u4f4d\u5143\u904b\u7b97\u5b50 {0}\u3002
jqlc.semantic.analysecollectioncall.unsupportedcollectionexpr=JDO79202\uff1a\u4e0d\u652f\u63f4\u96c6\u5408\u8868\u793a\u5f0f ''{0}''\u3002
jqlc.semantic.analysecollectioncall.nonvariable=JDO79203\uff1a\u9810\u671f\u7684\u8b8a\u6578 \uff0d \u975e\u8b8a\u6578\u5305\u542b\u4e0d\u53d7\u652f\u63f4\u7684\u5f15\u6578\u3002
jqlc.semantic.generic.unsupportedconstraintop=JDO79204\uff1a\u4e0d\u652f\u63f4 variable constraint \u9673\u8ff0\u5f0f\u7684\u4f5c\u696d ''{0}''\u3002
jqlc.semantic.candidateclass.nonpc=JDO79205\uff1a\u985e\u5225 "{0}" \u4e0d\u5177\u6709\u6301\u7e8c\u6027\u3002\u67e5\u8a62\u4e0d\u652f\u63f4 Non-persistence-capable \u5019\u9078\u985e\u5225\u3002
jqlc.semantic.checkvalidorderingexpr.invalidordering=JDO79206\uff1a\u6392\u5e8f\u898f\u683c\u4e2d\u4e0d\u652f\u63f4\u8868\u793a\u5f0f ''{0}''\u3002
jqlc.semantic.checkvalidresultexpr.invalidresult=JDO79207\uff1a\u7d50\u679c\u898f\u683c\u4e2d\u4e0d\u652f\u63f4\u8868\u793a\u5f0f ''{0}''\u3002

# semantic error messages (user errors)

jqlc.semantic.analysecollectioncall.typemismatch=JDO79208\uff1a\u96c6\u5408\u5143\u7d20\u985e\u578b ''{0}'' \u8207\u8b8a\u6578\u985e\u578b ''{1}'' \u4e0d\u76f8\u5bb9\u3002
jqlc.semantic.analysecollectioncall.relationshipexpected=JDO79209\uff1a\u9810\u671f\u7684\u95dc\u4fc2\u6b04\u4f4d ''{0}''\u3002
jqlc.semantic.analysedotexpr.classexprexpected=JDO79210\uff1a\u9810\u671f\u7684\u985e\u5225\u985e\u578b\u8868\u793a\u5f0f\u3002
jqlc.semantic.analysefieldaccess.nonperistentfield=JDO79211\uff1a\u7121\u6cd5\u5b58\u53d6\u5177\u6709\u6301\u7e8c\u6027\u985e\u5225 ''{1}'' \u7684\u975e\u6301\u7e8c\u6027\u6b04\u4f4d ''{0}''\u3002
jqlc.semantic.analysefieldaccess.nonpublicfield=JDO79212\uff1a\u7121\u6cd5\u5b58\u53d6\u975e\u6301\u7e8c\u6027\u985e\u5225 ''{1}'' \u7684\u975e\u516c\u7528\u6b04\u4f4d ''{0}''\u3002
jqlc.semantic.analysestaticfieldaccess.staticreference=JDO79213\uff1a\u7121\u6cd5\u5c0d\u985e\u5225 ''{1}'' \u7684\u975e\u975c\u614b\u8b8a\u6578 ''{0}'' \u9032\u884c\u975c\u614b\u53c3\u7167\u3002
jqlc.semantic.analysestaticfieldaccess.nonpublicfield=JDO79214\uff1a\u7121\u6cd5\u5b58\u53d6\u985e\u5225 ''{1}'' \u7684\u975e\u516c\u7528\u975c\u614b\u6b04\u4f4d ''{0}''\u3002
jqlc.semantic.analyserelationalexpr.notorderable=JDO79215\uff1a{1} \u7684\u904b\u7b97\u5143\u985e\u578b ''{0}'' \u662f\u4e0d\u53ef\u6392\u5e8f\u7684\u3002
jqlc.semantic.expression.undefined=JDO79216\uff1a\u672a\u5b9a\u7fa9\u8868\u793a\u5f0f ''{0}''\u3002
jqlc.semantic.filter.booleanexpected=JDO79217\uff1a\u9810\u671f\u5e03\u6797\u8868\u793a\u5f0f\uff0c\u7be9\u9078\u8868\u793a\u5f0f\u7684\u985e\u578b\u70ba ''{0}''\u3002
jqlc.semantic.generic.alreadydeclared=JDO79218\uff1a''{0}'' \u5df2\u5ba3\u544a\u70ba {1}\u3002
jqlc.semantic.generic.arguments.numbermismatch=JDO79219\uff1a\u5f15\u6578\u6578\u76ee\u932f\u8aa4\u3002
jqlc.semantic.generic.arguments.typemismatch=JDO79220\uff1a\u5be6\u969b\u53c3\u6578\u7684\u985e\u578b\u4e0d\u76f8\u5bb9\u3002\u7121\u6cd5\u5c07 ''{0}'' \u8f49\u63db\u70ba ''{1}''\u3002
jqlc.semantic.generic.arguments.invalid=JDO79221\uff1a''{0}'' \u7684\u5f15\u6578\u7121\u6548\u3002
jqlc.semantic.generic.invalidmethodcall=JDO79222\uff1a\u65b9\u6cd5\u547c\u53eb\u7121\u6548\u3002
jqlc.semantic.generic.unknownfield=JDO79223\uff1a\u6c92\u6709\u70ba\u985e\u5225 ''{1}'' \u5b9a\u7fa9\u6b04\u4f4d ''{0}''\u3002
jqlc.semantic.generic.unknowntype=JDO79224\uff1a\u985e\u578b ''{0}'' \u672a\u77e5\u3002
jqlc.semantic.identifier.undefined=JDO79225\uff1a\u672a\u5b9a\u7fa9\u8b58\u5225\u78bc "{0}"\u3002
jqlc.semantic.primary.invalidcast=JDO79226\uff1a\u7121\u6cd5\u5c07\u8868\u793a\u5f0f\u985e\u578b ''{0}'' \u8f49\u63db\u70ba\u985e\u578b ''{1}''\u3002
jqlc.semantic.type.notype=JDO79227\uff1a\u9810\u671f\u985e\u578b\uff0c''{0}'' \u5df2\u5b9a\u7fa9\u70ba {1}\u3002
jqlc.semantic.analyseorderingexpression.notorderable=JDO79228\uff1a\u6392\u5e8f\u8868\u793a\u5f0f\u7684\u985e\u578b ''{0}'' \u662f\u4e0d\u53ef\u6392\u5e8f\u7684\u3002
jqlc.semantic.checkvalidresultexpr.invalidavgsumexpr=JDO79229\uff1a''{1}'' \u5408\u4f75\u8868\u793a\u5f0f\u7684\u985e\u578b ''{0}'' \u4e0d\u662f\u6578\u5b57\u6216\u5b57\u5143\u985e\u578b\u3002
jqlc.semantic.checkvalidresultexpr.invalidminmaxexpr=JDO79230\uff1a''{1}'' \u5408\u4f75\u8868\u793a\u5f0f\u7684\u985e\u578b ''{0}'' \u662f\u4e0d\u53ef\u6392\u5e8f\u7684\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresultfield=JDO79231\uff1a\u660e\u78ba\u7d50\u679c\u6b04\u4f4d\u8868\u793a\u5f0f ''{0}'' \u548c\u6392\u5e8f\u8868\u793a\u5f0f ''{1}'' \u4e0d\u76f8\u5bb9\u3002\u5b83\u5011\u5fc5\u9808\u70ba\u540c\u4e00\u6b04\u4f4d\u3002
jqlc.semantic.checkresultordering.invalidorderingfordistinctresult=JDO79232\uff1a\u7d50\u679c\u8868\u793a\u5f0f ''distinct {0}'' \u548c\u6392\u5e8f\u8868\u793a\u5f0f ''{1}'' \u4e0d\u76f8\u5bb9\u3002\u5b83\u5011\u5fc5\u9808\u662f\u5728\u540c\u4e00\u985e\u5225\u4e2d\u4f7f\u7528\u8a72\u985e\u5225\u4e4b\u5c0e\u89bd\u8868\u793a\u5f0f\u7684\u6b04\u4f4d\u3002

# query parameter table

jqlc.parametertable.checkunboundparams.unboundparam=JDO79233\uff1a\u7121\u754c\u9650\u67e5\u8a62\u53c3\u6578 ''{0}''\u3002
jqlc.parametertable.definevaluebyname.undefinedparam=JDO79234\uff1a\u672a\u5b9a\u7fa9\u67e5\u8a62\u53c3\u6578 ''{0}''\u3002
jqlc.parametertable.definevaluebyindex.wrongnumberofargs=JDO79235\uff1a\u5f15\u6578\u6578\u76ee\u932f\u8aa4\u3002
jqlc.parametertable.definevaluebyindex.typemismatch=JDO79236\uff1a\u5be6\u969b\u53c3\u6578\u7684\u985e\u578b\u4e0d\u76f8\u5bb9\u3002\u7121\u6cd5\u5c07 ''{0}'' \u8f49\u63db\u70ba ''{1}''\u3002

#############################################################################
#<optimizer>
# Message ID Range: JDO79400 - JDO79499
#############################################################################

jqlc.optimizer.staticfieldaccess.illegal=JDO79400\uff1a\u7121\u6cd5\u5b58\u53d6\u985e\u5225 ''{1}'' \u7684\u975c\u614b\u6b04\u4f4d ''{0}''\u3002
jqlc.optimizer.literal.invalid=JDO79401\uff1a{0} \u6587\u5b57 ''{1}'' \u7121\u6548\u3002

#############################################################################
#<code generation>
# Message ID Range: JDO79500 - JDO79599
#############################################################################

jqlc.codegeneration.fieldaccess.illegal=JDO79500\uff1a\u7121\u6cd5\u5b58\u53d6\u7269\u4ef6 ''{1}'' \u7684\u6b04\u4f4d ''{0}''\u3002
jqlc.codegeneration.collectioncomparison.nonnull=JDO79501\uff1a\u4e0d\u652f\u63f4\u96c6\u5408\u8207\u975e\u7a7a\u503c\u7684\u6bd4\u8f03\u3002
jqlc.codegeneration.generic.unsupportedop=JDO79502\uff1a\u4e0d\u652f\u63f4\u4f5c\u696d ''{0}''
jqlc.codegeneration.substring.beginnegative=JDO79503\uff1a\u5b50\u5b57\u4e32\u65b9\u6cd5\u7684\u958b\u59cb\u7d22\u5f15 ''{0}'' \u662f\u8ca0\u503c\u3002
jqlc.codegeneration.substring.beginlargerend=JDO79504\uff1a\u5b50\u5b57\u4e32\u65b9\u6cd5\u7684\u958b\u59cb\u7d22\u5f15 ''{0}'' \u5927\u65bc\u7d50\u675f\u7d22\u5f15 ''{1}''\u3002
jqlc.codegeneration.resultExpr.missingpkfields=JDO79505\uff1a\u4e0d\u652f\u63f4\u8a08\u6578\u8868\u793a\u5f0f\u3002\u8868\u793a\u5f0f\u985e\u578b ''{0}'' \u70ba\u6c92\u6709\u4e3b\u9375\u6b04\u4f4d\u7684\u6301\u7e8c\u6027\u985e\u5225\u3002

#############################################################################
#<Miscellaneous>
# Message ID Range: JDO79600 - JDO79699
#############################################################################
# {0} - RetrieveDesc info
LOG_JQLCDumpRD=JDO79600\uff1aJQLC \u50be\u5370 RetrieveDesc {0}

# variable table

jqlc.variabletable.markconstraint.multiple=JDO79601\uff1a\u8b8a\u6578 ''{0}'' \u7684\u591a\u91cd\u9650\u5236\u3002
jqlc.variabletable.checkconstraint.unused=JDO79602\uff1a\u5df2\u5b9a\u7fa9\u8b8a\u6578 ''{0}''\uff0c\u4f46\u672a\u4f7f\u7528\u3002
jqlc.variabletable.checkconstraint.cycle=JDO79603\uff1a\u4e0d\u652f\u63f4\u8b8a\u6578 ''{0}'' \u7684\u5faa\u74b0\u9650\u5236\u5b9a\u7fa9\u3002
jqlc.variabletable.merge.different=JDO79604\uff1a\u540c\u4e00\u8b8a\u6578 ''{0}'' \u7684\u4e0d\u540c\u9650\u5236\u3002


###############################################################################
# <NOI18N: These messages are used for JDOFatalInternalException. These are not
# for end user. There is no message ID.>
###############################################################################
#
# <NOI18N>
#
jqlc.jqlc.checkcandidates.nullpc=Persistence capable class of extent collection is null.

jqlc.parser.invalidunicodestr=JQLLexer.UNICODE_STR 

jqlc.parametertable.getvaluebyname.undefined=ParameterTable.getValueByName: undefined parameter {0}.
jqlc.parametertable.getvaluebyindex.wrongindex=ParameterTable.getValueByIndex: wrong index {0}.
jqlc.parametertable.definevaluebyindex.wrongindex=ParameterTable.defineValueByIndex: wrong index {0}.

jqlc.semantic.checkcandidateclass.unknowntype=Semantic.checkCandidateClass: unknown type {0}.
jqlc.semantic.analysedefinedidentifier.illegalident=Semantic.analyseDefinedIdentifier: illegal identifier definition {0}.
jqlc.semantic.getcollectionfield.missingchildren=Semantic.getCollectionField: invalid node structure children missing.

jqlc.optimizer.checkbinaryplusop.invalidtype=Optimizer.checkBinaryPlusOp: invalid type {0}.
jqlc.optimizer.checkbinaryminusop.invalidtype=Optimizer.checkBinaryMinusOp: invalid type {0}.
jqlc.optimizer.checkmultiplicationop.invalidtype=Optimizer.checkMultiplicationOp: invalid type {0}.
jqlc.optimizer.checkdivisionop.invalidtype=Optimizer.checkDivisionOp: invalid type {0}.
jqlc.optimizer.checkmodop.invalidtype=Optimizer.checkModOp: invalid type {0}.
jqlc.optimizer.checkunaryminusop.invalidtype=Optimizer.checkUnaryMinusOp: invalid type {0}.
jqlc.optimizer.getbigdecimalvalue.notnumber=Optimizer.getBigDecimalValue: expected number value {0}.
jqlc.optimizer.getbigintegervalue.notnumber=Optimizer.getBigIntegerValue: expected number value {0}.
jqlc.optimizer.isempty.requirecollection=Optimizer.isEmpty: requires collection value.

jqlc.codegeneration.generatesimplefieldvaluecomparison.invalidvalue=CodeGeneration.generateSimpleFieldValueComparison: invalid null value in relational operation.
jqlc.codegeneration.generateparametervaluecomparison.invalidvalue=CodeGeneration.generateParameterValueComparison: invalid null value in relational operation.
jqlc.codegeneration.getkeyfieldscomparisonbooleanop.invalidobj=CodeGeneration.getKeyFieldsComparisonBooleanOp: invalid object comparison operation {0}.
jqlc.codegeneration.filter.nonbooleanvalue=CodeGeneration.filter: invalid non boolean value {0}.
jqlc.codegeneration.primary.null=CodeGeneration.primary: invalid null value.

jqlc.variabletable.markused.varnotfound=VariableTable.markUsed variable {0} not found.
jqlc.variabletable.markused.multidep=VariableTable.markUsed multiple dependencies for variable {0} old: {1}, new: {2}.
jqlc.variabletable.markconstraint.varnotfound=VariableTable.markConstraint variable {0} not found.

jqlc.jdoqlparameterdeclarationparser.next.wrongtoken=ParameterDeclarationHelper.ParameterTypeIterator.next: wrong token type {0} expected PARAMETER_DEF node.

jqlc.queryvaluefetcher.getvalue.invalidparam=Invalid parameter index {0} parameter array has length {1}.
