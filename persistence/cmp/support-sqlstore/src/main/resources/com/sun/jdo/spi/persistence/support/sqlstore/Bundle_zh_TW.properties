#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
# or packager/legal/LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at packager/legal/LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

# Resource bundle for sqlstore runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# Please note that many package names and classnames have changed over time.
# Unfortunately, this file was not maintained to follow above convention.
# Please ignore if the package/class name does not match actual names as today.
#
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 76.
#
# This file is divided into the following sections:
# Under each section, messages that need not be I18Ned are separated under NOI18N. All other messages
# need to be numbered.
# 1. JDO:  PersistenceManagerFactory/PersistenceManager/ExtentCollection/LifeCycle
# 2. Model
# 3. StateManager
# 4. sql generator components: RetrieveDesc, ResultDesc plus all the files under generator subdir
# 5. SQLStoreManager
# 6. Connection/Connectionpool/Transaction/DBVendorType
# 7. EJB integration.
# 8. Generic messages.
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of appropriate section.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered
#    message in a section + 1.
# 4. Please do not change the message ID for existing messages. These
#    numbers are potentially mapped to more explanation about the message for
#    the end user.
#

####################################################################################################
# <All the source files under subdir impl (PersistenceManagerFactory/PersistenceManager etc.) >
# Message ID Range: JDO76000 - JDO76099
####################################################################################################
jdo.persistencemanagerfactoryimpl.getpersistencemanager.error=JDO76000\uff1a\u7121\u6cd5\u5728\u540c\u4e00\u4f5c\u696d\u4e8b\u4ef6\u4e2d\u4f7f\u7528\u4f7f\u7528\u8005\u540d\u7a31/\u5bc6\u78bc\u7684\u591a\u91cd\u7d44\u5408\u3002
jdo.persistencemanagerfactoryimpl.getpersistencemanager.notconfigured=JDO76001\uff1a\u672a\u914d\u7f6e PersistenceManagerFactory\u3002
jdo.persistencemanagerfactoryimpl.notsupported=JDO76002\uff1a\u4e0d\u652f\u63f4\u91dd\u5c0d\u5167\u90e8 PersistenceManagerFactoryImpl \u9032\u884c\u6b64\u4f5c\u696d\u3002
jdo.persistencemanagerimpl.acquireexclusivelock.interrupted=JDO76003\uff1a\u7531\u65bc InterruptedException\uff0c\u7121\u6cd5\u53d6\u5f97\u5c08\u7528\u9396\u5b9a
jdo.persistencemanagerimpl.acquiresharelock.failed=JDO76004\uff1a\u7531\u65bc _readWriteCount \u5c0f\u65bc\u96f6\uff0c\u7121\u6cd5\u53d6\u5f97\u5171\u7528\u9396\u5b9a
jdo.persistencemanagerimpl.acquiresharelock.interrupted=JDO76005\uff1a\u7531\u65bc InterruptedException\uff0c\u7121\u6cd5\u53d6\u5f97\u5171\u7528\u9396\u5b9a
jdo.persistencemanagerimpl.another_pm=JDO76006\uff1a\u7269\u4ef6\u8207\u53e6\u4e00\u500b PersistenceManager \u76f8\u95dc\u806f\u3002
jdo.persistencemanagerimpl.assertactivetransaction.error=JDO76007\uff1a\u8207\u6b64\u6301\u7e8c\u6027\u7ba1\u7406\u7a0b\u5f0f\u95dc\u806f\u7684\u4f5c\u696d\u4e8b\u4ef6\u4e0d\u5728\u4f7f\u7528\u4e2d\u3002
jdo.persistencemanagerimpl.assertclosed.closed=JDO76008\uff1aPersistenceManager \u5df2\u95dc\u9589\u3002
jdo.persistencemanagerimpl.assertpersistencecapable.error=JDO76009\uff1a\u672a\u91dd\u5c0d\u4e0d\u9700\u8a2d\u5b9a\u7684\u6301\u7e8c\u6027\u589e\u5f37\u985e\u5225 {0}\u3002\u4f7f\u7528 IDE \u7684 JAR \u6216 WAR \u5c01\u88dd\u7a0b\u5f0f\uff0c\u4ee5\u5728\u57f7\u884c\u4e4b\u524d\u5c01\u88dd\u5177\u6709\u6301\u7e8c\u6027\u7684\u985e\u5225\u3002\u6216\u8005\uff0c\u5c07\u4e3b\u985e\u5225\u7684\u57f7\u884c\u7a0b\u5f0f\u7279\u6027\u8a2d\u5b9a\u70ba\u6301\u7e8c\u6027\u57f7\u884c\u7a0b\u5f0f\uff0c\u4ee5\u5f9e IDE \u57f7\u884c\u3002
jdo.persistencemanagerimpl.close.activetransaction=JDO76010\uff1a\u6b64\u6301\u7e8c\u6027\u7ba1\u7406\u7a0b\u5f0f\u8207\u4e00\u500b\u958b\u555f\u7684\u4f5c\u696d\u4e8b\u4ef6\u76f8\u95dc\u806f\u3002
jdo.persistencemanagerimpl.fetchinstance.none=JDO76012\uff1a\u627e\u4e0d\u5230\u6b64 ObjectId \u7684\u7269\u4ef6\u3002
jdo.persistencemanagerimpl.internaldeletepersistent.transient=JDO76014\uff1a\u7121\u6cd5\u522a\u9664\u975e\u6301\u7e8c\u6027\u7269\u4ef6\u3002
jdo.persistencemanagerimpl.internalmakepersistent.dups=JDO76015\uff1a\u5177\u6709\u76f8\u540c\u4e3b\u9375\u7684\u5be6\u4f8b\u5df2\u5b58\u5728\u65bc\u6b64 PersistenceManager \u5feb\u53d6\u8a18\u61b6\u9ad4\u4e2d\u3002
jdo.persistencemanagerimpl.loadclassforoid.wrongoidclass=JDO76016\uff1a\u5f9e OID \u64f7\u53d6\u7269\u4ef6\u985e\u5225\u6642\u767c\u751f\u932f\u8aa4\u3002
jdo.persistencemanagerimpl.newscoinstance.wrongclass=JDO76017\uff1a\u7531\u65bc\u985e\u5225 {0} \u662f\u7121\u6548\u985e\u578b\uff0c\u7121\u6cd5\u5efa\u7acb\u5176 SCO \u5be6\u4f8b\u3002
jdo.persistencemanagerimpl.notprocessed=JDO76018\uff1a\u7531\u65bc\u5faa\u74b0\u76f8\u4f9d\u6027\uff0c\u7121\u6cd5\u6e05\u9664\u6301\u7e8c\u6027\u5be6\u4f8b\u3002
jdo.persistencemanagerimpl.releaseexclusivelock.failed=JDO76019\uff1a\u7531\u65bc _readWriteCount \u5927\u65bc\u96f6\uff0c\u7121\u6cd5\u91cb\u653e\u5c08\u7528\u9396\u5b9a
jdo.persistencemanagerimpl.releasesharelock.failed=JDO76020\uff1a\u7531\u65bc _readWriteCount \u70ba\u96f6\uff0c\u7121\u6cd5\u91cb\u653e\u5171\u7528\u9396\u5b9a
jdo.persistencemanagerwrapper.invalidpm=JDO76021\uff1aPersistenceManagerWrapper \u5df2\u95dc\u9589\u3002
jdo.extentcollection.constructor.invalidclass=JDO76022\uff1a\u5ef6\u4f38\u96c6\u5408\u7684\u985e\u5225 ''{0}'' \u7121\u6548\u3002
jdo.extentcollection.constructor.nonpc=JDO76023\uff1a\u985e\u5225 "{0}" \u4e0d\u5177\u6709\u6301\u7e8c\u6027\u3002
jdo.extentcollection.constructor.subclasses=JDO76024\uff1a\u4e0d\u652f\u63f4\u5ef6\u4f38\u96c6\u5408\u7684\u9078\u9805\u5b50\u985e\u5225\u70ba True\u3002
jdo.extentcollection.illegalmodification=JDO76025\uff1a\u5c0d\u985e\u5225 ''{0}'' \u4e4b\u5ef6\u4f38\u96c6\u5408\u7684\u4fee\u6539\u975e\u6cd5\u3002
jdo.extentcollection.methodnotsupported=JDO76026\uff1a\u4e0d\u652f\u63f4\u5ef6\u4f38\u96c6\u5408\u65b9\u6cd5 {0}\u3002
jdo.lifecycle.xactnotactive=JDO76027\uff1a\u9700\u8981\u4f7f\u7528\u4e2d\u7684\u4f5c\u696d\u4e8b\u4ef6\uff0c\u4ee5\u57f7\u884c\u6b64\u4f5c\u696d\u3002
jdo.persistencemanagerimpl.newinstance.badsm=JDO76028\uff1aStateManager \u672a\u5b8c\u5168\u914d\u7f6e\uff01
jdo.persistencemanagerimpl.setjtatransaction.notnulljta=JDO76029\uff1a\u5617\u8a66\u7528 {1} \u66ff\u4ee3\u975e\u7a7a\u7684 javax.transaction.Transaction\uff1a{0}\u3002
jdo.persistencemanagerfactoryimpl.getpersistencemgr.closed=JDO76030\uff1a\u6b64 javax.transaction.Transaction \u7684 PersistenceManager\uff1a{0} \u5df2\u95dc\u9589\u6216\u6b63\u5728\u78ba\u5b9a\u3002
jdo.persistencemanagerfactoryimpl.registerpm.registered=JDO76031\uff1ajavax.transaction.Transaction \u7684\u6b64\u5be6\u4f8b\uff1a{0} \u5df2\u4f7f\u7528\u5176\u4ed6 PersistenceManager \u8a3b\u518a\uff1a{1}\u3002
jdo.persistencemanagerimpl.verificationfailed=JDO76032\uff1a\u7248\u672c\u4e00\u81f4\u7684\u5be6\u4f8b\u5c0d\u8cc7\u6599\u5b58\u653e\u5340\u7684\u9a57\u8b49\u5931\u6557\u3002
jdo.persistencemanagerfactoryimpl.getversionconsistencycache.nullstore=JDO76033\uff1a\u672a\u914d\u7f6e StoreManager\u3002

#
# <NOI18N: LifeCycle>
#
sqlstore.state.lifecyclestate.changestate=LifeCycleState.changeState(), old state = {0}, new state = {1}.
sqlstore.state.lifecyclestate.initial=LifeCycleState.getLifeCycleState(), initial state = {0}.

#
# <NOI18N: PersistenceManager>
#
sqlstore.persistencemgr.acquireexclusivelock.count=acquireExclusiveLock(), thread {0} with _readWriteCount = {1}.
sqlstore.persistencemgr.acquireexclusivelock=acquireExclusiveock(), thread {0} going to wait.
sqlstore.persistencemgr.acquiresharedlock.rdwrcount=acquireShareLock(), thread {0} acquired shared lock with _readWriteCount ={1}.
sqlstore.persistencemgr.acquiresharedlock=acquireShareLock(), thread {0} going to wait.
sqlstore.persistencemgr.aftercompletion.process=---PersistenceManagerImpl.afterCompletion() process: {0}.
sqlstore.persistencemgr.aftercompletion=---PersistenceManagerImpl.afterCompletion() abort: {0}.
sqlstore.persistencemgr.assertactivetx.closed=--- PersistenceManagerImpl.assertActiveTransaction: Closed for  {0}.
sqlstore.persistencemgr.assertactivetx=--- PersistenceManagerImpl.assertActiveTransaction:  {0}.
sqlstore.persistencemgr.assertisopen=--- PersistenceManagerImpl.assertIsOpen: CLOSED for {0}.
sqlstore.persistencemgr.beforecompletion=---PersistenceManagerImpl.beforeCompletion().
sqlstore.persistencemgr.cacheproperties=PersistenceManagerImpl cache properties: _txCacheInitialCapacity={0}, _flushedCacheInitialCapacity={1}, _flushedCacheLoadFactor={2}, _weakCacheInitialCapacity={3}, _weakCacheLoadFactor={4}.
sqlstore.persistencemgr.deregisterinstance.verified=---PersistenceManagerImpl.deregisterInstance() -- deregistered with verify.
sqlstore.persistencemgr.deregisterinstance.verify=---PersistenceManagerImpl.deregisterInstance() with verify SM -- oid: {0}  for PersistenceManager: {1}  and JTA: {2}.
sqlstore.persistencemgr.deregisterinstance=---PersistenceManagerImpl.deregisterInstance() oid: {0}  for PersistenceManager: {1}  and JTA: {2}.
sqlstore.persistencemgr.getbyobjid=---PersistenceManagerImpl.getObjectById() OID:{0}  for PersistenceManager: {1} and JTA: {2}.
sqlstore.persistencemgr.getcurrentwrapper=---PersistenceManagerImpl.getCurrentWrapper() > current: {0}.
sqlstore.persistencemgr.getobjid.notpc=---PersistenceManagerImpl.getObjectId() NOT PC: {0}  for PersistenceManager: {1}.
sqlstore.persistencemgr.getobjid.notpm=---PersistenceManagerImpl.getObjectId() NOT PM: {0} for PersistenceManager: {1}  and JTA: {2}.
sqlstore.persistencemgr.getobjid= :{0} ---PersistenceManagerImpl.getObjectId() PC: {1} for PersistenceManager: {2} and JTA: {3}.
sqlstore.persistencemgr.internalcloneoid.old=---PersistenceManagerImpl.internalCloneOid(): old: {0}  new: {1} same: {2}.
sqlstore.persistencemgr.internalcloneoid=---PersistenceManagerImpl.internalCloneOid() ERROR: {0}.
sqlstore.persistencemgr.isactivetx=---PersistenceManagerImpl.isActiveTransaction() : {0}.
sqlstore.persistencemgr.isnontxread=---PersistenceManagerImpl.isNontransactionalRead() : {0}.
sqlstore.persistencemgr.isoptimistic=---PersistenceManagerImpl.isOptimisticTransaction() : {0}.
sqlstore.persistencemgr.loadingclass=Loading ... ClassName: {0}.
sqlstore.persistencemgr.loadingfile=Loading ... FileName: {0} {1} {2}.
sqlstore.persistencemgr.makepersistent.done=---PersistenceManagerImpl.makePersistent() {0}  finished for: {1}  and JTA: {2}.
sqlstore.persistencemgr.makepersistent= {0} ---PersistenceManagerImpl.makePersistent() PC: {1} for PersistenceManager: {2} and JTA: {3}.
sqlstore.persistencemgr.newcollection=---PersistenceManagerImpl.newCollectionInstanceInternal() type: {0}.
sqlstore.persistencemgr.popcurrentwrapper=---PersistenceManagerImpl.popCurrentWrapper() > current: {0}  prev: {1}.
sqlstore.persistencemgr.pushcurrentwrapper=---PersistenceManagerImpl.pushCurrentWrapper() > current: {0}  new: {1}.
sqlstore.persistencemgr.registerinstance= {0} ---PersistenceManagerImpl.registerInstance() oid/sm: {1}/{2}  for PersistenceManager: {3}  and JTA: {4}.
sqlstore.persistencemgr.registerinstancein_txc=registerInstance in TXC :{0} / {1} for PersistenceManager: {2} and JTA: {3}.
sqlstore.persistencemgr.registerinstancein_wkc=registerInstance in WKC.
sqlstore.persistencemgr.releaseexclusivelock=releaseExclusiveock(), thread {0} with _readWriteCount = {1}.
sqlstore.persistencemgr.releasesharedlock=releaseShareLock(), thread {0} with _readWriteCount = {1}.
sqlstore.persistencemgr.replacingdeletedinstance=Replacing deleted instance with new for Object Id: {0}.
sqlstore.persistencemgr.setkeyfields=---PersistenceManagerImpl.setKeyFields() ERROR: {0}.
#
# <NOI18N: PersistenceManagerFactory>
#
sqlstore.sqlpersistencemgrfactory.getfrompool.pmt=<--SQLPersistenceManagerFactory.getFromPool() PM: {0} for JTA {1}.
sqlstore.sqlpersistencemgrfactory.getfrompool=<--SQLPersistenceManagerFactory.getFromPool().
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.found= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() FOUND javax.transaction.Transaction: {1}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.jdotx.notfound=<->SQLPersistenceManagerFactory.getPersistenceManager() NOT FOUND JDO Transaction:.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.jdotx=<->SQLPersistenceManagerFactory.getPersistenceManager() JDO Transaction: {0}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.pmclosedfor= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() PM is CLOSED FOR: {1}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr.pmt= {0} <->SQLPersistenceManagerFactory.getPersistenceManager() : {1} for JTA: {2}.
sqlstore.sqlpersistencemgrfactory.getpersistencemgr=:{0} -->SQLPersistenceManagerFactory.getPersistenceManager().
sqlstore.sqlpersistencemgrfactory.init=---SQLPersistenceManagerFactory.initialize().
sqlstore.sqlpersistencemgrfactory.pmCacheBucketSize=---SQLPersistenceManagerFactory pmCacheBucketSize = {0}.
sqlstore.sqlpersistencemgrfactory.pmCacheInitialCapacity=---SQLPersistenceManagerFactory pmCacheInitialCapacity = {0}.
sqlstore.sqlpersistencemgrfactory.registerpersistencemgr.pmt=<->SQLPersistenceManagerFactory.registerPersistenceManager() PM: {0} for JTA Tx: {1}.
sqlstore.sqlpersistencemgrfactory.releasepm.pmt=---SQLPersistenceManagerFactory.releasePersistenceManager() PM:{0} for JTA Tx: {1}.
sqlstore.sqlpersistencemgrfactory.returnToPool=<--SQLPersistenceManagerFactory.returnToPool().


###############################################################################
# <Model>
# Message ID Range: JDO76100 - JDO76199
###############################################################################
core.configuration.columnnotable=JDO76100\uff1a\u6b04\u63cf\u8ff0\u5143\u7121\u6709\u6548\u7684\u8868\u683c\u63cf\u8ff0\u5143\u3002
core.configuration.fieldnotable=JDO76101\uff1a\u6b04\u4f4d {0} \u8207\u4efb\u4f55\u8868\u683c\u5747\u7121\u95dc\u806f\u3002
core.configuration.fieldnotmapped=JDO76102\uff1a\u672a\u5c0d\u6620\u985e\u5225 {1} \u7684\u6301\u7e8c\u6027\u6b04\u4f4d {0}\u3002
core.configuration.iddescnofield=JDO76103\uff1a\u672a\u6b63\u78ba\u8a2d\u5b9a SqlIDDesc \u7269\u4ef6\u3002\u7121\u53ef\u7528\u7684\u6b04\u4f4d\u63cf\u8ff0\u5143\u3002
core.configuration.loadfailed.class=JDO76104\uff1a\u7121\u6cd5\u8f09\u5165\u985e\u5225 {0} \u7684\u914d\u7f6e\u3002
core.configuration.noneexistentpkfield=JDO76105\uff1aObjectId \u985e\u5225 {1} \u4e2d\u7684\u6b04\u4f4d {0} \u672a\u5b58\u5728\u65bc PersistenceCapable \u985e\u5225 {2} \u4e2d\u3002
core.configuration.unsupportedconsistencylevel=JDO76106\uff1a\u985e\u5225 {0} \u5177\u6709\u4e0d\u53d7\u652f\u63f4\u7684\u4e00\u81f4\u6027\u5c64\u7d1a\u3002\u76ee\u524d\u652f\u63f4\u7684\u4e00\u81f4\u6027\u5c64\u7d1a\u70ba\u300cnone\u300d\u3001\u300ccheck-modified-at-commit\u300d\u3001\u300clock-when-loaded\u300d\u548c\u300ccheck-version-of-accessed-instances\u300d\u3002
core.configuration.validationfailed=JDO76107\uff1a\u985e\u5225 {0} \u7684\u5c0d\u6620\u7121\u6548\uff1a\n{1}\u3002
core.configuration.validationproblem=JDO76108\uff1a\u985e\u5225 {0} \u4e2d\u767c\u751f\u9a57\u8b49\u932f\u8aa4\uff1a{1}
#
# <FieldDesc validation at runtime>
#
core.fielddesc.minvalue=JDO76109\uff1a\u503c\uff1a{0} \u5c0f\u65bc\u6240\u5141\u8a31\u7684\u6700\u5c0f\u503c\uff1a\u6b04\u4f4d\u985e\u578b {2} \u7684 {1}\u3002
core.fielddesc.maxvalue=JDO76110\uff1a\u503c\uff1a{0} \u5927\u65bc\u6240\u5141\u8a31\u7684\u6700\u5927\u503c\uff1a\u6b04\u4f4d\u985e\u578b {2} \u7684 {1}\u3002
core.configuration.noneexistentvcfield=JDO76111\uff1a\u6b04\u4f4d {0} \u6a19\u8a18\u70ba\u7248\u672c\u6b04\u4f4d\uff0c\u4f46\u672a\u5b58\u5728\u65bc PersistenceCapable \u985e\u5225 {1} \u4e2d\u3002
core.configuration.loadfailed.field=JDO76112\uff1a\u7121\u6cd5\u8f09\u5165\u985e\u5225 {1} \u4e2d\u7684\u6b04\u4f4d {0} \u7684\u914d\u7f6e\u3002

#
# <NOI18N: model>
#
sqlstore.model.classdesc.assocrelatedfield=associated relationship field = {0}.
sqlstore.model.classdesc.createsqldesc=creating SqlIDDesc from {0}.
sqlstore.model.classdesc.fieldinfo=field name = {0}, id= {1}.
sqlstore.model.classdesc.general={0}.{1} =>{2}
sqlstore.model.classdesc.getlocalfielddesc=<-> SqlPersistenceDesc.getLocalFieldDesc(), class ={0} added hidden field {1}  for column {2}.
sqlstore.model.classdesc.loadedclass=Successfully loaded oid class= {0}.
sqlstore.model.classdesc.persistconfiginit.exit=<-- SqlPersistenceConfig.initialize().
sqlstore.model.classdesc.persistconfiginit=--> SqlPersistenceConfig.initialize(), class = {0}.
sqlstore.model.classdesc.pkfield=PK field = {0}.
sqlstore.model.classdesc.primarytrackedfield=field {0} is the primary tracked field .
sqlstore.model.classdesc.unsetconcurrencychk=unsetting IN_CONCURRENCY_CHECK property for lf  {0}.
sqlstore.model.classdesc.unsetrefintegrityupdate=unsetting REF_INTEGRITY_UPDATES property for ff {0}.
sqlstore.model.classdesc.vcfield=Version consistency field = {0}.
sqlstore.model.fielddesc.addingfield=adding field {0} to be tracked by field {1}.
sqlstore.model.fielddesc.convertvalue.from_to=convertValue: {0} From: {1} To: {2}.
sqlstore.model.fielddesc.convertvalue.hidden=convertValue: hidden {0} ... return.
sqlstore.model.fielddesc.convertvalue=convertValue: NULL ... return.
sqlstore.model.fielddesc.fieldname={0} = {1}.
sqlstore.model.fielddesc.setupdesc=setupDesc(): fieldName {0} fieldType {1}.
sqlstore.model.configcacheimpl.size_before={0} size before cleanup: {1}.
sqlstore.model.configcacheimpl.size_after={0} size after cleanup: {1}.


###############################################################################
# <StateManager>
# Message ID Range: JDO76200 - JDO76299
###############################################################################
core.statemanager.anotherowner=JDO76200\uff1a\u7121\u6cd5\u6307\u5b9a\u53e6\u4e00\u500b\u7269\u4ef6\u6240\u64c1\u6709\u7684 SCO \u5be6\u4f8b\u3002
core.statemanager.cantnewoid=JDO76201\uff1a\u7121\u6cd5\u5efa\u7acb\u985e\u5225 {0} \u7684\u65b0\u4e3b\u9375\u5be6\u4f8b\u3002
core.statemanager.cantschedulejointable=JDO76202\uff1a\u7121\u6cd5\u5728\u985e\u5225 {0} \u548c\u985e\u5225 {1} \u4e4b\u9593\u6392\u7a0b\u9023\u7d50\u8868\u683c\u9805\u76ee\uff0c\u56e0\u70ba\u95dc\u4fc2\u6b04\u4f4d\u63cf\u8ff0\u70ba\u7a7a\u3002
core.statemanager.cantsetkeyfield=JDO76203\uff1a\u7121\u6cd5\u8a2d\u5b9a\u4e3b\u9375\u6b04\u4f4d {0} \u7684\u503c\u3002
core.statemanager.conflictingvalues=JDO76204\uff1a\u5c0d\u6620\u81f3\u540c\u4e00\u500b\u6b04\u7684\u6b04\u4f4d {0} \u548c\u6b04\u4f4d {1} \u4e4b\u9593\u5b58\u5728\u885d\u7a81\u7684\u503c
core.statemanager.getfieldfailed=JDO76205\uff1a\u7121\u6cd5\u53d6\u5f97\u6b04\u4f4d\u3002
core.statemanager.invalidpk=JDO76206\uff1a\u91cd\u65b0\u8f09\u5165\u5177\u6709\u6301\u7e8c\u6027\u985e\u5225 {1} \u7684\u5be6\u4f8b\u6642\uff0c\u7a7a\u4e3b\u9375\u6b04\u4f4d {0} \u7121\u6548\u3002\u5be6\u4f8b\u7684 ObjectId \u70ba {2}\u3002
core.statemanager.nopkupdate=JDO76207\uff1a\u4e0d\u5141\u8a31\u66f4\u65b0\u4e3b\u9375\u6b04\u4f4d\u3002
core.statemanager.nopm=JDO76208\uff1a\u72c0\u614b\u7ba1\u7406\u7a0b\u5f0f\u4e0d\u5305\u542b\u5c0d\u6301\u7e8c\u6027\u7ba1\u7406\u7a0b\u5f0f\u7684\u53c3\u7167\u3002
core.statemanager.notnavigable=JDO76209\uff1a\u5df2\u5617\u8a66\u5b58\u53d6\u985e\u5225 {1} \u7684\u6b04\u4f4d {0}\u3002\u6b64\u6b04\u4f4d\u5148\u524d\u672a\u5be6\u4f8b\u5316\uff0c\u4e14\u6b64\u985e\u5225\u4e0d\u5141\u8a31\u52d5\u614b\u5c0e\u89bd\u3002\u60a8\u5fc5\u9808\u5728\u64f7\u53d6\u6b64\u985e\u5225\u6642\u8acb\u6c42\u6b64\u6b04\u4f4d\uff0c\u6216\u8005\u5141\u8a31\u52d5\u614b\u5c0e\u89bd\uff0c\u4ee5\u4fbf\u5b58\u53d6\u6642\u53ef\u81ea\u52d5\u64f7\u53d6\u5b83\u3002
core.statemanager.objectnotfound=JDO76210\uff1a\u7269\u4ef6\u672a\u5b58\u5728\u65bc\u8cc7\u6599\u5b58\u653e\u5340\u4e2d\u3002
core.statemanager.poshiddenindex=JDO76211\uff1a\u96b1\u85cf\u6b04\u4f4d\u7684\u7d22\u5f15\u61c9\u70ba\u8ca0\u503c\uff0c\u4f46\u662f\u6211\u5011\u53d6\u5f97\u7684\u7d22\u5f15\u537b\u70ba {0}\u3002
core.statemanager.readonly=JDO76212\uff1a\u5df2\u5617\u8a66\u4fee\u6539\u985e\u5225 {1} \u7684\u552f\u8b80\u6b04\u4f4d {0}\u3002
core.statemanager.releaselock.wrongthread=JDO76213\uff1a\u6b64\u57f7\u884c\u7dd2 {0} \u4e0d\u6703\u66ab\u505c StateManager \u9396\u5b9a\u3002
core.statemanager.setfieldfailed=JDO76214\uff1a\u7121\u6cd5\u8a2d\u5b9a\u6b04\u4f4d\u3002
core.statemanager.wrongusageforoverlappingpkfkdelete=JDO76215\uff1a\u5f9e\u7ba1\u7406\u5f0f\u95dc\u4fc2\u4e2d\u79fb\u9664\u5be6\u4f8b\u7684\u5617\u8a66\u4e0d\u6b63\u78ba\u3002\u6b64\u95dc\u4fc2\u7531\u53e6\u4e00\u5074\u7684\u4e3b\u9375\u6b04\u5b9a\u7fa9\u3002\u5c0d\u96c6\u5408\u57f7\u884c\u79fb\u9664\u4f5c\u696d\u8981\u6c42\u66f4\u65b0\u53e6\u4e00\u5074\u7684\u6b04\uff0c\u4f46\u4e0d\u5141\u8a31\u4e3b\u9375\u66f4\u65b0\u3002\u56e0\u6b64\uff0c\u53ea\u6709\u660e\u78ba\u522a\u9664\u5be6\u4f8b\u6216\u4f7f\u7528\u91cd\u758a\u522a\u9664\uff0c\u624d\u80fd\u5f9e\u4e3b\u9375\u5b9a\u7fa9\u7684\u7ba1\u7406\u5f0f\u95dc\u4fc2\u96c6\u5408\u4e2d\u79fb\u9664\u8a72\u5be6\u4f8b\u3002
core.statemanager.toomanyrows=JDO76215\uff1a\u5c0d\u65bc\u5c0d\u6620\u81f3\u985e\u5225 {0} \u7684\u8868\u683c\u4e4b\u4e00\uff0c\u5df2\u50b3\u56de\u591a\u5217\u3002\u91dd\u5c0d\u7269\u4ef6\u7684\u6bcf\u500b\u5be6\u4f8b\uff0c\u5c0d\u6620\u81f3\u985e\u5225\u7684\u6bcf\u500b\u8868\u683c\u61c9\u8a72\u50c5\u6709\u4e00\u5217\u3002
core.statemanager.copyFields.mismatch=JDO76216\uff1a\u5617\u8a66\u5f9e\u4e00\u500b StateManager \u5c07\u6b04\u4f4d\u8907\u88fd\u5230\u5176\u4ed6\u7ba1\u7406\u4e0d\u540c\u985e\u578b\u5be6\u4f8b\u7684 StateManager\uff1a{0} \u548c {1}\u3002

#
# <NOI18N: StateManager>
#
sqlstore.sqlstatemanager.adddependency=<-> SQLStateManager.addDependency(), this StateManager: {0}, other StateManager: {1}.
sqlstore.sqlstatemanager.addupdate=<-> SQLStateManager.addUpdatedForeignReference(), lobj={0}, f={1}, fobj={2}, refCount={3}.
sqlstore.sqlstatemanager.applyupdates.exit=<-- SqlStateManager.applyUpdates().
sqlstore.sqlstatemanager.applyupdates=--> SqlStateManager.applyUpdates(), field = {0}.
sqlstore.sqlstatemanager.clearpersistencefields.exit=<--- SqlStateManager.clearPersistenceFields().
sqlstore.sqlstatemanager.clearpersistencefields=--> SqlStateManager.clearPersistenceFields().
sqlstore.sqlstatemanager.copychanges.exit=<-- SQLStateManager.copyChanges().
sqlstore.sqlstatemanager.copychanges=--> SQLStateManager.copyChanges(), state manager = {0}.
sqlstore.sqlstatemanager.deletepersistence=<-> SqlStateManager.deletePersistence(), type = {0}.
sqlstore.sqlstatemanager.getbeforeimage.exit=<-- SqlStateManager.getBeforeImage().
sqlstore.sqlstatemanager.getbeforeimage=--> SqlStateManager.getBeforeImage(), type = {0}.
sqlstore.sqlstatemanager.isbeforeimagerequired=isBeforeImageRequired is : {0}.
sqlstore.sqlstatemanager.loadforread.exit=<-- SQLStateManager.loadForRead().
sqlstore.sqlstatemanager.loadforread=--> SQLStateManager.loadForRead().
sqlstore.sqlstatemanager.loadforupdate.exit=<-- SQLStateManager.loadForUpdate().
sqlstore.sqlstatemanager.loadforupdate=--> SQLStateManager.loadForUpdate().
sqlstore.sqlstatemanager.loggingfield=logging field = {0} with value = {1}.
sqlstore.sqlstatemanager.makedirty.fixscocollection=--- SqlStateManager.makeDirty(), fix SCOCollection.
sqlstore.sqlstatemanager.makedirty.fixscodate=--- SqlStateManager.makeDirty(), fix SCODate.
sqlstore.sqlstatemanager.makedirty=--> SqlStateManager.makeDirty(), field = {0}.
sqlstore.sqlstatemanager.makedirtyfield=marked dirty field = {0}.
sqlstore.sqlstatemanager.makepersistence=<-> SqlStateManager.makePersistence(), type = {0}.
sqlstore.sqlstatemanager.makepresent=--> SqlStateManager.makePresent(), field = {0}.
sqlstore.sqlstatemanager.marking=marking: {0} as present.
sqlstore.sqlstatemanager.newtype=New Type: {0}.
sqlstore.sqlstatemanager.nosuchmethodexcep.clone=Exception : {0}  clone ... for type {1}.
sqlstore.sqlstatemanager.preparegetfield.exit=<-- SqlStateManager.prepareGetField().
sqlstore.sqlstatemanager.preparegetfield=--> SqlStateManager.prepareGetField(), name = {0}.
sqlstore.sqlstatemanager.preparesetfield.exit=<-- SQLStateManager.prepareSetField().
sqlstore.sqlstatemanager.preparesetfield=--> SQLStateManager.prepareSetField(), name = {0}.
sqlstore.sqlstatemanager.preparetoupdateph1.exit=<-- SqlStateManager.prepareToUpdateI().
sqlstore.sqlstatemanager.preparetoupdateph1=--> SqlStateManager.prepareToUpdatePhaseI(), type = {0}.
sqlstore.sqlstatemanager.preparetoupdateph2.exit=<-- SqlStateManager.prepareToUpdateII().
sqlstore.sqlstatemanager.preparetoupdateph2=--> SqlStateManager.prepareToUpdatePhaseII(), type = {0}.
sqlstore.sqlstatemanager.preparetoupdateph3.exit=<-- SqlStateManager.prepareToUpdateIII().
sqlstore.sqlstatemanager.preparetoupdateph3=--> SqlStateManager.prepareToUpdatePhaseIII(), type = {0}.
sqlstore.sqlstatemanager.prepareupdatefield.exit=<-- SQLStateManager.prepareUpdateField().
sqlstore.sqlstatemanager.prepareupdatefield=--> SQLStateManager.prepareUpdateField(), name = {0} for state: {1}.
sqlstore.sqlstatemanager.prepareupdatefieldspl.exit=<-- SQLStateManager.prepareUpdateFieldSpecial().
sqlstore.sqlstatemanager.prepareupdatefieldspl=--> SQLStateManager.prepareUpdateFieldSpecial, name = {0} for state: {1}.
sqlstore.sqlstatemanager.processcollectionupdate.exit=<-- SQLStateManager.processCollectionUpdates().
sqlstore.sqlstatemanager.processcollectionupdate=--> SQLStateManager.processCollectionUpdates(), beforeList={0}, afterlist={1}.
sqlstore.sqlstatemanager.processforeign=process foreign field ={0}.
sqlstore.sqlstatemanager.processforeignfield.remove=-- SQLStateManager.processForeignField(): was Collection - remove.
sqlstore.sqlstatemanager.processforeignfield.remove_from_bi=-- SQLStateManager.processForeignField(): is SCOCollection - remove from BI.
sqlstore.sqlstatemanager.processforeignfield.reset=-- SQLStateManager.processForeignField(): was SCOCollection - reset.
sqlstore.sqlstatemanager.processforeignfield=-- SQLStateManager.processForeignField(): value: {0} type: {1}.
sqlstore.sqlstatemanager.realizefield.exit=<-- SqlStateManager.realizeField().
sqlstore.sqlstatemanager.realizefield=--> SqlStateManager.realizeField(), name = {0}.
sqlstore.sqlstatemanager.realizeforeignfield.exit=<-- SqlStateManager.realizeField(), field realized = {0}.
sqlstore.sqlstatemanager.realizeforeignfield=--> SqlStateManager.realizeField(), name = {0}.
sqlstore.sqlstatemanager.recordingfield=recording field = {0}.
sqlstore.sqlstatemanager.refreshpersistent.exit=<-- SqlStateManager.refreshPersistent().
sqlstore.sqlstatemanager.refreshpersistent=--> SqlStateManager.refreshPersistence(), type = {0}.
sqlstore.sqlstatemanager.reload.exit=<-- SqlStateManager.reload(FieldDesc).
sqlstore.sqlstatemanager.reload=--> SqlStateManager.reload(FieldDesc), type = {0}, field = {1}.
sqlstore.sqlstatemanager.removeupdate=<-> SQLStateManager.removeUpdatedForeignReference(), lobj={0}, f={1}, fobj={2}, refCount={3}.
sqlstore.sqlstatemanager.replaceobjectfield.unsetsco=-- SqlStateManager.replaceObjectField(), unset SCO.
sqlstore.sqlstatemanager.replaceobjectfield=-- SqlStateManager.replaceObjectField(), field = {0}, type= {1}.
sqlstore.sqlstatemanager.reset=--> SqlStateManager.reset(), retValues = {0}, wasNew: {1}, keepState: {2}.
sqlstore.sqlstatemanager.resettingcollection=Resetting Collection.
sqlstore.sqlstatemanager.resettingdate=Resetting Date.
sqlstore.sqlstatemanager.resolvedependencies=<-> SQLStateManager.resolveDependencies(), obj={0}.
sqlstore.sqlstatemanager.resolvedependency=<-> SQLStateManager.resolveDependency(), dependency resolved: lobj={0}, f={1}, fobj={2}.
sqlstore.sqlstatemanager.retrieve.exit=<-- SqlStateManager.retrieve().
sqlstore.sqlstatemanager.retrieve=--> SqlStateManager.retrieve(), name = {0}.
sqlstore.sqlstatemanager.retrieveforeign.exit=<-- SqlStateManager.retrieveForeign().
sqlstore.sqlstatemanager.retrieveforeign=--> SqlStateManager.retrieveForeign(), name = {0}.
sqlstore.sqlstatemanager.unsetmask=unsetting masks for field = {0}.
sqlstore.sqlstatemanager.unconditionalreload.exit=<-- SqlStateManager.reload().
sqlstore.sqlstatemanager.unconditionalreload=--> SqlStateManager.reload(), type = {0}.
sqlstore.sqlstatemanager.updatebeforeimage=<-> SQLStateManager.updateBeforeImage(), name = {0}, value = {1}.
sqlstore.sqlstatemanager.updateobjfield.exit=<-- SQLStateManager.updateObjectField().
sqlstore.sqlstatemanager.updateobjfield=--> SQLStateManager.updateObjectField(), name = {0}, type = {1}.
sqlstore.sqlstatemanager.updatepersistent.exit=<-- SqlStateManager.updatePersistent().
sqlstore.sqlstatemanager.updatepersistent.immediateflush=<--> SqlStateManager.updatePersistent(), immediate flush required: obj={0}, next={1}.
sqlstore.sqlstatemanager.updatepersistent.skipped=<--> SqlStateManager.updatePersistent() skipped, type ={0}, obj= {1}.
sqlstore.sqlstatemanager.updatepersistent=--> SqlStateManager.updatePersistent(), type = {0}.
sqlstore.sqlstatemanager.updatetrackedfields.exit=<-- updateTrackedFields().
sqlstore.sqlstatemanager.updatetrackedfields=--> updateTrackedFields(), f = {0} value = {1}  fieldToIgnore = {2}.


###############################################################################
# <sql generator components: All the source files under sql.>
# Message ID Range: JDO76300 - JDO76399
###############################################################################
core.constraint.duporderby=JDO76300\uff1a\u6b04\u4f4d {0} \u7684\u9650\u5236\u70ba \"order by\"\uff0c\u4f46\u5df2\u5728 \"order by\" \u9650\u5236\u4e2d\u6307\u5b9a\u8a72\u6b04\u4f4d\u3002
core.constraint.fielddisallowed=JDO76301\uff1a\u6307\u5b9a\u4e86 fieldName \u53c3\u6578\uff0c\u4f46\u4e0d\u5141\u8a31\u5c07\u5176\u7528\u65bc\u4f5c\u696d {0}\u3002
core.constraint.fieldrequired=JDO76302\uff1a\u7f3a\u5c11 fieldName \u53c3\u6578\uff0c\u4f46\u4f5c\u696d {0} \u9700\u8981\u4e00\u500b\u6b04\u4f4d\u3002
core.constraint.illegalParameterInfo=JDO76303\uff1a\u5fc5\u9808\u4f7f\u7528\u985e\u578b ParameterInfo \u7684\u503c\u547c\u53eb OP_PARAMETER \u7684 addConstraint()\u3002
core.constraint.illegalnode=JDO76304\uff1aSqlConstraint \u5806\u758a\u4e2d\u7684\u9650\u5236\u7bc0\u9ede {0} \u975e\u6cd5\u3002
core.constraint.illegalop=JDO76305\uff1a\u4f5c\u696d\u53c3\u6578\u5305\u542b {0} \u7684\u975e\u6cd5\u503c\u3002
core.constraint.needfieldnamenode=JDO76306\uff1a\u9650\u5236\u5806\u758a\u4e2d\u767c\u751f\u932f\u8aa4\u3002\u5df2\u9810\u671f\u6a94\u6848\u540d\u7a31\u3002
core.constraint.needfieldnode=JDO76307\uff1a\u9650\u5236\u5806\u758a\u4e2d\u767c\u751f\u932f\u8aa4\u3002\u5df2\u9810\u671f\u6b04\u4f4d\u63cf\u8ff0\u3002
core.constraint.needvalnode=JDO76308\uff1a\u9650\u5236\u5806\u758a\u4e2d\u767c\u751f\u932f\u8aa4\u3002\u5df2\u9810\u671f\u503c\u3002
core.constraint.stackempty=JDO76309\uff1a\u9650\u5236\u5806\u758a\u70ba\u7a7a \uff0d \u904b\u7b97\u5b50\u6578\u76ee\u7684\u503c\u4e0d\u8db3\u3002
core.constraint.unknownfield=JDO76310\uff1a\u64f7\u53d6\u63cf\u8ff0\u5143\u4e2d\u6307\u5b9a\u7684\u6b04\u4f4d {0} \u4e0d\u662f\u985e\u5225 {1} \u7684\u6210\u54e1\u3002
core.constraint.valdisallowed=JDO76311\uff1a\u6307\u5b9a\u4e86 value \u53c3\u6578\uff0c\u4f46\u4e0d\u5141\u8a31\u5c07\u5176\u7528\u65bc\u4f5c\u696d {0}\u3002
core.constraint.valrequired=JDO76312\uff1a\u7f3a\u5c11 value \u53c3\u6578\uff0c\u4f46\u4f5c\u696d {0} \u9700\u8981\u4e00\u500b\u503c\u3002
sqlstore.resultdesc.errorgettingvalefromresulset=JDO76313\uff1a\u5f9e\u7d22\u5f15 {0} \u7684 resultset \u4e2d\u53d6\u5f97\u505a\u70ba resultType {1} \u7684\u503c\u6642\u767c\u751f\u932f\u8aa4\u3002columnSqlType {2}\u3002\u7570\u5e38\uff1a{3}
sqlstore.resultdesc.foreignfieldprojection=JDO76314\uff1a{0} \u7684\u67e5\u8a62\u5728\u95dc\u4fc2\u6b04\u4f4d\u4e0a\u4e0d\u61c9\u5177\u6709\u6295\u5f71\u3002
sqlstore.resultdesc.unknownfieldtype=JDO76317\uff1a\u9047\u5230\u672a\u77e5\u6b04\u4f4d\u985e\u578b {0}\u3002
sqlstore.retrievedesc.toomanyprojections=JDO76318\uff1a\u7121\u6cd5\u70ba RetrieveDesc \u8a2d\u5b9a\u591a\u500b\u6295\u5f71\u3002
sqlstore.retrievedesc.toomanyresulttypes=JDO76319\uff1a\u7121\u6cd5\u70ba RetrieveDesc \u8a2d\u5b9a\u591a\u500b\u7d50\u679c\u985e\u578b\u3002
sqlstore.selectstatement.noupdatelocksupport=JDO76320\uff1a\u6b64\u67e5\u8a62\u4e2d\u5305\u542b\u7684\u7269\u4ef6\u985e\u578b\u4e4b\u4e00\u70ba\u4e00\u81f4\u6027\u5c64\u7d1a\u300clock-when-loaded\u300d\u3002\u5f37\u5236\u6b64\u4e00\u81f4\u6027\u5c64\u7d1a\u9700\u8981\u8cc7\u6599\u5b58\u653e\u5340\uff0c\u4ee5\u652f\u63f4\u5217\u5c64\u7d1a\u7684\u66f4\u65b0\u9396\u5b9a\u3002\u8a72\u8cc7\u6599\u5b58\u653e\u5340\u4e0d\u652f\u63f4\u5217\u5c64\u7d1a\u7684\u66f4\u65b0\u9396\u5b9a\u3002
sqlstore.sql.generator.statement.likeescapenotsupported=JDO76321\uff1a\u6b64\u8cc7\u6599\u5eab\u4e0d\u652f\u63f4 LIKE ESCAPE \u9673\u8ff0\u5f0f\u3002
sqlstore.sql.generator.statement.positionthreeargsnotsupported=JDO76322\uff1aPOSITION \u9673\u8ff0\u5f0f\u7684\u7b2c\u4e09\u500b\u5f15\u6578\u5fc5\u9808\u70ba 1\u3002
core.configuration.classnotmapped=JDO76323\uff1a\u672a\u5c0d\u6620\u985e\u5225 {0}\u3002
core.configuration.classnotmappedtotable=JDO76324\uff1a\u985e\u5225 {0} \u672a\u5c0d\u6620\u81f3\u8868\u683c {1}\u3002
sqlstore.sql.generator.statement.unexpectedconstraint=JDO76325\uff1a\u4f5c\u696d {0} \u7684\u9650\u5236\u6c38\u9060\u4e0d\u80fd\u70ba where \u9673\u8ff0\u5f0f\u7684\u6839\u3002

# <I18N: sql generator>
# Following messages are used within other messages. They need to be i18ned but need not be numbered.
#
sqlstore.sql.generator.statement.sqlStatement=SQL \u6558\u8ff0
sqlstore.sql.generator.statement.withinputvalues= \u5e36\u6709\u8f38\u5165\u503c\uff1a
sqlstore.sql.generator.statement.withnoinputvalues= \u4e0d\u5e36\u6709\u8f38\u5165\u503c\u3002


#
# <ResultDesc NOI18N>
#
sqlstore.resultdesc.deserializing=deserializing = {0}.
sqlstore.resultdesc.marking_field=marking local field {0} as present.
sqlstore.resultdesc.marking_foreign_field=marking foreign field {0} as present.
sqlstore.resultdesc.marking_key_field=marking key field {0} as present.
sqlstore.resultdesc.returning_field=returning field {0} as projection.
#
# <Misc. SQLStore NOI18N >
#
sqlstore.sql.concurrency.concurrencychkdirty.exit=--> ConcurrencyCheckDirty.update().
sqlstore.sql.concurrency.concurrencychkdirty=--> ConcurrencyCheckDirty.update(), beforeImage = {0}.
sqlstore.sql.concurrencyoptverify.resumetx=<--> ConcurrencyOptVerify.resume(), resumed transaction = {0}.
sqlstore.sql.concurrencyoptverify.suspendtx=<--> ConcurrencyOptVerify.suspend(), suspended transaction = {0}.
sqlstore.sql.concurrencyoptverify.update.exit=<-- ConcurrencyOptVerify.update().
sqlstore.sql.concurrencyoptverify.update=--> ConcurrencyOptVerify.update(), beforeImage = {0}.
sqlstore.sql.generator.dbstatement.addbatch=addbatch ({0})
sqlstore.sql.generator.dbstatement.bindinputcolumn=bindInputColumn index: {0} value: {1} sqlType: {2}.
sqlstore.sql.generator.dbstatement.executebatch=executeBatch executing {0} command(s)
sqlstore.sql.generator.selectqueryplan.processforeignfield.exit=<-- SelectQueryPlan.processForeignFields().
sqlstore.sql.generator.selectqueryplan.processforeignfield=--> SelectQueryPlan.processForeignFields(), class = {0}.
sqlstore.sql.generator.selectqueryplan.processlocalfield.exit=<-- SelectQueryPlan.processLocalFields().
sqlstore.sql.generator.selectqueryplan.processlocalfield=--> SelectQueryPlan.processLocalFields(), class = {0}.
sqlstore.sql.generator.selectqueryplan.processstmts.exit=<-- SelectQueryPlan.processStatements().
sqlstore.sql.generator.selectqueryplan.processstmts=--> SelectQueryPlan.processStatements(), class = {0}, statements = {1}.
sqlstore.sql.updateobjdescimpl.afterimagenull=AfterImage is not set.
sqlstore.sql.updateobjdescimpl.beforeimagenull=BeforeImage is not set.
sqlstore.sql.updateobjdescimpl.markrelationshipchange=<--> UpdateDesc.markRelationshipChange().
sqlstore.sql.updateobjdescimpl.updated={0} is updated.


###############################################################################
# <SQLStoreManager>
# Message ID Range: JDO76400 - JDO76499
###############################################################################
#
# <SQLStoreManager>
#
core.persistencestore.jdbcerror=JDO76400\uff1a\u57f7\u884c SQL \u6558\u8ff0\u6642\u53d6\u5f97 JDBC SQLException\uff1a\n{0}\u3002\n\u8acb\u6aa2\u67e5 SQLException\uff0c\u4ee5\u53d6\u5f97\u66f4\u591a\u8cc7\u8a0a\u3002
sqlstore.retrievedesc.stmntsnotjoined=JDO76401\uff1a\u4e0d\u652f\u63f4\u4e00\u500b RetrieveDesc \u7684\u591a\u91cd SQL \u6558\u8ff0\u3002
core.persistencestore.toofewrows=JDO76402\uff1a\u5617\u8a66\u53d6\u5f97\u985e\u5225 {0} \u4e4b\u95dc\u806f {1} \u7684\u503c\u6642\uff0c\u5f9e\u8cc7\u6599\u5eab\u50b3\u56de\u7684\u5217\u5c11\u65bc\u8a72\u95dc\u806f\u7684\u57fa\u6578\u6240\u5141\u8a31\u7684\u5217\u3002\u6240\u5141\u8a31\u7684\u6700\u5c11\u5217\u6578\u70ba {2}\u3002
core.persistencestore.toomanyobjforcard1=JDO76403\uff1a\u8cc7\u6599\u5eab\u8207\u6301\u7e8c\u6027\u6a21\u578b\u4e0d\u4e00\u81f4\u3002\u5617\u8a66\u64f7\u53d6\u7531 {0} \u985e\u5225\u7684 {1} \u95dc\u806f\u6240\u53c3\u7167\u7684\u7269\u4ef6\u6642\u64f7\u53d6\u4e86 {2} \u500b\u9805\u76ee\uff0c\u4f46\u662f\u7531\u65bc\u8a72\u95dc\u806f\u7684\u57fa\u6578\u4e0a\u9650\u70ba 1\uff0c\u56e0\u800c\u50c5\u53ef\u4ee5\u5bb9\u7d0d 1 \u500b\u9805\u76ee\u3002
core.persistencestore.toomanyrows=JDO76405\uff1a\u5617\u8a66\u53d6\u5f97\u985e\u5225 {0} \u4e4b\u95dc\u806f {1} \u7684\u503c\u6642\uff0c\u5f9e\u8cc7\u6599\u5eab\u50b3\u56de\u7684\u5217\u591a\u65bc\u8a72\u95dc\u806f\u7684\u57fa\u6578\u6240\u5141\u8a31\u7684\u5217\u3002\u6240\u5141\u8a31\u7684\u6700\u591a\u5217\u6578\u70ba {2}\u3002
core.store.concurrentaccess=JDO76406\uff1a\u540c\u6b65\u904b\u4f5c\u5b58\u53d6\u7570\u5e38\uff1a{0} \u7684\u7269\u4ef6\u5df2\u7531\u5176\u4ed6\u4f5c\u696d\u4e8b\u4ef6\u66f4\u65b0\u6216\u522a\u9664\u3002
sqlstore.sqlstoremanager.errorcloseresultset=JDO76407\uff1a\u95dc\u9589 SQL \u7d50\u679c\u96c6\u6642\u767c\u751f\u932f\u8aa4\u3002\u7570\u5e38\uff1a{0}
sqlstore.sqlstoremanager.errorclosestatement=JDO76408\uff1a\u95dc\u9589 SQL \u6558\u8ff0\u6642\u767c\u751f\u932f\u8aa4\u3002\u7570\u5e38\uff1a{0}
sqlstore.sql.generator.selectqueryplan.plansnotjoined=JDO76409\uff1a\u4e0d\u652f\u63f4\u4e00\u500b RetrieveDesc \u7684\u591a\u91cd\u67e5\u8a62\u8a08\u5283\u3002

#
# <NOI18N: SQLStoreManager>
#
sqlstore.sqlstoremanager.executeQuery.exit=<-- SQLStoreManager.executeQuery().
sqlstore.sqlstoremanager.executeQuery=--> SQLStoreManager.executeQuery().
sqlstore.sqlstoremanager.executeupdate.exit=<-- SQLStoreManager.executeUpdate(), rows affected = {0}.
sqlstore.sqlstoremanager.executeupdate=--> SQLStoreManager.executeUpdate().
sqlstore.sqlstoremanager.executeupdatebatch.addbatch={0}; add batch.
sqlstore.sqlstoremanager.executeupdatebatch.exit=<-- SQLStoreManager.executeUpdateBatch().
sqlstore.sqlstoremanager.executeupdatebatch.exit.flush=<-- SQLStoreManager.executeUpdateBatch(), rows affected = {0}.
sqlstore.sqlstoremanager.executeupdatebatch.flushbatch={0}; flush batch.
sqlstore.sqlstoremanager.executeupdatebatch=--> SQLStoreManager.executeUpdateBatch().
sqlstore.sqlstoremanager.getpersistenceconfig=<--> SQLStoreManager.getPersistenceConfig(), classType = {0}.
sqlstore.sqlstoremanager.selectnoncorrelated.exit=<-- SQLStoreManager.selectNonCorrelated().
sqlstore.sqlstoremanager.selectnoncorrelated=--> SQLStoreManager.selectNonCorrelated().
sqlstore.sqlstoremanager.vendortype=<--> SQLStoreManager: vendor type = {0}.


###############################################################################
# <Connection/Connectionpool/DBVendorType/TransactionImpl/OracleSpecialDBOperation>
# Message ID Range: JDO76500 - JDO76599
###############################################################################
#
# <Connection/Connection Pool> - database
#
connection.connectionmanager.badnew=JDO76500\uff1a\u65b0\u7684 ''{0}'' \u5fc5\u9808\u5927\u65bc\u6216\u7b49\u65bc\u76ee\u524d\u7684 ''{1}''\u3002
connection.connectionmanager.badvalue=JDO76501\uff1a''{0}'' \u7684\u503c\u7121\u6548\u3002
connection.connectionmanager.conntimeout=JDO76502\uff1a\u9023\u7dda\u903e\u6642\u904e\u671f\u3002
connection.connectionmanager.getconnection.mismatch=JDO76503\uff1a\u6c60\u5132\u5b58\u7684\u9023\u7dda\u7121\u76f8\u540c\u7684\u4f7f\u7528\u8005\u74b0\u5883\u3002
connection.connectionmanager.isdown=JDO76504\uff1a\u6b63\u5728\u95dc\u9589\u9023\u7dda\u7ba1\u7406\u7a0b\u5f0f\u3002
connection.connectionmanager.maxpool=JDO76505\uff1a\u9023\u7dda\u6c60\u5df2\u9054\u5230\u6700\u5927\u5bb9\u91cf\u3002
connection.connectionmanager.msintervalvalue=JDO76506\uff1aMsInterval \u5fc5\u9808\u5927\u65bc\u96f6\uff0c\u4e14\u5c0f\u65bc\u6216\u7b49\u65bc MsWait\u3002
connection.connectionmanager.mswaitvalue=JDO76507\uff1aMsWait \u5fc5\u9808\u5927\u65bc\u6216\u7b49\u65bc\u96f6\u3002
connection.connectionmanager.nulldriver=JDO76508\uff1a\u9a45\u52d5\u7a0b\u5f0f\u540d\u7a31\u7684\u503c\u70ba NULL\u3002
connection.connectionmanager.nullurl=JDO76509\uff1aURL \u7684\u503c\u70ba NULL\u3002
connection.connectionmanager.poolsize=JDO76510\uff1a\u300cmaxPool\u300d\u5fc5\u9808\u5927\u65bc\u6216\u7b49\u65bc\u300cminPool\u300d\u3002
connection.connectionmanager.threaditerupted=JDO76511\uff1a\u57f7\u884c\u7dd2\u5df2\u4e2d\u65b7\u3002
connection.connectionmanager.zero=JDO76512\uff1a''{0}'' \u5fc5\u9808\u5927\u65bc\u6216\u7b49\u65bc\u96f6\u3002
#
# <DBVendorType>
#
sqlstore.database.dbvendor.cantloadDefaultProperties=JDO76513\uff1a\u7121\u6cd5\u8f09\u5165\u9810\u8a2d\u8cc7\u6599\u5eab\u7684\u7279\u6027\u3002
sqlstore.database.dbvendor.init.default=JDO76514\uff1a-->\u7121\u6cd5\u8f09\u5165\u4f9b\u61c9\u5546\u985e\u578b {0} \u7684\u7279\u6027\u3002\u5c07\u4f7f\u7528\u9810\u8a2d\u503c\u3002
sqlstore.database.dbvendor.cantinstantiateclass=JDO76515\uff1a\u7121\u6cd5\u5be6\u4f8b\u5316\u985e\u5225 {0}\u3002
#
# <OracleSpecialDBOperation>
#
sqlstore.database.oracle.defineCol=JDO76516\uff1a\u7121\u6cd5\u5b9a\u7fa9\u6558\u8ff0\u7684\u6b04\u3002
sqlstore.database.oracle.nooracleavailable=JDO76517\uff1a\u521d\u59cb\u5316 Oracle \u8cc7\u6e90\u5de5\u5ee0 ''{0}'' \u6642\uff0c\u7121\u6cd5\u53d6\u5f97 oracle.jdbc.OraclePreparedStatement \u6216 oracle.jdbc.driver.OraclePreparedStatement \u7684\u5be6\u4f8b\u3002\u5c07\u505c\u7528 Oracle \u7279\u5b9a\u7684\u6700\u4f73\u5316\u3002\u5982\u679c\u4f7f\u7528\u6b64\u8cc7\u6e90\u7684\u5be6\u4f8b\u9700\u8981\u5df2\u5c0d\u6620\u81f3\u56fa\u5b9a\u5b57\u5143\u6b04\u7684\u6b04\u9023\u7d50\u503c\uff0c\u9019\u4e9b\u503c\u5c07\u8207\u7a7a\u683c\u4e00\u8d77\u586b\u88dc\u81f3\u5c0d\u61c9\u7684 dbschema \u6a94\u6848\u4e2d\u6307\u5b9a\u7684\u9577\u5ea6\u3002
sqlstore.database.oracle.fixedcharpadded=JDO76518\uff1a\u503c "{0}" \u9023\u7d50\u81f3 CHAR \u6b04\u3002\u9019\u9700\u8981\u5c0d Oracle \u9032\u884c\u7279\u5225\u8655\u7406\u3002\u7531\u65bc\u985e\u5225 OraclePreparedStatement \u7121\u6cd5\u5f9e\u9a45\u52d5\u7a0b\u5f0f\u53d6\u5f97\uff0c\u8a72\u503c\u6703\u8207\u7a7a\u683c\u4e00\u8d77\u586b\u88dc\u81f3\u64f7\u53d6\u7684 dbschema \u6a94\u6848\u4e2d\u6307\u5b9a\u7684\u9577\u5ea6 {1}\u3002
#
# <Misc.>
#
core.configuration.getvendortypefailed=JDO76519\uff1a\u7121\u6cd5\u8b58\u5225\u8cc7\u6599\u5b58\u653e\u5340\u7684\u4f9b\u61c9\u5546\u985e\u578b\u3002
jdo.sqlpersistencemanagerfactory.errorgettingDatabaseInfo=JDO76520\uff1a\u53d6\u5f97\u6709\u95dc\u8cc7\u6599\u5eab\u7684\u8cc7\u8a0a\u6642\u767c\u751f\u932f\u8aa4\u3002\u53d6\u5f97\u4e0b\u5217\u7570\u5e38\uff1a

#
# <NOI18N: Connection>
#
sqlstore.connection.conncectiomgr.found=<--> ConnectionManager.getConnection: found {0}.
sqlstore.connection.conncectiomgr.getnewconn=<--> ConnectionManager.getConnection: new {0}.
sqlstore.connection.conncectiomgr.replacefreeconn=<--> ConnectionManager.replaceFreeConnection: free {0}.
sqlstore.connectionimpl.clearxact.close=--- ConnectionImpl.clearXact: connection closed .
sqlstore.connectionimpl.clearxact.disassocxact=--- ConnectionImpl.clearXact: disassociateXact .
sqlstore.connectionimpl.clearxact=--- ConnectionImpl.clearXact: .
sqlstore.connectionimpl.close.connrelease=<--- ConnectionImpl.close: connection released.
sqlstore.connectionimpl.close.exit=<--- ConnectionImpl.close: connection closed.
sqlstore.connectionimpl.close.freepending=<--- ConnectionImpl.close: set FreePending.
sqlstore.connectionimpl.close.putfreelist=<--- ConnectionImpl.close: put in freeList.
sqlstore.connectionimpl.close.replaced=<--- ConnectionImpl.close: connection replaced.
sqlstore.connectionimpl.close=---> ConnectionImpl.close.
sqlstore.connectionimpl.close_arg=---> ConnectionImpl.close: {0}.
sqlstore.connectionimpl.commit=--- ConnectionImpl.commit: connection closed.
sqlstore.connectionimpl.finalize=--- ConnectionImpl.finalize: connection closed.
sqlstore.connectionimpl.internalcommit=--- ConnectionImpl.internalCommit: .
sqlstore.connectionimpl.pendingdisassocxact=--- ConnectionImpl.clearXact: Pending disassociateXact.
sqlstore.connectionimpl.rollback.close=--- ConnectionImpl.rollback: connection closed.
sqlstore.connectionimpl.rollback=--- ConnectionImpl.rollback:.
#
# <NOI18N: DBVendorType>
#
sqlstore.database.dbvendor.castRequiredForNumericValues=<-> DBVendorType.isCastRequiredForNumericValues(): {0}.
sqlstore.database.dbvendor.getModFunctionName=<-> DBVendorType.getModFunctionName(): {0}.
sqlstore.database.dbvendor.getNullComparisonFunctionName=<-> DBVendorType.getNullComparisonFunctionName(): {0}.
sqlstore.database.dbvendor.getConcatCast=<-> DBVendorType.getConcatCast(): {0}.
sqlstore.database.dbvendor.getSpecialDBOperation=<-> DBVendorType.getSpecialDBOperation(): {0}.
sqlstore.database.dbvendor.getabs=<-> DBVendorType.getAbs(): {0}.
sqlstore.database.dbvendor.getcharlength=<-> DBVendorType.getCharLength(): {0}.
sqlstore.database.dbvendor.getforupdate=<-> DBVendorType.getForUpdate(): {0}.
sqlstore.database.dbvendor.getholdlock=<-> DBVendorType.getHoldlock(): {0}.
sqlstore.database.dbvendor.getisnotnull=<-> DBVendorType.getIsNotNull(): {0}.
sqlstore.database.dbvendor.getisnull=<-> DBVendorType.getIsNull(): {0}.
sqlstore.database.dbvendor.getleftjoin=<-> DBVendorType.getLeftJoin(): {0}.
sqlstore.database.dbvendor.getleftjoinpost=<-> DBVendorType.getLeftJoinPost(): {0}.
sqlstore.database.dbvendor.getleftlikeescape=<-> DBVendorType.getLeftLikeEscape(): {0}.
sqlstore.database.dbvendor.getnotequal=<-> DBVendorType.getNotEqual(): {0}.
sqlstore.database.dbvendor.getposition3args=<-> DBVendorType.getPositionThreeArrgs(): {0}.
sqlstore.database.dbvendor.getposition=<-> DBVendorType.getPosition(): {0}.
sqlstore.database.dbvendor.getpositionin=<-> DBVendorType.getPositionIn(): {0}.
sqlstore.database.dbvendor.getpositionsrchsrc=<-> DBVendorType.getPositionSearchSource(): {0}.
sqlstore.database.dbvendor.getquotecharstart=<-> DBVendorType.getQuoteCharStart(): {0}.
sqlstore.database.dbvendor.getrightjoinipre=<-> DBVendorType.getRightJoin(): {0}.
sqlstore.database.dbvendor.getrightlikeescape=<-> DBVendorType.getRightLikeEscape(): {0}.
sqlstore.database.dbvendor.getrtrim=<-> DBVendorType.getRtrim(): {0}.
sqlstore.database.dbvendor.getrtrimpost=<-> DBVendorType.getRtrimPost(): {0}.
sqlstore.database.dbvendor.getsqrt=<-> DBVendorType.getSqrt(): {0}.
sqlstore.database.dbvendor.getstringconcat=<-> DBVendorType.getStringConcat(): {0}.
sqlstore.database.dbvendor.getsubstring=<-> DBVendorType.getSubstring(): {0}.
sqlstore.database.dbvendor.getsubstringfor=<-> DBVendorType.getSubstringFor(): {0}.
sqlstore.database.dbvendor.getsubstringfrom=<-> DBVendorType.getSubstringFrom(): {0}.
sqlstore.database.dbvendor.gettablelistend=<-> DBVendorType.getTableListEnd(): {0}.
sqlstore.database.dbvendor.gettableliststart=<-> DBVendorType.getTableListStart(): {0}.
sqlstore.database.dbvendor.isAnsiTrim=<-> DBVendorType.isAnsiTrim(): {0}.
sqlstore.database.dbvendor.isInlineNumeric=<-> DBVendorType.isInlineNumeric(): {0}.
sqlstore.database.dbvendor.isNativeOuterJoin=<-> DBVendorType.isNativeOuterJoin(): {0}.
sqlstore.database.dbvendor.isParameterCast=<-> DBVendorType.isParameterCast(): {0}.
sqlstore.database.dbvendor.isdistinctupdatelocksupported=<-> DBVendorType.isDistinctSupportedWithUpdateLock(): {0}.
sqlstore.database.dbvendor.islockcolumnlistsupported=<-> DBVendorType.isLockColumnListSupported(): {0}.
sqlstore.database.dbvendor.isupdatelocksupported=<-> DBVendorType.isUpdateLockSupported(): {0}.
sqlstore.database.dbvendor.mapemptystrtonull=<-> DBVendorType.mapEmptyStringToNull(): {0}.
sqlstore.database.dbvendor.overrideproperties.with=<-> DBVendorType.overrideProperties() : {0} with: {1}.
sqlstore.database.dbvendor.overrideproperties=<-> DBVendorType.overrideProperties() - NONE.
sqlstore.database.dbvendor.supportslikeescape=<-> DBVendorType.supportsLikeEscape(): {0}.
sqlstore.database.dbvendor.vendorname=<-> DBVendorType(), vendorName: [{0}]  vendorType: {1}.
#
# <NOI18N: TransactionImpl>
#
sqlstore.transactionimpl.call.info={0} Tran[ {1} ].{2}: {3} for  {4}.
sqlstore.transactionimpl.call={0} Tran[ {1} ].{2}:status = {3}, txType: {4} for  {5}.
sqlstore.transactionimpl.closeconnection=--- TransactionImpl.closeConnection() {0} for {1}.
sqlstore.transactionimpl.general={0}.
sqlstore.transactionimpl.getconnection=--- TransactionImpl.getConnection(): {0} TX optimistic: {1} referenceCount = {2} for {3}.
sqlstore.transactionimpl.releaseconnection=--- TransactionImpl.releaseConnection(): TX optimistic: {0} Inside Commit: {1} referenceCount: {2} for {3}.
sqlstore.transactionimpl.rollbackconnection=--- TransactionImpl.rollbackConnection(): {0} for {1}.
sqlstore.transactionimpl.status={0} Tran[ {1} ].setStatus: {2} => {3} for {4}.


###############################################################################
# All the source files under subdir ejb.
# Message ID Range: JDO76600 - JDO76699
###############################################################################
#
#EJBHelper messages
#
# {0} - method name
ejb.ejbhelper.nonmanaged=JDO76600\uff1a\u4e0d\u61c9\u5728\u975e\u7ba1\u7406\u5f0f\u74b0\u5883\u4e2d\u547c\u53eb\u65b9\u6cd5 {0}\u3002

#
# Common messages between SunContainerHelper and DeploymentHelper
# so they have a neutral key, that still starts with "ejb".
#
# {0} - jndi name.
ejb.jndi.lookupfailed=JDO76604\uff1acmp-resource ''{0}'' \u7684 JNDI \u67e5\u8a62\u5931\u6557\u3002
JDO76604.diag.cause.1=\u5177\u6709 JNDI \u540d\u7a31\u7684 CMP \u8cc7\u6e90\u672a\u4f7f\u7528\u6b64\u5be6\u4f8b\u8a3b\u518a\u3002
JDO76604.diag.cause.1=\u5177\u6709 JNDI \u540d\u7a31\u7684 CMP \u8cc7\u6e90\u672a\u4f7f\u7528\u6b64\u5be6\u4f8b\u8a3b\u518a\u3002
JDO76604.diag.check.1=\u6aa2\u67e5\u60a8\u8a08\u5283\u4f7f\u7528\u4e4b\u8cc7\u6e90\u7684 JNDI \u540d\u7a31\u3002
JDO76604.diag.check.2=\u6aa2\u67e5\u6a21\u7d44\u4e2d\u6240\u6307\u5b9a CMP \u8cc7\u6e90\u7684 JNDI \u540d\u7a31\u3002

# {0} - jndi name.
# {1} - returned class name.
ejb.jndi.unexpectedinstance=JDO76605\uff1acmp-resource ''{0}'' \u7684 JNDI \u67e5\u8a62\u50b3\u56de\u672a\u9810\u671f\u985e\u578b\u7684\u5be6\u4f8b\uff1a{1}\u3002
JDO76605.diag.cause.1=\u5177\u6709 JNDI \u540d\u7a31\u7684 CMP \u8cc7\u6e90\u4e0d\u6703\u53c3\u7167 jdbc-resource \u6216 persistence-manager-factory-resource\u3002
JDO76604.diag.cause.1=\u5177\u6709 JNDI \u540d\u7a31\u7684 CMP \u8cc7\u6e90\u672a\u4f7f\u7528\u6b64\u5be6\u4f8b\u8a3b\u518a\u3002
JDO76604.diag.check.1=\u6aa2\u67e5\u60a8\u8a08\u5283\u4f7f\u7528\u4e4b\u8cc7\u6e90\u7684 JNDI \u540d\u7a31\u3002
JDO76604.diag.check.2=\u6aa2\u67e5\u6a21\u7d44\u4e2d\u6240\u6307\u5b9a CMP \u8cc7\u6e90\u7684 JNDI \u540d\u7a31\u3002

#
# DeploymentHelper messages - ejb
#
#
#<NOI18N: DeploymentHelper>
#
ejb.DeploymentHelper.getconnection=Getting connection for JNDI name ''{0}''.

# The messages JDO76606 through JDO76615 that were originally here 
# have been moved to 
# cmp/support/ejb/src/com/sun/jdo/spi/persistence/support/ejb/ejbc/Bundle.properties
# As part of INF#
# So do not use these messages. 


#
#CMPHelper messages
#
ejb.cmphelper.nonmanaged=JDO76613\uff1a\u5c0d CMPHelper \u7684\u5b58\u53d6\u7121\u6548\u3002\u6b64\u985e\u5225\u50c5\u7528\u65bc CMP \u652f\u63f4\uff0c\u4e14\u4e0d\u61c9\u5728\u61c9\u7528\u7a0b\u5f0f\u4f3a\u670d\u5668\u4e4b\u5916\u88ab\u547c\u53eb\u3002

#
#SunTransactionHelper messages
#

# {0} class name
ejb.SunTransactionHelper.wrongdatasourcetype=JDO76616\uff1aDataSource \u4e0d\u662f\u9810\u671f\u7684\u985e\u578b\u3002\u9810\u671f\uff1acom.sun.appserv.jdbc.DataSource \u53d6\u5f97\uff1a{0}\u3002


###############################################################################
# <Generic messages. Add new messages to this section only if none of the above categories can be used.>
###############################################################################
#
# <NOI18N: generic>
#
vendor=Sun Microsystems
# majorVersion (minorVersion) buildDate
fullVersion={0} ({1}) {2}
#
# <NOI18N: This messages are used for JDOFatalInternalException from multiple places. No need to I18N>
#
core.generic.unknownfield=The field {0} is not a member of the class {1}.
core.generic.unknownexception=Got an unknown exception.
core.generic.nullparam=The {0} parameter is null.
core.generic.notinstanceof=The object of class {0} is not an instance of {1}.


###############################################################################
# <These messages are used from multiple places in code.It is absolutely necessary to cleanup code
# to use different messages >
###############################################################################
core.configuration.cantloadclass=\u7121\u6cd5\u8f09\u5165\u985e\u5225 {0}\u3002
sqlstore.exception.log=Exception.
jdo.lifecycle.deleted.accessField=\u7121\u6cd5\u5b58\u53d6\u5df2\u522a\u9664\u5be6\u4f8b\u7684\u6b04\u4f4d\u3002
