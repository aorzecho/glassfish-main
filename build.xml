<?xml version="1.0" encoding="iso-8859-1"?>

<project name="GFv3 source integration" default="build.all" basedir=".">

    <property file="${basedir}/build.properties"/>
    <property name="external.dir" value="${basedir}/external" />
    <!-- default maven home directory -->
    <property name="maven.repo.local" value="${user.home}/.m2/repository" />

    <target name="init">
        <mkdir dir="${external.dir}"/>
    </target>

    <target name="build.all" depends="init">
        <echo message="external directory: ${external.dir}"/>
        <echo message="maven.repo.local: ${maven.repo.local}"/>

	<ant antfile="felix-build.xml" target="build" />
	<antcall target="eclipselink.project" />
        <antcall target="jaxb.project" />
        <ant antfile="bean-validator.xml" target="build" />
	<ant antfile="tiger-types.xml" target="build" />
	<ant antfile="metainf-services.xml" target="build" />
	<ant antfile="hk2.xml" target="build" />
	<ant antfile="uel.xml" target="build" />
	<ant antfile="jsp.xml" target="build" />
	<ant antfile="grizzly.xml" target="build" />
	<ant antfile="mojarra.xml" target="build" />
	<ant antfile="weld.xml" target="build" />
	<ant antfile="jsr311-api.xml" target="build" /> 
	<ant antfile="jersey.xml" target="build" /> 
	<ant antfile="scales.xml" target="build" /> 
	<ant antfile="woodstock.xml" target="build" /> 
	<ant antfile="jsftemplating.xml" target="build" /> 
	<ant antfile="ldapbp.xml" target="build" /> 
	<ant antfile="solarisrealm.xml" target="build" /> 
	<ant antfile="jaxr-ra.xml" target="build" /> 
	<ant antfile="slf4j.xml" target="build" /> 
        <ant antfile="management-api.xml" target="build"/>
        <ant antfile="gmbal.xml" target="build"/>
	<antcall target="wsit.project" />
<!--
        <antcall target="gfcorba.project" />
        <antcall target="delete.files">
             <param name="dir" value="${stage}"/>
        </antcall>
-->

        <!-- scripting(jruby) integrates in to glassfish v3 as binary. It depends on different v3 apis 
             as well as grizzly. Also nothing in v3 depends on it so this MUST be last one to build.
        -->
        <ant antfile="scripting.xml" target="build" />
        <ant antfile="opendmk.xml" target="build" />
    </target>
    


    <!-- requires hg (mercurial) installed and in the path -->
    <target name="gfcorba.project" >
        <exec executable="hg" dir="${stage}" failonerror="true" >
	    <arg line="clone" />
            <arg line="${gfcorba.hg.url}" />
            <arg line="glassfish-corba" />
	</exec>
    </target>

    <target name="jaxb.project">
        <exec executable="ant" failonerror="true" newenvironment="false" >
            <arg line="-f jaxb.xml" />
            <arg line="build" />
            <arg line="-Dmaven.repo.local=${maven.repo.local} -Djavac.target=1.5 -Djavac.source=1.5
                       -DJDK_1.4=${JDK_1.4} -DJDK_1.5=${JDK_1.5} -DJDK_1.6=${JDK_1.6}" />
            <!--<arg line="-Dnocheckout=true" /> -->
            <env key="JAVA_HOME" value="${JDK_1.5}" />
        </exec>
    </target>

    <target name="jersey.project">
        <exec executable="ant" failonerror="true" newenvironment="false" >
            <arg line="-f jersey.xml" />
            <arg line="build" />
            <arg line="-Dmaven.repo.local=${maven.repo.local}" />
        </exec>
    </target>

    <target name="slf4j.project">
        <exec executable="ant" failonerror="true" newenvironment="false" >
            <arg line="-f slf4j.xml" />
            <arg line="build" />
            <arg line="-Dmaven.repo.local=${maven.repo.local}" />
        </exec>
    </target>


    <target name="wsit.project" >
        <exec executable="ant" failonerror="true" newenvironment="false" >
            <arg line="-f wsit.xml" />
            <arg line="build" />
            <arg line="-Dmaven.repo.local=${maven.repo.local} -Djavac.target=1.5 -Djavac.source=1.5" />
            <env key="JAVA_HOME" value="${JDK_1.5}" />
        </exec>
    </target>


    <target name="eclipselink.project" >
        <!-- Checkout Eclipselink from internal repo -->
        <exec executable="svn" dir="${external.dir}" failonerror="true" >
			<arg line="checkout" />
			<arg line="${eclipselink.svn.url}" />
			<arg line="eclipselink" />
		</exec>
		<!-- delete sources that are no used by GFv3 -->
		<!-- We are checking them into internal source repo just in case they are needed later on-->
<!--
		TODO check with Jane what is wrong with following
		<delete>
			<dirset dir="${external.dir}/eclipselink" includes="dbws, documentation, project-admin, examples, moxy, sdo, utils"/>
		</delete>
-->		
		<delete dir="${external.dir}/eclipselink/dbws"/>
		<delete dir="${external.dir}/eclipselink/documentation"/>
		<delete dir="${external.dir}/eclipselink/project-admin"/>
		<delete dir="${external.dir}/eclipselink/examples"/>
		<delete dir="${external.dir}/eclipselink/moxy"/>
		<delete dir="${external.dir}/eclipselink/sdo"/>
		<delete dir="${external.dir}/eclipselink/utils"/>
<!--
		<delete>
			<fileset dir="${external.dir}/eclipselink/plugins" excludes="javax.jms*, javax.mail*.jar, javax.resource*.jar, javax.transaction*.jar, osgi.cmpn_*.jar, osgi.core.zip"/>
		</delete>
-->
		<exec executable="ant" failonerror="true" newenvironment="false" >
            <!-- <arg line="-verbose" />  -->
			<arg line="-f eclipselink.xml" />
			<!-- parameters required to drive eclipselink build -->		
			<arg line="-Dbasedir=${external.dir}/eclipselink" />
                        <arg line="-Dmaven.repo.local=${maven.repo.local}" />
			<arg line="-Declipselink.release.version=${eclipselink.release.version}" />
			<arg line="-Declipselink.version.qualifier=${eclipselink.version.qualifier}" />
            <arg line="build-and-upload-to-maven" />
        </exec>
    </target>

    <target name="delete.files" >
        <delete includeemptydirs="true">    
            <fileset dir="${stage}" includes="**/.svn/**,**/.hg*/**" defaultexcludes="false"/>
        </delete>
    </target>

    <!-- asm  macro
         It assumes the asm repo is located at:

         https://glassfish-svn.dev.java.net/svn/glassfish-svn/trunk/external/modules/asm/@{version}

         To use, simply use the following ant task:

         <asm.build version="..."/>

         Currently there is only 3.1 version added to glassfish-svn. For other asm version you need to add the version
         there.
    -->

    <macrodef  name="asm.build" description="Checksout asm and build at ${external.dir}, then install it local maven repo">
        <attribute name="version" default="3.1"/>
        <sequential>
            <svnco url="https://glassfish-svn.dev.java.net/svn/glassfish-svn/trunk/external/modules/asm/@{version}"
                   name="asm-@{version}"/>
            <echo message="Building asm @{version}..."/>
            <ant dir="${external.dir}/asm-@{version}" target="jar"/>

            <echo message="Installing asm @{version} to local maven repo..."/>
            <mvn-local-install artifactId="asm-parent" groupId="asm" version="@{version}" pomFile="asm-parent-@{version}.pom"
                               dir="${external.dir}/asm-@{version}/output/dist/lib" file="asm-parent-@{version}.pom" package="pom"/>

            <mvn-local-install artifactid="asm" groupid="asm" version="@{version}" pomfile="asm-@{version}.pom"
                               dir="${external.dir}/asm-@{version}/output/dist/lib" file="asm-@{version}.jar"/>
            <mvn-local-install artifactid="asm-analysis" groupid="asm" version="@{version}" pomfile="asm-analysis-@{version}.pom"
                               dir="${external.dir}/asm-@{version}/output/dist/lib" file="asm-analysis-@{version}.jar"/>
            <mvn-local-install artifactid="asm-commons" groupid="asm" version="@{version}" pomfile="asm-commons-@{version}.pom"
                               dir="${external.dir}/asm-@{version}/output/dist/lib" file="asm-commons-@{version}.jar"/>
            <mvn-local-install artifactid="asm-tree" groupid="asm" version="@{version}" pomfile="asm-tree-@{version}.pom"
                               dir="${external.dir}/asm-@{version}/output/dist/lib" file="asm-tree-@{version}.jar"/>
            <mvn-local-install artifactid="asm-util" groupid="asm" version="@{version}" pomfile="asm-util-@{version}.pom"
                               dir="${external.dir}/asm-@{version}/output/dist/lib" file="asm-util-@{version}.jar"/>
            <mvn-local-install artifactid="asm-xml" groupid="asm" version="@{version}" pomfile="asm-xml-@{version}.pom"
                               dir="${external.dir}/asm-@{version}/output/dist/lib" file="asm-xml-@{version}.jar"/>

        </sequential>
    </macrodef>

    <macrodef name="mvn-local-install" description="Install local jar in to maven">
        <attribute name="dir"/>
        <attribute name="file"/>
        <attribute name="artifactId"/>
        <attribute name="groupId"/>
        <attribute name="pomFile"/>
        <attribute name="version"/>
        <attribute name="package" default="jar"/>
        <sequential>
            <echo message="Installing @{file} at ${maven.repo.local}"/>
            <echo message="mvn install:install -Dfile=@{file} -DpomFile=@{pomFile} -DgroupId=@{groupId} -DartifactId=@{artifactId} -Dversion=@{version}"/>
            <exec executable="mvn" dir="@{dir}" failonerror="true">
                <arg line="install:install-file"/>
                <arg line="-Dfile=@{file}"/>
                <arg line="-DpomFile=@{pomFile}"/>
                <arg line="-DgroupId=@{groupId}"/>
                <arg line="-DartifactId=@{artifactId}"/>
                <arg line="-Dversion=@{version}"/>
                <arg line="-Dmaven.repo.local=${maven.repo.local}"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="svnco">
        <attribute name="url"/>
        <attribute name="name"/>
        <sequential>
            <echo message="checkout @{name} from @{url}."/>
            <exec executable="svn" dir="${external.dir}" failonerror="true">
                <arg line="checkout"/>
                <arg line="@{url} @{name}"/>
            </exec>
        </sequential>
    </macrodef>




</project>

