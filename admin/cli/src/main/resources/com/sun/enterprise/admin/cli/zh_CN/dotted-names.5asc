DOTTED-NAMES(5ASC)                                          DOTTED-NAMES(5ASC)

名称
       dotted-names - 使用句点分隔名称元素的语法

说明
       带点名称是特定 GlassFish Server 元素 (例如可配置的对象或可监视的对象)
       的标识符。带点名称使用句点 (.) (称为点)
       作为分隔符来分隔元素名称的各部分。带点名称中的句点与 UNIX
       文件系统中使用的斜杠 (/)
       字符类似，该符号用来分隔文件绝对路径名中的各个级别。

       asadmin 实用程序的子命令按如下方式使用带点名称：

       ·   list 子命令为管理组件的属性提供全限定带点名称。

       ·   get 子命令提供对属性的访问。

       ·   使用 set 子命令，您可以修改可配置的属性并设置属性。

       配置分层结构并不严格基于域的模式文档，其属性是可以修改的。监视分层结构的属性是只读的。

       以下格式用于配置带点名称 (斜体表示可以替换)：

       config-name.config-element-name.primary-key.attribute-name |
       instance-name.config-element-name.primary-key.attribute-name

       以下格式用于资源带点名称 (斜体表示可以替换)：

       server-name.resource-name.primary-key.attribute-name |
       domain.resources.resource-name.primary-key.attribute-name

       以下规则适用于生成带点名称：

       ·   顶层是配置、服务器或域名。例如，server-config (默认配置)、server
           (默认服务器) 或 domain1 (默认域)。

       ·   点 (.) 始终分隔名称的两个连续部分。

       ·   名称的一部分通常标识服务器子系统或其特定实例。例如，web-container、log-service
           和 thread-pool-1。

       ·   如果名称的任一部分本身包含点 (.)，则必须使用前导 \ (反斜杠)
           对其进行转义，以使该 .  (点)
           不用作分隔符。有关转义符的详细信息，请参阅asadmin(1M)帮助页。

       ·   * (星号)
           可以用于带点名称中的任意位置，它的作用与正则表达式中的通配符类似。此外，*
           可以折叠带点名称的所有部分。例如，较长的带点名称
           this.is.really.long.hierarchy 可以缩写成 th*.hierarchy。.  (点)
           始终用于分隔带点名称的各部分。

               注意
               ┌───────────────────────────────────────────────────────────────────────────────────────────────────┐
               │注 某些对 shell                                                                                    │
               │或命令解释器具有特殊含义的字符，如 *                                                               │
               │(星号)，应该括起来或进行转义，使之成为适合                                                         │
               │shell                                                                                              │
               │使用的形式，例如，通过将参数括在引号中。在多模式下，只有包括空格、引号或者反斜杠的参数才需要引号。 │
               └───────────────────────────────────────────────────────────────────────────────────────────────────┘

       ·   get 和 list 子命令的 --monitor
           选项选择监视或配置分层结构。如果子命令指定 --monitor=false
           (默认值)，则将选择配置分层结构。如果此子命令指定
           --monitor=true，则将选择监视分层结构。

       ·   如果知道完整带点名称而且不需要使用通配符，list、get 和 set
           子命令将区别对待名称：

           ·   list
               子命令将此完整带点名称视为抽象分层结构中某个父节点的名称。如果您将此名称指定给
               list
               子命令，则将返回该层次的直接子节点的名称。例如，以下命令将列出部署到域或默认服务器的所有
               Web 模块：

                   asadmin> list server.applications.web-module

           ·   get 和 set 子命令将完整带点名称视为某个节点
               (其带点名称本身是您在删除此带点名称的最后一部分时获得的名称)
               的属性的全限定名称。如果您将此名称指定给 get 或 set
               子命令，此子命令将作用于该属性的值
               (如果存在这样一个属性)。但永远不会出现这种情况，原因是为了查找分层结构中某个特定节点的属性的名称，必须使用通配符
               *。例如，以下带点名称将返回部署到域或默认服务器的 Web
               应用程序的上下文根目录：

                   server.applications.web-module.JSPWiki.context-root

示例
       示例 1, 列出所有可配置的元素
           此示例列出所有可配置的元素。

               asadmin> list *
           将显示类似以下内容的输出：

               applications
               configs
               configs.config.server-config
               configs.config.server-config.admin-service
               configs.config.server-config.admin-service.das-config
               configs.config.server-config.admin-service.jmx-connector.system
               configs.config.server-config.admin-service.property.adminConsoleContextRoot
               configs.config.server-config.admin-service.property.adminConsoleDownloadLocation
               configs.config.server-config.admin-service.property.ipsRoot
               configs.config.server-config.ejb-container
               configs.config.server-config.ejb-container.ejb-timer-service
               configs.config.server-config.http-service
               configs.config.server-config.http-service.access-log
               configs.config.server-config.http-service.virtual-server.__asadmin
               configs.config.server-config.http-service.virtual-server.server
               configs.config.server-config.iiop-service
               configs.config.server-config.iiop-service.iiop-listener.SSL
               configs.config.server-config.iiop-service.iiop-listener.SSL.ssl
               configs.config.server-config.iiop-service.iiop-listener.SSL_MUTUALAUTH
               configs.config.server-config.iiop-service.iiop-listener.SSL_MUTUALAUTH.ssl
               configs.config.server-config.iiop-service.iiop-listener.orb-listener-1
               configs.config.server-config.iiop-service.orb
               configs.config.server-config.java-config
               configs.config.server-config.jms-service
               configs.config.server-config.jms-service.jms-host.default_JMS_host
               configs.config.server-config.mdb-container
               configs.config.server-config.monitoring-service
               configs.config.server-config.monitoring-service.module-monitoring-levels
               ...
               property.administrative.domain.name
               resources
               resources.jdbc-connection-pool.DerbyPool
               resources.jdbc-connection-pool.DerbyPool.property.DatabaseName
               resources.jdbc-connection-pool.DerbyPool.property.Password
               resources.jdbc-connection-pool.DerbyPool.property.PortNumber
               resources.jdbc-connection-pool.DerbyPool.property.User
               resources.jdbc-connection-pool.DerbyPool.property.connectionAttributes
               resources.jdbc-connection-pool.DerbyPool.property.serverName
               resources.jdbc-connection-pool.__TimerPool
               resources.jdbc-connection-pool.__TimerPool.property.connectionAttributes
               resources.jdbc-connection-pool.__TimerPool.property.databaseName
               resources.jdbc-resource.jdbc/__TimerPool
               resources.jdbc-resource.jdbc/__default
               servers
               servers.server.server
               servers.server.server.resource-ref.jdbc/__TimerPool
               servers.server.server.resource-ref.jdbc/__default
               system-applications
               Command list executed successfully.

       示例 2, 列出所有可监视的对象
           此示例列出所有可监视的元素。

               asadmin> list --monitor *
           将显示类似以下内容的输出：

               server
               server.jvm
               server.jvm.class-loading-system
               server.jvm.compilation-system
               server.jvm.garbage-collectors
               server.jvm.garbage-collectors.Copy
               server.jvm.garbage-collectors.MarkSweepCompact
               server.jvm.memory
               server.jvm.operating-system
               server.jvm.runtime
               server.network
               server.network.admin-listener
               server.network.admin-listener.connections
               server.network.admin-listener.file-cache
               server.network.admin-listener.keep-alive
               server.network.admin-listener.thread-pool
               server.network.http-listener-1
               server.network.http-listener-1.connections
               server.network.http-listener-1.file-cache
               server.network.http-listener-1.keep-alive
               server.network.http-listener-1.thread-pool
               server.transaction-service
               Command list executed successfully.

另请参阅
       list(1)、get(1)、set(1)

       asadmin(1M)

                              2009 年 9 月 14 日            DOTTED-NAMES(5ASC)
